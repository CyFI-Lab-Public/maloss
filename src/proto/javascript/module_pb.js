/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var ast_pb = require('./ast_pb.js');
var info_pb = require('./info_pb.js');
goog.exportSymbol('proto.proto.ModuleDanger', null, global);
goog.exportSymbol('proto.proto.ModuleFlow', null, global);
goog.exportSymbol('proto.proto.ModuleFlow.FlowInfo', null, global);
goog.exportSymbol('proto.proto.ModuleResult', null, global);
goog.exportSymbol('proto.proto.ModuleSink', null, global);
goog.exportSymbol('proto.proto.ModuleSource', null, global);
goog.exportSymbol('proto.proto.ModuleStatic', null, global);
goog.exportSymbol('proto.proto.ModuleSummary', null, global);
goog.exportSymbol('proto.proto.ModuleTaintWrapper', null, global);
goog.exportSymbol('proto.proto.ModuleTaintWrapper.TaintPoint', null, global);
goog.exportSymbol('proto.proto.ModuleTaintWrapper.TaintRule', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ModuleSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ModuleSource.repeatedFields_, null);
};
goog.inherits(proto.proto.ModuleSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ModuleSource.displayName = 'proto.proto.ModuleSource';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ModuleSource.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ModuleSource.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ModuleSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ModuleSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    node: (f = msg.getNode()) && ast_pb.AstNode.toObject(includeInstance, f),
    reachableSourcesList: jspb.Message.toObjectList(msg.getReachableSourcesList(),
    ast_pb.AstNode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ModuleSource}
 */
proto.proto.ModuleSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ModuleSource;
  return proto.proto.ModuleSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ModuleSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ModuleSource}
 */
proto.proto.ModuleSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new ast_pb.AstNode;
      reader.readMessage(value,ast_pb.AstNode.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    case 2:
      var value = new ast_pb.AstNode;
      reader.readMessage(value,ast_pb.AstNode.deserializeBinaryFromReader);
      msg.addReachableSources(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ModuleSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ModuleSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ModuleSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      ast_pb.AstNode.serializeBinaryToWriter
    );
  }
  f = message.getReachableSourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      ast_pb.AstNode.serializeBinaryToWriter
    );
  }
};


/**
 * optional AstNode node = 1;
 * @return {?proto.proto.AstNode}
 */
proto.proto.ModuleSource.prototype.getNode = function() {
  return /** @type{?proto.proto.AstNode} */ (
    jspb.Message.getWrapperField(this, ast_pb.AstNode, 1));
};


/** @param {?proto.proto.AstNode|undefined} value */
proto.proto.ModuleSource.prototype.setNode = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.ModuleSource.prototype.clearNode = function() {
  this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ModuleSource.prototype.hasNode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated AstNode reachable_sources = 2;
 * @return {!Array<!proto.proto.AstNode>}
 */
proto.proto.ModuleSource.prototype.getReachableSourcesList = function() {
  return /** @type{!Array<!proto.proto.AstNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, ast_pb.AstNode, 2));
};


/** @param {!Array<!proto.proto.AstNode>} value */
proto.proto.ModuleSource.prototype.setReachableSourcesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.AstNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.AstNode}
 */
proto.proto.ModuleSource.prototype.addReachableSources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.AstNode, opt_index);
};


proto.proto.ModuleSource.prototype.clearReachableSourcesList = function() {
  this.setReachableSourcesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ModuleSink = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ModuleSink.repeatedFields_, null);
};
goog.inherits(proto.proto.ModuleSink, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ModuleSink.displayName = 'proto.proto.ModuleSink';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ModuleSink.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ModuleSink.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ModuleSink.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ModuleSink} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleSink.toObject = function(includeInstance, msg) {
  var f, obj = {
    node: (f = msg.getNode()) && ast_pb.AstNode.toObject(includeInstance, f),
    reachableSinksList: jspb.Message.toObjectList(msg.getReachableSinksList(),
    ast_pb.AstNode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ModuleSink}
 */
proto.proto.ModuleSink.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ModuleSink;
  return proto.proto.ModuleSink.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ModuleSink} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ModuleSink}
 */
proto.proto.ModuleSink.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new ast_pb.AstNode;
      reader.readMessage(value,ast_pb.AstNode.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    case 2:
      var value = new ast_pb.AstNode;
      reader.readMessage(value,ast_pb.AstNode.deserializeBinaryFromReader);
      msg.addReachableSinks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ModuleSink.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ModuleSink.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ModuleSink} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleSink.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      ast_pb.AstNode.serializeBinaryToWriter
    );
  }
  f = message.getReachableSinksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      ast_pb.AstNode.serializeBinaryToWriter
    );
  }
};


/**
 * optional AstNode node = 1;
 * @return {?proto.proto.AstNode}
 */
proto.proto.ModuleSink.prototype.getNode = function() {
  return /** @type{?proto.proto.AstNode} */ (
    jspb.Message.getWrapperField(this, ast_pb.AstNode, 1));
};


/** @param {?proto.proto.AstNode|undefined} value */
proto.proto.ModuleSink.prototype.setNode = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.ModuleSink.prototype.clearNode = function() {
  this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ModuleSink.prototype.hasNode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated AstNode reachable_sinks = 2;
 * @return {!Array<!proto.proto.AstNode>}
 */
proto.proto.ModuleSink.prototype.getReachableSinksList = function() {
  return /** @type{!Array<!proto.proto.AstNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, ast_pb.AstNode, 2));
};


/** @param {!Array<!proto.proto.AstNode>} value */
proto.proto.ModuleSink.prototype.setReachableSinksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.AstNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.AstNode}
 */
proto.proto.ModuleSink.prototype.addReachableSinks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.AstNode, opt_index);
};


proto.proto.ModuleSink.prototype.clearReachableSinksList = function() {
  this.setReachableSinksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ModuleTaintWrapper = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ModuleTaintWrapper.repeatedFields_, null);
};
goog.inherits(proto.proto.ModuleTaintWrapper, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ModuleTaintWrapper.displayName = 'proto.proto.ModuleTaintWrapper';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ModuleTaintWrapper.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ModuleTaintWrapper.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ModuleTaintWrapper.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ModuleTaintWrapper} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleTaintWrapper.toObject = function(includeInstance, msg) {
  var f, obj = {
    node: (f = msg.getNode()) && ast_pb.AstNode.toObject(includeInstance, f),
    rulesList: jspb.Message.toObjectList(msg.getRulesList(),
    proto.proto.ModuleTaintWrapper.TaintRule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ModuleTaintWrapper}
 */
proto.proto.ModuleTaintWrapper.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ModuleTaintWrapper;
  return proto.proto.ModuleTaintWrapper.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ModuleTaintWrapper} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ModuleTaintWrapper}
 */
proto.proto.ModuleTaintWrapper.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new ast_pb.AstNode;
      reader.readMessage(value,ast_pb.AstNode.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    case 2:
      var value = new proto.proto.ModuleTaintWrapper.TaintRule;
      reader.readMessage(value,proto.proto.ModuleTaintWrapper.TaintRule.deserializeBinaryFromReader);
      msg.addRules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ModuleTaintWrapper.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ModuleTaintWrapper.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ModuleTaintWrapper} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleTaintWrapper.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      ast_pb.AstNode.serializeBinaryToWriter
    );
  }
  f = message.getRulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.ModuleTaintWrapper.TaintRule.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ModuleTaintWrapper.TaintPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ModuleTaintWrapper.TaintPoint.repeatedFields_, null);
};
goog.inherits(proto.proto.ModuleTaintWrapper.TaintPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ModuleTaintWrapper.TaintPoint.displayName = 'proto.proto.ModuleTaintWrapper.TaintPoint';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ModuleTaintWrapper.TaintPoint.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ModuleTaintWrapper.TaintPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ModuleTaintWrapper.TaintPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ModuleTaintWrapper.TaintPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleTaintWrapper.TaintPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accessPathsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ModuleTaintWrapper.TaintPoint}
 */
proto.proto.ModuleTaintWrapper.TaintPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ModuleTaintWrapper.TaintPoint;
  return proto.proto.ModuleTaintWrapper.TaintPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ModuleTaintWrapper.TaintPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ModuleTaintWrapper.TaintPoint}
 */
proto.proto.ModuleTaintWrapper.TaintPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addAccessPaths(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ModuleTaintWrapper.TaintPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ModuleTaintWrapper.TaintPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ModuleTaintWrapper.TaintPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleTaintWrapper.TaintPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAccessPathsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.proto.ModuleTaintWrapper.TaintPoint.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.ModuleTaintWrapper.TaintPoint.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string access_paths = 2;
 * @return {!Array<string>}
 */
proto.proto.ModuleTaintWrapper.TaintPoint.prototype.getAccessPathsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.proto.ModuleTaintWrapper.TaintPoint.prototype.setAccessPathsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.ModuleTaintWrapper.TaintPoint.prototype.addAccessPaths = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.proto.ModuleTaintWrapper.TaintPoint.prototype.clearAccessPathsList = function() {
  this.setAccessPathsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ModuleTaintWrapper.TaintRule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ModuleTaintWrapper.TaintRule.repeatedFields_, null);
};
goog.inherits(proto.proto.ModuleTaintWrapper.TaintRule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ModuleTaintWrapper.TaintRule.displayName = 'proto.proto.ModuleTaintWrapper.TaintRule';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ModuleTaintWrapper.TaintRule.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ModuleTaintWrapper.TaintRule.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ModuleTaintWrapper.TaintRule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ModuleTaintWrapper.TaintRule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleTaintWrapper.TaintRule.toObject = function(includeInstance, msg) {
  var f, obj = {
    cause: (f = msg.getCause()) && proto.proto.ModuleTaintWrapper.TaintPoint.toObject(includeInstance, f),
    effectsList: jspb.Message.toObjectList(msg.getEffectsList(),
    proto.proto.ModuleTaintWrapper.TaintPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ModuleTaintWrapper.TaintRule}
 */
proto.proto.ModuleTaintWrapper.TaintRule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ModuleTaintWrapper.TaintRule;
  return proto.proto.ModuleTaintWrapper.TaintRule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ModuleTaintWrapper.TaintRule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ModuleTaintWrapper.TaintRule}
 */
proto.proto.ModuleTaintWrapper.TaintRule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.ModuleTaintWrapper.TaintPoint;
      reader.readMessage(value,proto.proto.ModuleTaintWrapper.TaintPoint.deserializeBinaryFromReader);
      msg.setCause(value);
      break;
    case 2:
      var value = new proto.proto.ModuleTaintWrapper.TaintPoint;
      reader.readMessage(value,proto.proto.ModuleTaintWrapper.TaintPoint.deserializeBinaryFromReader);
      msg.addEffects(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ModuleTaintWrapper.TaintRule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ModuleTaintWrapper.TaintRule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ModuleTaintWrapper.TaintRule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleTaintWrapper.TaintRule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCause();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.ModuleTaintWrapper.TaintPoint.serializeBinaryToWriter
    );
  }
  f = message.getEffectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.ModuleTaintWrapper.TaintPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional TaintPoint cause = 1;
 * @return {?proto.proto.ModuleTaintWrapper.TaintPoint}
 */
proto.proto.ModuleTaintWrapper.TaintRule.prototype.getCause = function() {
  return /** @type{?proto.proto.ModuleTaintWrapper.TaintPoint} */ (
    jspb.Message.getWrapperField(this, proto.proto.ModuleTaintWrapper.TaintPoint, 1));
};


/** @param {?proto.proto.ModuleTaintWrapper.TaintPoint|undefined} value */
proto.proto.ModuleTaintWrapper.TaintRule.prototype.setCause = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.ModuleTaintWrapper.TaintRule.prototype.clearCause = function() {
  this.setCause(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ModuleTaintWrapper.TaintRule.prototype.hasCause = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TaintPoint effects = 2;
 * @return {!Array<!proto.proto.ModuleTaintWrapper.TaintPoint>}
 */
proto.proto.ModuleTaintWrapper.TaintRule.prototype.getEffectsList = function() {
  return /** @type{!Array<!proto.proto.ModuleTaintWrapper.TaintPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ModuleTaintWrapper.TaintPoint, 2));
};


/** @param {!Array<!proto.proto.ModuleTaintWrapper.TaintPoint>} value */
proto.proto.ModuleTaintWrapper.TaintRule.prototype.setEffectsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.ModuleTaintWrapper.TaintPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ModuleTaintWrapper.TaintPoint}
 */
proto.proto.ModuleTaintWrapper.TaintRule.prototype.addEffects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.ModuleTaintWrapper.TaintPoint, opt_index);
};


proto.proto.ModuleTaintWrapper.TaintRule.prototype.clearEffectsList = function() {
  this.setEffectsList([]);
};


/**
 * optional AstNode node = 1;
 * @return {?proto.proto.AstNode}
 */
proto.proto.ModuleTaintWrapper.prototype.getNode = function() {
  return /** @type{?proto.proto.AstNode} */ (
    jspb.Message.getWrapperField(this, ast_pb.AstNode, 1));
};


/** @param {?proto.proto.AstNode|undefined} value */
proto.proto.ModuleTaintWrapper.prototype.setNode = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.ModuleTaintWrapper.prototype.clearNode = function() {
  this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ModuleTaintWrapper.prototype.hasNode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TaintRule rules = 2;
 * @return {!Array<!proto.proto.ModuleTaintWrapper.TaintRule>}
 */
proto.proto.ModuleTaintWrapper.prototype.getRulesList = function() {
  return /** @type{!Array<!proto.proto.ModuleTaintWrapper.TaintRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ModuleTaintWrapper.TaintRule, 2));
};


/** @param {!Array<!proto.proto.ModuleTaintWrapper.TaintRule>} value */
proto.proto.ModuleTaintWrapper.prototype.setRulesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.ModuleTaintWrapper.TaintRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ModuleTaintWrapper.TaintRule}
 */
proto.proto.ModuleTaintWrapper.prototype.addRules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.ModuleTaintWrapper.TaintRule, opt_index);
};


proto.proto.ModuleTaintWrapper.prototype.clearRulesList = function() {
  this.setRulesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ModuleFlow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ModuleFlow.repeatedFields_, null);
};
goog.inherits(proto.proto.ModuleFlow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ModuleFlow.displayName = 'proto.proto.ModuleFlow';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ModuleFlow.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ModuleFlow.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ModuleFlow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ModuleFlow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleFlow.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = msg.getSource()) && ast_pb.AstNode.toObject(includeInstance, f),
    hopsList: jspb.Message.toObjectList(msg.getHopsList(),
    ast_pb.AstNode.toObject, includeInstance),
    sink: (f = msg.getSink()) && ast_pb.AstNode.toObject(includeInstance, f),
    info: (f = msg.getInfo()) && proto.proto.ModuleFlow.FlowInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ModuleFlow}
 */
proto.proto.ModuleFlow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ModuleFlow;
  return proto.proto.ModuleFlow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ModuleFlow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ModuleFlow}
 */
proto.proto.ModuleFlow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new ast_pb.AstNode;
      reader.readMessage(value,ast_pb.AstNode.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 2:
      var value = new ast_pb.AstNode;
      reader.readMessage(value,ast_pb.AstNode.deserializeBinaryFromReader);
      msg.addHops(value);
      break;
    case 3:
      var value = new ast_pb.AstNode;
      reader.readMessage(value,ast_pb.AstNode.deserializeBinaryFromReader);
      msg.setSink(value);
      break;
    case 4:
      var value = new proto.proto.ModuleFlow.FlowInfo;
      reader.readMessage(value,proto.proto.ModuleFlow.FlowInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ModuleFlow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ModuleFlow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ModuleFlow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleFlow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      ast_pb.AstNode.serializeBinaryToWriter
    );
  }
  f = message.getHopsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      ast_pb.AstNode.serializeBinaryToWriter
    );
  }
  f = message.getSink();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      ast_pb.AstNode.serializeBinaryToWriter
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.ModuleFlow.FlowInfo.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ModuleFlow.FlowInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ModuleFlow.FlowInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ModuleFlow.FlowInfo.displayName = 'proto.proto.ModuleFlow.FlowInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ModuleFlow.FlowInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ModuleFlow.FlowInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ModuleFlow.FlowInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleFlow.FlowInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cwe: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ModuleFlow.FlowInfo}
 */
proto.proto.ModuleFlow.FlowInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ModuleFlow.FlowInfo;
  return proto.proto.ModuleFlow.FlowInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ModuleFlow.FlowInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ModuleFlow.FlowInfo}
 */
proto.proto.ModuleFlow.FlowInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCwe(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ModuleFlow.FlowInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ModuleFlow.FlowInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ModuleFlow.FlowInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleFlow.FlowInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCwe();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.ModuleFlow.FlowInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.ModuleFlow.FlowInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cwe = 2;
 * @return {string}
 */
proto.proto.ModuleFlow.FlowInfo.prototype.getCwe = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.ModuleFlow.FlowInfo.prototype.setCwe = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.proto.ModuleFlow.FlowInfo.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.ModuleFlow.FlowInfo.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional AstNode source = 1;
 * @return {?proto.proto.AstNode}
 */
proto.proto.ModuleFlow.prototype.getSource = function() {
  return /** @type{?proto.proto.AstNode} */ (
    jspb.Message.getWrapperField(this, ast_pb.AstNode, 1));
};


/** @param {?proto.proto.AstNode|undefined} value */
proto.proto.ModuleFlow.prototype.setSource = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.ModuleFlow.prototype.clearSource = function() {
  this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ModuleFlow.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated AstNode hops = 2;
 * @return {!Array<!proto.proto.AstNode>}
 */
proto.proto.ModuleFlow.prototype.getHopsList = function() {
  return /** @type{!Array<!proto.proto.AstNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, ast_pb.AstNode, 2));
};


/** @param {!Array<!proto.proto.AstNode>} value */
proto.proto.ModuleFlow.prototype.setHopsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.AstNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.AstNode}
 */
proto.proto.ModuleFlow.prototype.addHops = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.AstNode, opt_index);
};


proto.proto.ModuleFlow.prototype.clearHopsList = function() {
  this.setHopsList([]);
};


/**
 * optional AstNode sink = 3;
 * @return {?proto.proto.AstNode}
 */
proto.proto.ModuleFlow.prototype.getSink = function() {
  return /** @type{?proto.proto.AstNode} */ (
    jspb.Message.getWrapperField(this, ast_pb.AstNode, 3));
};


/** @param {?proto.proto.AstNode|undefined} value */
proto.proto.ModuleFlow.prototype.setSink = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.proto.ModuleFlow.prototype.clearSink = function() {
  this.setSink(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ModuleFlow.prototype.hasSink = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FlowInfo info = 4;
 * @return {?proto.proto.ModuleFlow.FlowInfo}
 */
proto.proto.ModuleFlow.prototype.getInfo = function() {
  return /** @type{?proto.proto.ModuleFlow.FlowInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.ModuleFlow.FlowInfo, 4));
};


/** @param {?proto.proto.ModuleFlow.FlowInfo|undefined} value */
proto.proto.ModuleFlow.prototype.setInfo = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.proto.ModuleFlow.prototype.clearInfo = function() {
  this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ModuleFlow.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ModuleDanger = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ModuleDanger.repeatedFields_, null);
};
goog.inherits(proto.proto.ModuleDanger, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ModuleDanger.displayName = 'proto.proto.ModuleDanger';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ModuleDanger.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ModuleDanger.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ModuleDanger.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ModuleDanger} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleDanger.toObject = function(includeInstance, msg) {
  var f, obj = {
    danger: (f = msg.getDanger()) && ast_pb.AstNode.toObject(includeInstance, f),
    slicesList: jspb.Message.toObjectList(msg.getSlicesList(),
    ast_pb.AstNode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ModuleDanger}
 */
proto.proto.ModuleDanger.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ModuleDanger;
  return proto.proto.ModuleDanger.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ModuleDanger} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ModuleDanger}
 */
proto.proto.ModuleDanger.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new ast_pb.AstNode;
      reader.readMessage(value,ast_pb.AstNode.deserializeBinaryFromReader);
      msg.setDanger(value);
      break;
    case 2:
      var value = new ast_pb.AstNode;
      reader.readMessage(value,ast_pb.AstNode.deserializeBinaryFromReader);
      msg.addSlices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ModuleDanger.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ModuleDanger.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ModuleDanger} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleDanger.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDanger();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      ast_pb.AstNode.serializeBinaryToWriter
    );
  }
  f = message.getSlicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      ast_pb.AstNode.serializeBinaryToWriter
    );
  }
};


/**
 * optional AstNode danger = 1;
 * @return {?proto.proto.AstNode}
 */
proto.proto.ModuleDanger.prototype.getDanger = function() {
  return /** @type{?proto.proto.AstNode} */ (
    jspb.Message.getWrapperField(this, ast_pb.AstNode, 1));
};


/** @param {?proto.proto.AstNode|undefined} value */
proto.proto.ModuleDanger.prototype.setDanger = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.ModuleDanger.prototype.clearDanger = function() {
  this.setDanger(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ModuleDanger.prototype.hasDanger = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated AstNode slices = 2;
 * @return {!Array<!proto.proto.AstNode>}
 */
proto.proto.ModuleDanger.prototype.getSlicesList = function() {
  return /** @type{!Array<!proto.proto.AstNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, ast_pb.AstNode, 2));
};


/** @param {!Array<!proto.proto.AstNode>} value */
proto.proto.ModuleDanger.prototype.setSlicesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.AstNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.AstNode}
 */
proto.proto.ModuleDanger.prototype.addSlices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.AstNode, opt_index);
};


proto.proto.ModuleDanger.prototype.clearSlicesList = function() {
  this.setSlicesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ModuleSummary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ModuleSummary.repeatedFields_, null);
};
goog.inherits(proto.proto.ModuleSummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ModuleSummary.displayName = 'proto.proto.ModuleSummary';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ModuleSummary.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ModuleSummary.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ModuleSummary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ModuleSummary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleSummary.toObject = function(includeInstance, msg) {
  var f, obj = {
    packageInfo: (f = msg.getPackageInfo()) && info_pb.PackageInfo.toObject(includeInstance, f),
    sourcesList: jspb.Message.toObjectList(msg.getSourcesList(),
    proto.proto.ModuleSource.toObject, includeInstance),
    sinksList: jspb.Message.toObjectList(msg.getSinksList(),
    proto.proto.ModuleSink.toObject, includeInstance),
    taintWrappersList: jspb.Message.toObjectList(msg.getTaintWrappersList(),
    proto.proto.ModuleTaintWrapper.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ModuleSummary}
 */
proto.proto.ModuleSummary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ModuleSummary;
  return proto.proto.ModuleSummary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ModuleSummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ModuleSummary}
 */
proto.proto.ModuleSummary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new info_pb.PackageInfo;
      reader.readMessage(value,info_pb.PackageInfo.deserializeBinaryFromReader);
      msg.setPackageInfo(value);
      break;
    case 2:
      var value = new proto.proto.ModuleSource;
      reader.readMessage(value,proto.proto.ModuleSource.deserializeBinaryFromReader);
      msg.addSources(value);
      break;
    case 3:
      var value = new proto.proto.ModuleSink;
      reader.readMessage(value,proto.proto.ModuleSink.deserializeBinaryFromReader);
      msg.addSinks(value);
      break;
    case 4:
      var value = new proto.proto.ModuleTaintWrapper;
      reader.readMessage(value,proto.proto.ModuleTaintWrapper.deserializeBinaryFromReader);
      msg.addTaintWrappers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ModuleSummary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ModuleSummary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ModuleSummary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleSummary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPackageInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      info_pb.PackageInfo.serializeBinaryToWriter
    );
  }
  f = message.getSourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.ModuleSource.serializeBinaryToWriter
    );
  }
  f = message.getSinksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.proto.ModuleSink.serializeBinaryToWriter
    );
  }
  f = message.getTaintWrappersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.proto.ModuleTaintWrapper.serializeBinaryToWriter
    );
  }
};


/**
 * optional PackageInfo package_info = 1;
 * @return {?proto.proto.PackageInfo}
 */
proto.proto.ModuleSummary.prototype.getPackageInfo = function() {
  return /** @type{?proto.proto.PackageInfo} */ (
    jspb.Message.getWrapperField(this, info_pb.PackageInfo, 1));
};


/** @param {?proto.proto.PackageInfo|undefined} value */
proto.proto.ModuleSummary.prototype.setPackageInfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.ModuleSummary.prototype.clearPackageInfo = function() {
  this.setPackageInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ModuleSummary.prototype.hasPackageInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ModuleSource sources = 2;
 * @return {!Array<!proto.proto.ModuleSource>}
 */
proto.proto.ModuleSummary.prototype.getSourcesList = function() {
  return /** @type{!Array<!proto.proto.ModuleSource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ModuleSource, 2));
};


/** @param {!Array<!proto.proto.ModuleSource>} value */
proto.proto.ModuleSummary.prototype.setSourcesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.ModuleSource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ModuleSource}
 */
proto.proto.ModuleSummary.prototype.addSources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.ModuleSource, opt_index);
};


proto.proto.ModuleSummary.prototype.clearSourcesList = function() {
  this.setSourcesList([]);
};


/**
 * repeated ModuleSink sinks = 3;
 * @return {!Array<!proto.proto.ModuleSink>}
 */
proto.proto.ModuleSummary.prototype.getSinksList = function() {
  return /** @type{!Array<!proto.proto.ModuleSink>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ModuleSink, 3));
};


/** @param {!Array<!proto.proto.ModuleSink>} value */
proto.proto.ModuleSummary.prototype.setSinksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.proto.ModuleSink=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ModuleSink}
 */
proto.proto.ModuleSummary.prototype.addSinks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.proto.ModuleSink, opt_index);
};


proto.proto.ModuleSummary.prototype.clearSinksList = function() {
  this.setSinksList([]);
};


/**
 * repeated ModuleTaintWrapper taint_wrappers = 4;
 * @return {!Array<!proto.proto.ModuleTaintWrapper>}
 */
proto.proto.ModuleSummary.prototype.getTaintWrappersList = function() {
  return /** @type{!Array<!proto.proto.ModuleTaintWrapper>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ModuleTaintWrapper, 4));
};


/** @param {!Array<!proto.proto.ModuleTaintWrapper>} value */
proto.proto.ModuleSummary.prototype.setTaintWrappersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.proto.ModuleTaintWrapper=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ModuleTaintWrapper}
 */
proto.proto.ModuleSummary.prototype.addTaintWrappers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.proto.ModuleTaintWrapper, opt_index);
};


proto.proto.ModuleSummary.prototype.clearTaintWrappersList = function() {
  this.setTaintWrappersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ModuleResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ModuleResult.repeatedFields_, null);
};
goog.inherits(proto.proto.ModuleResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ModuleResult.displayName = 'proto.proto.ModuleResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ModuleResult.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ModuleResult.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ModuleResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ModuleResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    packageInfo: (f = msg.getPackageInfo()) && info_pb.PackageInfo.toObject(includeInstance, f),
    flowsList: jspb.Message.toObjectList(msg.getFlowsList(),
    proto.proto.ModuleFlow.toObject, includeInstance),
    dangersList: jspb.Message.toObjectList(msg.getDangersList(),
    proto.proto.ModuleDanger.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ModuleResult}
 */
proto.proto.ModuleResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ModuleResult;
  return proto.proto.ModuleResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ModuleResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ModuleResult}
 */
proto.proto.ModuleResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new info_pb.PackageInfo;
      reader.readMessage(value,info_pb.PackageInfo.deserializeBinaryFromReader);
      msg.setPackageInfo(value);
      break;
    case 2:
      var value = new proto.proto.ModuleFlow;
      reader.readMessage(value,proto.proto.ModuleFlow.deserializeBinaryFromReader);
      msg.addFlows(value);
      break;
    case 3:
      var value = new proto.proto.ModuleDanger;
      reader.readMessage(value,proto.proto.ModuleDanger.deserializeBinaryFromReader);
      msg.addDangers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ModuleResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ModuleResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ModuleResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPackageInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      info_pb.PackageInfo.serializeBinaryToWriter
    );
  }
  f = message.getFlowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.ModuleFlow.serializeBinaryToWriter
    );
  }
  f = message.getDangersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.proto.ModuleDanger.serializeBinaryToWriter
    );
  }
};


/**
 * optional PackageInfo package_info = 1;
 * @return {?proto.proto.PackageInfo}
 */
proto.proto.ModuleResult.prototype.getPackageInfo = function() {
  return /** @type{?proto.proto.PackageInfo} */ (
    jspb.Message.getWrapperField(this, info_pb.PackageInfo, 1));
};


/** @param {?proto.proto.PackageInfo|undefined} value */
proto.proto.ModuleResult.prototype.setPackageInfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.ModuleResult.prototype.clearPackageInfo = function() {
  this.setPackageInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ModuleResult.prototype.hasPackageInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ModuleFlow flows = 2;
 * @return {!Array<!proto.proto.ModuleFlow>}
 */
proto.proto.ModuleResult.prototype.getFlowsList = function() {
  return /** @type{!Array<!proto.proto.ModuleFlow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ModuleFlow, 2));
};


/** @param {!Array<!proto.proto.ModuleFlow>} value */
proto.proto.ModuleResult.prototype.setFlowsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.ModuleFlow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ModuleFlow}
 */
proto.proto.ModuleResult.prototype.addFlows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.ModuleFlow, opt_index);
};


proto.proto.ModuleResult.prototype.clearFlowsList = function() {
  this.setFlowsList([]);
};


/**
 * repeated ModuleDanger dangers = 3;
 * @return {!Array<!proto.proto.ModuleDanger>}
 */
proto.proto.ModuleResult.prototype.getDangersList = function() {
  return /** @type{!Array<!proto.proto.ModuleDanger>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ModuleDanger, 3));
};


/** @param {!Array<!proto.proto.ModuleDanger>} value */
proto.proto.ModuleResult.prototype.setDangersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.proto.ModuleDanger=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ModuleDanger}
 */
proto.proto.ModuleResult.prototype.addDangers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.proto.ModuleDanger, opt_index);
};


proto.proto.ModuleResult.prototype.clearDangersList = function() {
  this.setDangersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ModuleStatic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ModuleStatic.repeatedFields_, null);
};
goog.inherits(proto.proto.ModuleStatic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ModuleStatic.displayName = 'proto.proto.ModuleStatic';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ModuleStatic.repeatedFields_ = [2,3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ModuleStatic.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ModuleStatic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ModuleStatic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleStatic.toObject = function(includeInstance, msg) {
  var f, obj = {
    packageInfo: (f = msg.getPackageInfo()) && info_pb.PackageInfo.toObject(includeInstance, f),
    flowsList: jspb.Message.toObjectList(msg.getFlowsList(),
    proto.proto.ModuleFlow.toObject, includeInstance),
    dangersList: jspb.Message.toObjectList(msg.getDangersList(),
    proto.proto.ModuleDanger.toObject, includeInstance),
    sourcesList: jspb.Message.toObjectList(msg.getSourcesList(),
    proto.proto.ModuleSource.toObject, includeInstance),
    sinksList: jspb.Message.toObjectList(msg.getSinksList(),
    proto.proto.ModuleSink.toObject, includeInstance),
    taintWrappersList: jspb.Message.toObjectList(msg.getTaintWrappersList(),
    proto.proto.ModuleTaintWrapper.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ModuleStatic}
 */
proto.proto.ModuleStatic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ModuleStatic;
  return proto.proto.ModuleStatic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ModuleStatic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ModuleStatic}
 */
proto.proto.ModuleStatic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new info_pb.PackageInfo;
      reader.readMessage(value,info_pb.PackageInfo.deserializeBinaryFromReader);
      msg.setPackageInfo(value);
      break;
    case 2:
      var value = new proto.proto.ModuleFlow;
      reader.readMessage(value,proto.proto.ModuleFlow.deserializeBinaryFromReader);
      msg.addFlows(value);
      break;
    case 3:
      var value = new proto.proto.ModuleDanger;
      reader.readMessage(value,proto.proto.ModuleDanger.deserializeBinaryFromReader);
      msg.addDangers(value);
      break;
    case 4:
      var value = new proto.proto.ModuleSource;
      reader.readMessage(value,proto.proto.ModuleSource.deserializeBinaryFromReader);
      msg.addSources(value);
      break;
    case 5:
      var value = new proto.proto.ModuleSink;
      reader.readMessage(value,proto.proto.ModuleSink.deserializeBinaryFromReader);
      msg.addSinks(value);
      break;
    case 6:
      var value = new proto.proto.ModuleTaintWrapper;
      reader.readMessage(value,proto.proto.ModuleTaintWrapper.deserializeBinaryFromReader);
      msg.addTaintWrappers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ModuleStatic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ModuleStatic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ModuleStatic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ModuleStatic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPackageInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      info_pb.PackageInfo.serializeBinaryToWriter
    );
  }
  f = message.getFlowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.ModuleFlow.serializeBinaryToWriter
    );
  }
  f = message.getDangersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.proto.ModuleDanger.serializeBinaryToWriter
    );
  }
  f = message.getSourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.proto.ModuleSource.serializeBinaryToWriter
    );
  }
  f = message.getSinksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.proto.ModuleSink.serializeBinaryToWriter
    );
  }
  f = message.getTaintWrappersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.proto.ModuleTaintWrapper.serializeBinaryToWriter
    );
  }
};


/**
 * optional PackageInfo package_info = 1;
 * @return {?proto.proto.PackageInfo}
 */
proto.proto.ModuleStatic.prototype.getPackageInfo = function() {
  return /** @type{?proto.proto.PackageInfo} */ (
    jspb.Message.getWrapperField(this, info_pb.PackageInfo, 1));
};


/** @param {?proto.proto.PackageInfo|undefined} value */
proto.proto.ModuleStatic.prototype.setPackageInfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.ModuleStatic.prototype.clearPackageInfo = function() {
  this.setPackageInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ModuleStatic.prototype.hasPackageInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ModuleFlow flows = 2;
 * @return {!Array<!proto.proto.ModuleFlow>}
 */
proto.proto.ModuleStatic.prototype.getFlowsList = function() {
  return /** @type{!Array<!proto.proto.ModuleFlow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ModuleFlow, 2));
};


/** @param {!Array<!proto.proto.ModuleFlow>} value */
proto.proto.ModuleStatic.prototype.setFlowsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.ModuleFlow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ModuleFlow}
 */
proto.proto.ModuleStatic.prototype.addFlows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.ModuleFlow, opt_index);
};


proto.proto.ModuleStatic.prototype.clearFlowsList = function() {
  this.setFlowsList([]);
};


/**
 * repeated ModuleDanger dangers = 3;
 * @return {!Array<!proto.proto.ModuleDanger>}
 */
proto.proto.ModuleStatic.prototype.getDangersList = function() {
  return /** @type{!Array<!proto.proto.ModuleDanger>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ModuleDanger, 3));
};


/** @param {!Array<!proto.proto.ModuleDanger>} value */
proto.proto.ModuleStatic.prototype.setDangersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.proto.ModuleDanger=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ModuleDanger}
 */
proto.proto.ModuleStatic.prototype.addDangers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.proto.ModuleDanger, opt_index);
};


proto.proto.ModuleStatic.prototype.clearDangersList = function() {
  this.setDangersList([]);
};


/**
 * repeated ModuleSource sources = 4;
 * @return {!Array<!proto.proto.ModuleSource>}
 */
proto.proto.ModuleStatic.prototype.getSourcesList = function() {
  return /** @type{!Array<!proto.proto.ModuleSource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ModuleSource, 4));
};


/** @param {!Array<!proto.proto.ModuleSource>} value */
proto.proto.ModuleStatic.prototype.setSourcesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.proto.ModuleSource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ModuleSource}
 */
proto.proto.ModuleStatic.prototype.addSources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.proto.ModuleSource, opt_index);
};


proto.proto.ModuleStatic.prototype.clearSourcesList = function() {
  this.setSourcesList([]);
};


/**
 * repeated ModuleSink sinks = 5;
 * @return {!Array<!proto.proto.ModuleSink>}
 */
proto.proto.ModuleStatic.prototype.getSinksList = function() {
  return /** @type{!Array<!proto.proto.ModuleSink>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ModuleSink, 5));
};


/** @param {!Array<!proto.proto.ModuleSink>} value */
proto.proto.ModuleStatic.prototype.setSinksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.proto.ModuleSink=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ModuleSink}
 */
proto.proto.ModuleStatic.prototype.addSinks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.proto.ModuleSink, opt_index);
};


proto.proto.ModuleStatic.prototype.clearSinksList = function() {
  this.setSinksList([]);
};


/**
 * repeated ModuleTaintWrapper taint_wrappers = 6;
 * @return {!Array<!proto.proto.ModuleTaintWrapper>}
 */
proto.proto.ModuleStatic.prototype.getTaintWrappersList = function() {
  return /** @type{!Array<!proto.proto.ModuleTaintWrapper>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ModuleTaintWrapper, 6));
};


/** @param {!Array<!proto.proto.ModuleTaintWrapper>} value */
proto.proto.ModuleStatic.prototype.setTaintWrappersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.proto.ModuleTaintWrapper=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ModuleTaintWrapper}
 */
proto.proto.ModuleStatic.prototype.addTaintWrappers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.proto.ModuleTaintWrapper, opt_index);
};


proto.proto.ModuleStatic.prototype.clearTaintWrappersList = function() {
  this.setTaintWrappersList([]);
};


goog.object.extend(exports, proto.proto);
