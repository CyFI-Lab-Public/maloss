/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var ast_pb = require('./ast_pb.js');
goog.exportSymbol('proto.proto.BasicBlockProto', null, global);
goog.exportSymbol('proto.proto.Centroid', null, global);
goog.exportSymbol('proto.proto.ClassAttributeProto', null, global);
goog.exportSymbol('proto.proto.ClassMethodRelationProto', null, global);
goog.exportSymbol('proto.proto.ClassRelationProto', null, global);
goog.exportSymbol('proto.proto.ClassRelationProto.RelationCounter', null, global);
goog.exportSymbol('proto.proto.ClassRelationProto.RelationType', null, global);
goog.exportSymbol('proto.proto.MethodAttributeProto', null, global);
goog.exportSymbol('proto.proto.MethodClassRelationProto', null, global);
goog.exportSymbol('proto.proto.MethodRelationProto', null, global);
goog.exportSymbol('proto.proto.PkgClassMethodResult', null, global);
goog.exportSymbol('proto.proto.PkgClassMethodResults', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Centroid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Centroid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Centroid.displayName = 'proto.proto.Centroid';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Centroid.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Centroid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Centroid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Centroid.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    z: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    w: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Centroid}
 */
proto.proto.Centroid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Centroid;
  return proto.proto.Centroid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Centroid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Centroid}
 */
proto.proto.Centroid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setW(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Centroid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Centroid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Centroid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Centroid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getW();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.proto.Centroid.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.proto.Centroid.prototype.setX = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.proto.Centroid.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.proto.Centroid.prototype.setY = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.proto.Centroid.prototype.getZ = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.proto.Centroid.prototype.setZ = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional int32 w = 4;
 * @return {number}
 */
proto.proto.Centroid.prototype.getW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.Centroid.prototype.setW = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.BasicBlockProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.BasicBlockProto.repeatedFields_, null);
};
goog.inherits(proto.proto.BasicBlockProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.BasicBlockProto.displayName = 'proto.proto.BasicBlockProto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.BasicBlockProto.repeatedFields_ = [8,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.BasicBlockProto.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.BasicBlockProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.BasicBlockProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.BasicBlockProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    inDegree: jspb.Message.getFieldWithDefault(msg, 2, 0),
    outDegree: jspb.Message.getFieldWithDefault(msg, 3, 0),
    inDegreeUnexceptional: jspb.Message.getFieldWithDefault(msg, 4, 0),
    outDegreeUnexceptional: jspb.Message.getFieldWithDefault(msg, 5, 0),
    loopDepth: jspb.Message.getFieldWithDefault(msg, 6, 0),
    stmtCount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    invokedMethodSignaturesList: jspb.Message.getRepeatedField(msg, 8),
    predecessorsList: jspb.Message.getRepeatedField(msg, 9),
    successorsList: jspb.Message.getRepeatedField(msg, 10),
    dominatorSequenceNumber: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.BasicBlockProto}
 */
proto.proto.BasicBlockProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.BasicBlockProto;
  return proto.proto.BasicBlockProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.BasicBlockProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.BasicBlockProto}
 */
proto.proto.BasicBlockProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceNumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInDegree(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutDegree(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInDegreeUnexceptional(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutDegreeUnexceptional(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLoopDepth(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStmtCount(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addInvokedMethodSignatures(value);
      break;
    case 9:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setPredecessorsList(value);
      break;
    case 10:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setSuccessorsList(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDominatorSequenceNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.BasicBlockProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.BasicBlockProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.BasicBlockProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.BasicBlockProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getInDegree();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOutDegree();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getInDegreeUnexceptional();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getOutDegreeUnexceptional();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getLoopDepth();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getStmtCount();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getInvokedMethodSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getPredecessorsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      9,
      f
    );
  }
  f = message.getSuccessorsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      10,
      f
    );
  }
  f = message.getDominatorSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
};


/**
 * optional int32 sequence_number = 1;
 * @return {number}
 */
proto.proto.BasicBlockProto.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.BasicBlockProto.prototype.setSequenceNumber = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 in_degree = 2;
 * @return {number}
 */
proto.proto.BasicBlockProto.prototype.getInDegree = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.BasicBlockProto.prototype.setInDegree = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 out_degree = 3;
 * @return {number}
 */
proto.proto.BasicBlockProto.prototype.getOutDegree = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.BasicBlockProto.prototype.setOutDegree = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 in_degree_unexceptional = 4;
 * @return {number}
 */
proto.proto.BasicBlockProto.prototype.getInDegreeUnexceptional = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.BasicBlockProto.prototype.setInDegreeUnexceptional = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 out_degree_unexceptional = 5;
 * @return {number}
 */
proto.proto.BasicBlockProto.prototype.getOutDegreeUnexceptional = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.BasicBlockProto.prototype.setOutDegreeUnexceptional = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 loop_depth = 6;
 * @return {number}
 */
proto.proto.BasicBlockProto.prototype.getLoopDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.BasicBlockProto.prototype.setLoopDepth = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 stmt_count = 7;
 * @return {number}
 */
proto.proto.BasicBlockProto.prototype.getStmtCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.proto.BasicBlockProto.prototype.setStmtCount = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated string invoked_method_signatures = 8;
 * @return {!Array<string>}
 */
proto.proto.BasicBlockProto.prototype.getInvokedMethodSignaturesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array<string>} value */
proto.proto.BasicBlockProto.prototype.setInvokedMethodSignaturesList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.BasicBlockProto.prototype.addInvokedMethodSignatures = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.proto.BasicBlockProto.prototype.clearInvokedMethodSignaturesList = function() {
  this.setInvokedMethodSignaturesList([]);
};


/**
 * repeated int32 predecessors = 9;
 * @return {!Array<number>}
 */
proto.proto.BasicBlockProto.prototype.getPredecessorsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 9));
};


/** @param {!Array<number>} value */
proto.proto.BasicBlockProto.prototype.setPredecessorsList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.BasicBlockProto.prototype.addPredecessors = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.proto.BasicBlockProto.prototype.clearPredecessorsList = function() {
  this.setPredecessorsList([]);
};


/**
 * repeated int32 successors = 10;
 * @return {!Array<number>}
 */
proto.proto.BasicBlockProto.prototype.getSuccessorsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array<number>} value */
proto.proto.BasicBlockProto.prototype.setSuccessorsList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.BasicBlockProto.prototype.addSuccessors = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.proto.BasicBlockProto.prototype.clearSuccessorsList = function() {
  this.setSuccessorsList([]);
};


/**
 * optional int32 dominator_sequence_number = 11;
 * @return {number}
 */
proto.proto.BasicBlockProto.prototype.getDominatorSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.proto.BasicBlockProto.prototype.setDominatorSequenceNumber = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.MethodAttributeProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.MethodAttributeProto.repeatedFields_, null);
};
goog.inherits(proto.proto.MethodAttributeProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.MethodAttributeProto.displayName = 'proto.proto.MethodAttributeProto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.MethodAttributeProto.repeatedFields_ = [5,7,8,9,10,11,15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.MethodAttributeProto.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.MethodAttributeProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.MethodAttributeProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.MethodAttributeProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    className: jspb.Message.getFieldWithDefault(msg, 1, ""),
    methodName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    methodSignature: jspb.Message.getFieldWithDefault(msg, 3, ""),
    methodSubsignature: jspb.Message.getFieldWithDefault(msg, 4, ""),
    paramterTypesList: jspb.Message.getRepeatedField(msg, 5),
    returnType: jspb.Message.getFieldWithDefault(msg, 6, ""),
    localTypesList: jspb.Message.getRepeatedField(msg, 7),
    stringConstantsList: jspb.Message.getRepeatedField(msg, 8),
    invokedMethodSignaturesList: jspb.Message.getRepeatedField(msg, 9),
    resourceRefsList: jspb.Message.getRepeatedField(msg, 10),
    statementsList: jspb.Message.getRepeatedField(msg, 11),
    modifiers: jspb.Message.getFieldWithDefault(msg, 12, ""),
    centroid: (f = msg.getCentroid()) && proto.proto.Centroid.toObject(includeInstance, f),
    centroidWithInvoke: (f = msg.getCentroidWithInvoke()) && proto.proto.Centroid.toObject(includeInstance, f),
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    proto.proto.BasicBlockProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.MethodAttributeProto}
 */
proto.proto.MethodAttributeProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.MethodAttributeProto;
  return proto.proto.MethodAttributeProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.MethodAttributeProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.MethodAttributeProto}
 */
proto.proto.MethodAttributeProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodSignature(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodSubsignature(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addParamterTypes(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setReturnType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addLocalTypes(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addStringConstants(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addInvokedMethodSignatures(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addResourceRefs(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.addStatements(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setModifiers(value);
      break;
    case 13:
      var value = new proto.proto.Centroid;
      reader.readMessage(value,proto.proto.Centroid.deserializeBinaryFromReader);
      msg.setCentroid(value);
      break;
    case 14:
      var value = new proto.proto.Centroid;
      reader.readMessage(value,proto.proto.Centroid.deserializeBinaryFromReader);
      msg.setCentroidWithInvoke(value);
      break;
    case 15:
      var value = new proto.proto.BasicBlockProto;
      reader.readMessage(value,proto.proto.BasicBlockProto.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.MethodAttributeProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.MethodAttributeProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.MethodAttributeProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.MethodAttributeProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMethodName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMethodSignature();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMethodSubsignature();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getParamterTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getReturnType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLocalTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getStringConstantsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getInvokedMethodSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getResourceRefsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = message.getStatementsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      11,
      f
    );
  }
  f = message.getModifiers();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getCentroid();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.proto.Centroid.serializeBinaryToWriter
    );
  }
  f = message.getCentroidWithInvoke();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.proto.Centroid.serializeBinaryToWriter
    );
  }
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.proto.BasicBlockProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional string class_name = 1;
 * @return {string}
 */
proto.proto.MethodAttributeProto.prototype.getClassName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.MethodAttributeProto.prototype.setClassName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string method_name = 2;
 * @return {string}
 */
proto.proto.MethodAttributeProto.prototype.getMethodName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.MethodAttributeProto.prototype.setMethodName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string method_signature = 3;
 * @return {string}
 */
proto.proto.MethodAttributeProto.prototype.getMethodSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.MethodAttributeProto.prototype.setMethodSignature = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string method_subsignature = 4;
 * @return {string}
 */
proto.proto.MethodAttributeProto.prototype.getMethodSubsignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.MethodAttributeProto.prototype.setMethodSubsignature = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string paramter_types = 5;
 * @return {!Array<string>}
 */
proto.proto.MethodAttributeProto.prototype.getParamterTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.proto.MethodAttributeProto.prototype.setParamterTypesList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.MethodAttributeProto.prototype.addParamterTypes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.proto.MethodAttributeProto.prototype.clearParamterTypesList = function() {
  this.setParamterTypesList([]);
};


/**
 * optional string return_type = 6;
 * @return {string}
 */
proto.proto.MethodAttributeProto.prototype.getReturnType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.proto.MethodAttributeProto.prototype.setReturnType = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated string local_types = 7;
 * @return {!Array<string>}
 */
proto.proto.MethodAttributeProto.prototype.getLocalTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<string>} value */
proto.proto.MethodAttributeProto.prototype.setLocalTypesList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.MethodAttributeProto.prototype.addLocalTypes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.proto.MethodAttributeProto.prototype.clearLocalTypesList = function() {
  this.setLocalTypesList([]);
};


/**
 * repeated string string_constants = 8;
 * @return {!Array<string>}
 */
proto.proto.MethodAttributeProto.prototype.getStringConstantsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array<string>} value */
proto.proto.MethodAttributeProto.prototype.setStringConstantsList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.MethodAttributeProto.prototype.addStringConstants = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.proto.MethodAttributeProto.prototype.clearStringConstantsList = function() {
  this.setStringConstantsList([]);
};


/**
 * repeated string invoked_method_signatures = 9;
 * @return {!Array<string>}
 */
proto.proto.MethodAttributeProto.prototype.getInvokedMethodSignaturesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/** @param {!Array<string>} value */
proto.proto.MethodAttributeProto.prototype.setInvokedMethodSignaturesList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.MethodAttributeProto.prototype.addInvokedMethodSignatures = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.proto.MethodAttributeProto.prototype.clearInvokedMethodSignaturesList = function() {
  this.setInvokedMethodSignaturesList([]);
};


/**
 * repeated string resource_refs = 10;
 * @return {!Array<string>}
 */
proto.proto.MethodAttributeProto.prototype.getResourceRefsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array<string>} value */
proto.proto.MethodAttributeProto.prototype.setResourceRefsList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.MethodAttributeProto.prototype.addResourceRefs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.proto.MethodAttributeProto.prototype.clearResourceRefsList = function() {
  this.setResourceRefsList([]);
};


/**
 * repeated string statements = 11;
 * @return {!Array<string>}
 */
proto.proto.MethodAttributeProto.prototype.getStatementsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 11));
};


/** @param {!Array<string>} value */
proto.proto.MethodAttributeProto.prototype.setStatementsList = function(value) {
  jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.MethodAttributeProto.prototype.addStatements = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


proto.proto.MethodAttributeProto.prototype.clearStatementsList = function() {
  this.setStatementsList([]);
};


/**
 * optional string modifiers = 12;
 * @return {string}
 */
proto.proto.MethodAttributeProto.prototype.getModifiers = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.proto.MethodAttributeProto.prototype.setModifiers = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional Centroid centroid = 13;
 * @return {?proto.proto.Centroid}
 */
proto.proto.MethodAttributeProto.prototype.getCentroid = function() {
  return /** @type{?proto.proto.Centroid} */ (
    jspb.Message.getWrapperField(this, proto.proto.Centroid, 13));
};


/** @param {?proto.proto.Centroid|undefined} value */
proto.proto.MethodAttributeProto.prototype.setCentroid = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.proto.MethodAttributeProto.prototype.clearCentroid = function() {
  this.setCentroid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.MethodAttributeProto.prototype.hasCentroid = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Centroid centroid_with_invoke = 14;
 * @return {?proto.proto.Centroid}
 */
proto.proto.MethodAttributeProto.prototype.getCentroidWithInvoke = function() {
  return /** @type{?proto.proto.Centroid} */ (
    jspb.Message.getWrapperField(this, proto.proto.Centroid, 14));
};


/** @param {?proto.proto.Centroid|undefined} value */
proto.proto.MethodAttributeProto.prototype.setCentroidWithInvoke = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.proto.MethodAttributeProto.prototype.clearCentroidWithInvoke = function() {
  this.setCentroidWithInvoke(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.MethodAttributeProto.prototype.hasCentroidWithInvoke = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * repeated BasicBlockProto blocks = 15;
 * @return {!Array<!proto.proto.BasicBlockProto>}
 */
proto.proto.MethodAttributeProto.prototype.getBlocksList = function() {
  return /** @type{!Array<!proto.proto.BasicBlockProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.BasicBlockProto, 15));
};


/** @param {!Array<!proto.proto.BasicBlockProto>} value */
proto.proto.MethodAttributeProto.prototype.setBlocksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.proto.BasicBlockProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.BasicBlockProto}
 */
proto.proto.MethodAttributeProto.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.proto.BasicBlockProto, opt_index);
};


proto.proto.MethodAttributeProto.prototype.clearBlocksList = function() {
  this.setBlocksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ClassAttributeProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ClassAttributeProto.repeatedFields_, null);
};
goog.inherits(proto.proto.ClassAttributeProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ClassAttributeProto.displayName = 'proto.proto.ClassAttributeProto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ClassAttributeProto.repeatedFields_ = [3,6,7,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ClassAttributeProto.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ClassAttributeProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ClassAttributeProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ClassAttributeProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    className: jspb.Message.getFieldWithDefault(msg, 1, ""),
    superClassName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    interfaceClassNamesList: jspb.Message.getRepeatedField(msg, 3),
    packageName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isEntryPoint: jspb.Message.getFieldWithDefault(msg, 5, false),
    staticFieldStringsList: jspb.Message.getRepeatedField(msg, 6),
    instanceFieldStringsList: jspb.Message.getRepeatedField(msg, 7),
    permissionStringsList: jspb.Message.getRepeatedField(msg, 8),
    methodsList: jspb.Message.toObjectList(msg.getMethodsList(),
    proto.proto.MethodAttributeProto.toObject, includeInstance),
    outerClassName: jspb.Message.getFieldWithDefault(msg, 10, ""),
    modifiers: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ClassAttributeProto}
 */
proto.proto.ClassAttributeProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ClassAttributeProto;
  return proto.proto.ClassAttributeProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ClassAttributeProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ClassAttributeProto}
 */
proto.proto.ClassAttributeProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSuperClassName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addInterfaceClassNames(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPackageName(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsEntryPoint(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addStaticFieldStrings(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addInstanceFieldStrings(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addPermissionStrings(value);
      break;
    case 9:
      var value = new proto.proto.MethodAttributeProto;
      reader.readMessage(value,proto.proto.MethodAttributeProto.deserializeBinaryFromReader);
      msg.addMethods(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setOuterClassName(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setModifiers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ClassAttributeProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ClassAttributeProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ClassAttributeProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ClassAttributeProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSuperClassName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInterfaceClassNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getPackageName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsEntryPoint();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getStaticFieldStringsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getInstanceFieldStringsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getPermissionStringsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getMethodsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.proto.MethodAttributeProto.serializeBinaryToWriter
    );
  }
  f = message.getOuterClassName();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getModifiers();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string class_name = 1;
 * @return {string}
 */
proto.proto.ClassAttributeProto.prototype.getClassName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.ClassAttributeProto.prototype.setClassName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string super_class_name = 2;
 * @return {string}
 */
proto.proto.ClassAttributeProto.prototype.getSuperClassName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.ClassAttributeProto.prototype.setSuperClassName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string interface_class_names = 3;
 * @return {!Array<string>}
 */
proto.proto.ClassAttributeProto.prototype.getInterfaceClassNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.proto.ClassAttributeProto.prototype.setInterfaceClassNamesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.ClassAttributeProto.prototype.addInterfaceClassNames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.proto.ClassAttributeProto.prototype.clearInterfaceClassNamesList = function() {
  this.setInterfaceClassNamesList([]);
};


/**
 * optional string package_name = 4;
 * @return {string}
 */
proto.proto.ClassAttributeProto.prototype.getPackageName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.ClassAttributeProto.prototype.setPackageName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool is_entry_point = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.ClassAttributeProto.prototype.getIsEntryPoint = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.proto.ClassAttributeProto.prototype.setIsEntryPoint = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * repeated string static_field_strings = 6;
 * @return {!Array<string>}
 */
proto.proto.ClassAttributeProto.prototype.getStaticFieldStringsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.proto.ClassAttributeProto.prototype.setStaticFieldStringsList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.ClassAttributeProto.prototype.addStaticFieldStrings = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.proto.ClassAttributeProto.prototype.clearStaticFieldStringsList = function() {
  this.setStaticFieldStringsList([]);
};


/**
 * repeated string instance_field_strings = 7;
 * @return {!Array<string>}
 */
proto.proto.ClassAttributeProto.prototype.getInstanceFieldStringsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<string>} value */
proto.proto.ClassAttributeProto.prototype.setInstanceFieldStringsList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.ClassAttributeProto.prototype.addInstanceFieldStrings = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.proto.ClassAttributeProto.prototype.clearInstanceFieldStringsList = function() {
  this.setInstanceFieldStringsList([]);
};


/**
 * repeated string permission_strings = 8;
 * @return {!Array<string>}
 */
proto.proto.ClassAttributeProto.prototype.getPermissionStringsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array<string>} value */
proto.proto.ClassAttributeProto.prototype.setPermissionStringsList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.ClassAttributeProto.prototype.addPermissionStrings = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.proto.ClassAttributeProto.prototype.clearPermissionStringsList = function() {
  this.setPermissionStringsList([]);
};


/**
 * repeated MethodAttributeProto methods = 9;
 * @return {!Array<!proto.proto.MethodAttributeProto>}
 */
proto.proto.ClassAttributeProto.prototype.getMethodsList = function() {
  return /** @type{!Array<!proto.proto.MethodAttributeProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.MethodAttributeProto, 9));
};


/** @param {!Array<!proto.proto.MethodAttributeProto>} value */
proto.proto.ClassAttributeProto.prototype.setMethodsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.proto.MethodAttributeProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.MethodAttributeProto}
 */
proto.proto.ClassAttributeProto.prototype.addMethods = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.proto.MethodAttributeProto, opt_index);
};


proto.proto.ClassAttributeProto.prototype.clearMethodsList = function() {
  this.setMethodsList([]);
};


/**
 * optional string outer_class_name = 10;
 * @return {string}
 */
proto.proto.ClassAttributeProto.prototype.getOuterClassName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.proto.ClassAttributeProto.prototype.setOuterClassName = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string modifiers = 11;
 * @return {string}
 */
proto.proto.ClassAttributeProto.prototype.getModifiers = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.proto.ClassAttributeProto.prototype.setModifiers = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ClassRelationProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ClassRelationProto.repeatedFields_, null);
};
goog.inherits(proto.proto.ClassRelationProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ClassRelationProto.displayName = 'proto.proto.ClassRelationProto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ClassRelationProto.repeatedFields_ = [3,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ClassRelationProto.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ClassRelationProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ClassRelationProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ClassRelationProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    classname1: jspb.Message.getFieldWithDefault(msg, 1, ""),
    classname2: jspb.Message.getFieldWithDefault(msg, 2, ""),
    relationCountersList: jspb.Message.toObjectList(msg.getRelationCountersList(),
    proto.proto.ClassRelationProto.RelationCounter.toObject, includeInstance),
    classname2IsApplicationClass: jspb.Message.getFieldWithDefault(msg, 4, false),
    classname2PermissionsList: jspb.Message.getRepeatedField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ClassRelationProto}
 */
proto.proto.ClassRelationProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ClassRelationProto;
  return proto.proto.ClassRelationProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ClassRelationProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ClassRelationProto}
 */
proto.proto.ClassRelationProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassname1(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassname2(value);
      break;
    case 3:
      var value = new proto.proto.ClassRelationProto.RelationCounter;
      reader.readMessage(value,proto.proto.ClassRelationProto.RelationCounter.deserializeBinaryFromReader);
      msg.addRelationCounters(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClassname2IsApplicationClass(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addClassname2Permissions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ClassRelationProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ClassRelationProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ClassRelationProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ClassRelationProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassname1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClassname2();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRelationCountersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.proto.ClassRelationProto.RelationCounter.serializeBinaryToWriter
    );
  }
  f = message.getClassname2IsApplicationClass();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getClassname2PermissionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.ClassRelationProto.RelationType = {
  INHERITANCE: 0,
  STATIC_ARRAY_FIELD: 1,
  STATIC__FIELD: 2,
  INSTANCE_ARRAY_FIELD: 3,
  INSTANCE_FIELD: 4,
  METHOD_ARRAY_PARAMERTER: 5,
  METHOD_PARAMETER: 6,
  METHOD_ARRAY_RETURN: 7,
  METHOD_RETURN: 8,
  METHOD_ARRAY_LOCAL: 9,
  METHOD_LOCAL: 10,
  STMT_ARRAY_REF: 11,
  STMT_INSTANCE_FIELD_REF: 12,
  STMT_STATIC_FIELD_REF: 13,
  STMT_LOCAL_REF: 14,
  CAST_EXPR: 15,
  INSTANCE_OF_EXPR: 16,
  NEW_EXPR: 17,
  NEW_ARRAY_EXPR: 18,
  NEW_MULTI_ARRAY_EXPR: 19,
  INVOKE_EXPR: 20,
  ICC: 21,
  IMPL: 22,
  OUTER_CLASS: 23,
  CLASSRELATIONNONE: 24
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ClassRelationProto.RelationCounter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ClassRelationProto.RelationCounter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ClassRelationProto.RelationCounter.displayName = 'proto.proto.ClassRelationProto.RelationCounter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ClassRelationProto.RelationCounter.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ClassRelationProto.RelationCounter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ClassRelationProto.RelationCounter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ClassRelationProto.RelationCounter.toObject = function(includeInstance, msg) {
  var f, obj = {
    relationType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    relationCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ClassRelationProto.RelationCounter}
 */
proto.proto.ClassRelationProto.RelationCounter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ClassRelationProto.RelationCounter;
  return proto.proto.ClassRelationProto.RelationCounter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ClassRelationProto.RelationCounter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ClassRelationProto.RelationCounter}
 */
proto.proto.ClassRelationProto.RelationCounter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.ClassRelationProto.RelationType} */ (reader.readEnum());
      msg.setRelationType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRelationCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ClassRelationProto.RelationCounter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ClassRelationProto.RelationCounter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ClassRelationProto.RelationCounter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ClassRelationProto.RelationCounter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRelationType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRelationCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional RelationType relation_type = 1;
 * @return {!proto.proto.ClassRelationProto.RelationType}
 */
proto.proto.ClassRelationProto.RelationCounter.prototype.getRelationType = function() {
  return /** @type {!proto.proto.ClassRelationProto.RelationType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.proto.ClassRelationProto.RelationType} value */
proto.proto.ClassRelationProto.RelationCounter.prototype.setRelationType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 relation_count = 2;
 * @return {number}
 */
proto.proto.ClassRelationProto.RelationCounter.prototype.getRelationCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.ClassRelationProto.RelationCounter.prototype.setRelationCount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string classname1 = 1;
 * @return {string}
 */
proto.proto.ClassRelationProto.prototype.getClassname1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.ClassRelationProto.prototype.setClassname1 = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string classname2 = 2;
 * @return {string}
 */
proto.proto.ClassRelationProto.prototype.getClassname2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.ClassRelationProto.prototype.setClassname2 = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated RelationCounter relation_counters = 3;
 * @return {!Array<!proto.proto.ClassRelationProto.RelationCounter>}
 */
proto.proto.ClassRelationProto.prototype.getRelationCountersList = function() {
  return /** @type{!Array<!proto.proto.ClassRelationProto.RelationCounter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ClassRelationProto.RelationCounter, 3));
};


/** @param {!Array<!proto.proto.ClassRelationProto.RelationCounter>} value */
proto.proto.ClassRelationProto.prototype.setRelationCountersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.proto.ClassRelationProto.RelationCounter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ClassRelationProto.RelationCounter}
 */
proto.proto.ClassRelationProto.prototype.addRelationCounters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.proto.ClassRelationProto.RelationCounter, opt_index);
};


proto.proto.ClassRelationProto.prototype.clearRelationCountersList = function() {
  this.setRelationCountersList([]);
};


/**
 * optional bool classname2_is_application_class = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.ClassRelationProto.prototype.getClassname2IsApplicationClass = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.proto.ClassRelationProto.prototype.setClassname2IsApplicationClass = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * repeated string classname2_permissions = 5;
 * @return {!Array<string>}
 */
proto.proto.ClassRelationProto.prototype.getClassname2PermissionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.proto.ClassRelationProto.prototype.setClassname2PermissionsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.ClassRelationProto.prototype.addClassname2Permissions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.proto.ClassRelationProto.prototype.clearClassname2PermissionsList = function() {
  this.setClassname2PermissionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.MethodRelationProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.MethodRelationProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.MethodRelationProto.displayName = 'proto.proto.MethodRelationProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.MethodRelationProto.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.MethodRelationProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.MethodRelationProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.MethodRelationProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    methodname1: jspb.Message.getFieldWithDefault(msg, 1, ""),
    methodname2: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.MethodRelationProto}
 */
proto.proto.MethodRelationProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.MethodRelationProto;
  return proto.proto.MethodRelationProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.MethodRelationProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.MethodRelationProto}
 */
proto.proto.MethodRelationProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodname1(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodname2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.MethodRelationProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.MethodRelationProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.MethodRelationProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.MethodRelationProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethodname1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMethodname2();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string methodname1 = 1;
 * @return {string}
 */
proto.proto.MethodRelationProto.prototype.getMethodname1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.MethodRelationProto.prototype.setMethodname1 = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string methodname2 = 2;
 * @return {string}
 */
proto.proto.MethodRelationProto.prototype.getMethodname2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.MethodRelationProto.prototype.setMethodname2 = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ClassMethodRelationProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ClassMethodRelationProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ClassMethodRelationProto.displayName = 'proto.proto.ClassMethodRelationProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ClassMethodRelationProto.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ClassMethodRelationProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ClassMethodRelationProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ClassMethodRelationProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    classname1: jspb.Message.getFieldWithDefault(msg, 1, ""),
    methodname2: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ClassMethodRelationProto}
 */
proto.proto.ClassMethodRelationProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ClassMethodRelationProto;
  return proto.proto.ClassMethodRelationProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ClassMethodRelationProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ClassMethodRelationProto}
 */
proto.proto.ClassMethodRelationProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassname1(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodname2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ClassMethodRelationProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ClassMethodRelationProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ClassMethodRelationProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ClassMethodRelationProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassname1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMethodname2();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string classname1 = 1;
 * @return {string}
 */
proto.proto.ClassMethodRelationProto.prototype.getClassname1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.ClassMethodRelationProto.prototype.setClassname1 = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string methodname2 = 2;
 * @return {string}
 */
proto.proto.ClassMethodRelationProto.prototype.getMethodname2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.ClassMethodRelationProto.prototype.setMethodname2 = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.MethodClassRelationProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.MethodClassRelationProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.MethodClassRelationProto.displayName = 'proto.proto.MethodClassRelationProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.MethodClassRelationProto.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.MethodClassRelationProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.MethodClassRelationProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.MethodClassRelationProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    methodname1: jspb.Message.getFieldWithDefault(msg, 1, ""),
    classname2: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.MethodClassRelationProto}
 */
proto.proto.MethodClassRelationProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.MethodClassRelationProto;
  return proto.proto.MethodClassRelationProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.MethodClassRelationProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.MethodClassRelationProto}
 */
proto.proto.MethodClassRelationProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodname1(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassname2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.MethodClassRelationProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.MethodClassRelationProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.MethodClassRelationProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.MethodClassRelationProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethodname1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClassname2();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string methodname1 = 1;
 * @return {string}
 */
proto.proto.MethodClassRelationProto.prototype.getMethodname1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.MethodClassRelationProto.prototype.setMethodname1 = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string classname2 = 2;
 * @return {string}
 */
proto.proto.MethodClassRelationProto.prototype.getClassname2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.MethodClassRelationProto.prototype.setClassname2 = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PkgClassMethodResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.PkgClassMethodResult.repeatedFields_, null);
};
goog.inherits(proto.proto.PkgClassMethodResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.PkgClassMethodResult.displayName = 'proto.proto.PkgClassMethodResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.PkgClassMethodResult.repeatedFields_ = [5,6,7,8,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PkgClassMethodResult.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PkgClassMethodResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PkgClassMethodResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PkgClassMethodResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkgName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pkgVersion: jspb.Message.getFieldWithDefault(msg, 2, ""),
    language: jspb.Message.getFieldWithDefault(msg, 3, 0),
    inputPath: jspb.Message.getFieldWithDefault(msg, 4, ""),
    classesList: jspb.Message.toObjectList(msg.getClassesList(),
    proto.proto.ClassAttributeProto.toObject, includeInstance),
    methodsList: jspb.Message.toObjectList(msg.getMethodsList(),
    proto.proto.MethodAttributeProto.toObject, includeInstance),
    classPairsList: jspb.Message.toObjectList(msg.getClassPairsList(),
    proto.proto.ClassRelationProto.toObject, includeInstance),
    methodPairsList: jspb.Message.toObjectList(msg.getMethodPairsList(),
    proto.proto.MethodRelationProto.toObject, includeInstance),
    classMethodPairsList: jspb.Message.toObjectList(msg.getClassMethodPairsList(),
    proto.proto.ClassMethodRelationProto.toObject, includeInstance),
    methodClassPairsList: jspb.Message.toObjectList(msg.getMethodClassPairsList(),
    proto.proto.MethodClassRelationProto.toObject, includeInstance),
    timestamp: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PkgClassMethodResult}
 */
proto.proto.PkgClassMethodResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PkgClassMethodResult;
  return proto.proto.PkgClassMethodResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PkgClassMethodResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PkgClassMethodResult}
 */
proto.proto.PkgClassMethodResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPkgName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPkgVersion(value);
      break;
    case 3:
      var value = /** @type {!proto.proto.Language} */ (reader.readEnum());
      msg.setLanguage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputPath(value);
      break;
    case 5:
      var value = new proto.proto.ClassAttributeProto;
      reader.readMessage(value,proto.proto.ClassAttributeProto.deserializeBinaryFromReader);
      msg.addClasses(value);
      break;
    case 6:
      var value = new proto.proto.MethodAttributeProto;
      reader.readMessage(value,proto.proto.MethodAttributeProto.deserializeBinaryFromReader);
      msg.addMethods(value);
      break;
    case 7:
      var value = new proto.proto.ClassRelationProto;
      reader.readMessage(value,proto.proto.ClassRelationProto.deserializeBinaryFromReader);
      msg.addClassPairs(value);
      break;
    case 8:
      var value = new proto.proto.MethodRelationProto;
      reader.readMessage(value,proto.proto.MethodRelationProto.deserializeBinaryFromReader);
      msg.addMethodPairs(value);
      break;
    case 9:
      var value = new proto.proto.ClassMethodRelationProto;
      reader.readMessage(value,proto.proto.ClassMethodRelationProto.deserializeBinaryFromReader);
      msg.addClassMethodPairs(value);
      break;
    case 10:
      var value = new proto.proto.MethodClassRelationProto;
      reader.readMessage(value,proto.proto.MethodClassRelationProto.deserializeBinaryFromReader);
      msg.addMethodClassPairs(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PkgClassMethodResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PkgClassMethodResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PkgClassMethodResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PkgClassMethodResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkgName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPkgVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLanguage();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getInputPath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getClassesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.proto.ClassAttributeProto.serializeBinaryToWriter
    );
  }
  f = message.getMethodsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.proto.MethodAttributeProto.serializeBinaryToWriter
    );
  }
  f = message.getClassPairsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.proto.ClassRelationProto.serializeBinaryToWriter
    );
  }
  f = message.getMethodPairsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.proto.MethodRelationProto.serializeBinaryToWriter
    );
  }
  f = message.getClassMethodPairsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.proto.ClassMethodRelationProto.serializeBinaryToWriter
    );
  }
  f = message.getMethodClassPairsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.proto.MethodClassRelationProto.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
};


/**
 * optional string pkg_name = 1;
 * @return {string}
 */
proto.proto.PkgClassMethodResult.prototype.getPkgName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.PkgClassMethodResult.prototype.setPkgName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string pkg_version = 2;
 * @return {string}
 */
proto.proto.PkgClassMethodResult.prototype.getPkgVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.PkgClassMethodResult.prototype.setPkgVersion = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Language language = 3;
 * @return {!proto.proto.Language}
 */
proto.proto.PkgClassMethodResult.prototype.getLanguage = function() {
  return /** @type {!proto.proto.Language} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.proto.Language} value */
proto.proto.PkgClassMethodResult.prototype.setLanguage = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string input_path = 4;
 * @return {string}
 */
proto.proto.PkgClassMethodResult.prototype.getInputPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.PkgClassMethodResult.prototype.setInputPath = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated ClassAttributeProto classes = 5;
 * @return {!Array<!proto.proto.ClassAttributeProto>}
 */
proto.proto.PkgClassMethodResult.prototype.getClassesList = function() {
  return /** @type{!Array<!proto.proto.ClassAttributeProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ClassAttributeProto, 5));
};


/** @param {!Array<!proto.proto.ClassAttributeProto>} value */
proto.proto.PkgClassMethodResult.prototype.setClassesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.proto.ClassAttributeProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ClassAttributeProto}
 */
proto.proto.PkgClassMethodResult.prototype.addClasses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.proto.ClassAttributeProto, opt_index);
};


proto.proto.PkgClassMethodResult.prototype.clearClassesList = function() {
  this.setClassesList([]);
};


/**
 * repeated MethodAttributeProto methods = 6;
 * @return {!Array<!proto.proto.MethodAttributeProto>}
 */
proto.proto.PkgClassMethodResult.prototype.getMethodsList = function() {
  return /** @type{!Array<!proto.proto.MethodAttributeProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.MethodAttributeProto, 6));
};


/** @param {!Array<!proto.proto.MethodAttributeProto>} value */
proto.proto.PkgClassMethodResult.prototype.setMethodsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.proto.MethodAttributeProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.MethodAttributeProto}
 */
proto.proto.PkgClassMethodResult.prototype.addMethods = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.proto.MethodAttributeProto, opt_index);
};


proto.proto.PkgClassMethodResult.prototype.clearMethodsList = function() {
  this.setMethodsList([]);
};


/**
 * repeated ClassRelationProto class_pairs = 7;
 * @return {!Array<!proto.proto.ClassRelationProto>}
 */
proto.proto.PkgClassMethodResult.prototype.getClassPairsList = function() {
  return /** @type{!Array<!proto.proto.ClassRelationProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ClassRelationProto, 7));
};


/** @param {!Array<!proto.proto.ClassRelationProto>} value */
proto.proto.PkgClassMethodResult.prototype.setClassPairsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.proto.ClassRelationProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ClassRelationProto}
 */
proto.proto.PkgClassMethodResult.prototype.addClassPairs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.proto.ClassRelationProto, opt_index);
};


proto.proto.PkgClassMethodResult.prototype.clearClassPairsList = function() {
  this.setClassPairsList([]);
};


/**
 * repeated MethodRelationProto method_pairs = 8;
 * @return {!Array<!proto.proto.MethodRelationProto>}
 */
proto.proto.PkgClassMethodResult.prototype.getMethodPairsList = function() {
  return /** @type{!Array<!proto.proto.MethodRelationProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.MethodRelationProto, 8));
};


/** @param {!Array<!proto.proto.MethodRelationProto>} value */
proto.proto.PkgClassMethodResult.prototype.setMethodPairsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.proto.MethodRelationProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.MethodRelationProto}
 */
proto.proto.PkgClassMethodResult.prototype.addMethodPairs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.proto.MethodRelationProto, opt_index);
};


proto.proto.PkgClassMethodResult.prototype.clearMethodPairsList = function() {
  this.setMethodPairsList([]);
};


/**
 * repeated ClassMethodRelationProto class_method_pairs = 9;
 * @return {!Array<!proto.proto.ClassMethodRelationProto>}
 */
proto.proto.PkgClassMethodResult.prototype.getClassMethodPairsList = function() {
  return /** @type{!Array<!proto.proto.ClassMethodRelationProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ClassMethodRelationProto, 9));
};


/** @param {!Array<!proto.proto.ClassMethodRelationProto>} value */
proto.proto.PkgClassMethodResult.prototype.setClassMethodPairsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.proto.ClassMethodRelationProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ClassMethodRelationProto}
 */
proto.proto.PkgClassMethodResult.prototype.addClassMethodPairs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.proto.ClassMethodRelationProto, opt_index);
};


proto.proto.PkgClassMethodResult.prototype.clearClassMethodPairsList = function() {
  this.setClassMethodPairsList([]);
};


/**
 * repeated MethodClassRelationProto method_class_pairs = 10;
 * @return {!Array<!proto.proto.MethodClassRelationProto>}
 */
proto.proto.PkgClassMethodResult.prototype.getMethodClassPairsList = function() {
  return /** @type{!Array<!proto.proto.MethodClassRelationProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.MethodClassRelationProto, 10));
};


/** @param {!Array<!proto.proto.MethodClassRelationProto>} value */
proto.proto.PkgClassMethodResult.prototype.setMethodClassPairsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.proto.MethodClassRelationProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.MethodClassRelationProto}
 */
proto.proto.PkgClassMethodResult.prototype.addMethodClassPairs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.proto.MethodClassRelationProto, opt_index);
};


proto.proto.PkgClassMethodResult.prototype.clearMethodClassPairsList = function() {
  this.setMethodClassPairsList([]);
};


/**
 * optional uint64 timestamp = 11;
 * @return {number}
 */
proto.proto.PkgClassMethodResult.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.proto.PkgClassMethodResult.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PkgClassMethodResults = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.PkgClassMethodResults.repeatedFields_, null);
};
goog.inherits(proto.proto.PkgClassMethodResults, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.PkgClassMethodResults.displayName = 'proto.proto.PkgClassMethodResults';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.PkgClassMethodResults.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PkgClassMethodResults.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PkgClassMethodResults.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PkgClassMethodResults} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PkgClassMethodResults.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkgsList: jspb.Message.toObjectList(msg.getPkgsList(),
    proto.proto.PkgClassMethodResult.toObject, includeInstance),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PkgClassMethodResults}
 */
proto.proto.PkgClassMethodResults.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PkgClassMethodResults;
  return proto.proto.PkgClassMethodResults.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PkgClassMethodResults} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PkgClassMethodResults}
 */
proto.proto.PkgClassMethodResults.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.PkgClassMethodResult;
      reader.readMessage(value,proto.proto.PkgClassMethodResult.deserializeBinaryFromReader);
      msg.addPkgs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PkgClassMethodResults.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PkgClassMethodResults.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PkgClassMethodResults} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PkgClassMethodResults.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.PkgClassMethodResult.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * repeated PkgClassMethodResult pkgs = 1;
 * @return {!Array<!proto.proto.PkgClassMethodResult>}
 */
proto.proto.PkgClassMethodResults.prototype.getPkgsList = function() {
  return /** @type{!Array<!proto.proto.PkgClassMethodResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.PkgClassMethodResult, 1));
};


/** @param {!Array<!proto.proto.PkgClassMethodResult>} value */
proto.proto.PkgClassMethodResults.prototype.setPkgsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.PkgClassMethodResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.PkgClassMethodResult}
 */
proto.proto.PkgClassMethodResults.prototype.addPkgs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.PkgClassMethodResult, opt_index);
};


proto.proto.PkgClassMethodResults.prototype.clearPkgsList = function() {
  this.setPkgsList([]);
};


/**
 * optional uint64 timestamp = 2;
 * @return {number}
 */
proto.proto.PkgClassMethodResults.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.PkgClassMethodResults.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.proto);
