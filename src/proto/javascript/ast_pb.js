/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.proto.AstLookupConfig', null, global);
goog.exportSymbol('proto.proto.AstNode', null, global);
goog.exportSymbol('proto.proto.AstNode.NodeType', null, global);
goog.exportSymbol('proto.proto.DangerType', null, global);
goog.exportSymbol('proto.proto.FileInfo', null, global);
goog.exportSymbol('proto.proto.Functionality', null, global);
goog.exportSymbol('proto.proto.Language', null, global);
goog.exportSymbol('proto.proto.PkgAstResult', null, global);
goog.exportSymbol('proto.proto.PkgAstResults', null, global);
goog.exportSymbol('proto.proto.PropagateType', null, global);
goog.exportSymbol('proto.proto.SinkType', null, global);
goog.exportSymbol('proto.proto.SourceLocation', null, global);
goog.exportSymbol('proto.proto.SourceRange', null, global);
goog.exportSymbol('proto.proto.SourceType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FileInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FileInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.FileInfo.displayName = 'proto.proto.FileInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FileInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FileInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FileInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FileInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    filename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    relpath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    file: jspb.Message.getFieldWithDefault(msg, 3, ""),
    directory: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FileInfo}
 */
proto.proto.FileInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FileInfo;
  return proto.proto.FileInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FileInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FileInfo}
 */
proto.proto.FileInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelpath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFile(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirectory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FileInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FileInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FileInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FileInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRelpath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFile();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDirectory();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string filename = 1;
 * @return {string}
 */
proto.proto.FileInfo.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.FileInfo.prototype.setFilename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string relpath = 2;
 * @return {string}
 */
proto.proto.FileInfo.prototype.getRelpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.FileInfo.prototype.setRelpath = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string file = 3;
 * @return {string}
 */
proto.proto.FileInfo.prototype.getFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.FileInfo.prototype.setFile = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string directory = 4;
 * @return {string}
 */
proto.proto.FileInfo.prototype.getDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.FileInfo.prototype.setDirectory = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SourceLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SourceLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.SourceLocation.displayName = 'proto.proto.SourceLocation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SourceLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SourceLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SourceLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SourceLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    row: jspb.Message.getFieldWithDefault(msg, 1, 0),
    column: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fileInfo: (f = msg.getFileInfo()) && proto.proto.FileInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SourceLocation}
 */
proto.proto.SourceLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SourceLocation;
  return proto.proto.SourceLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SourceLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SourceLocation}
 */
proto.proto.SourceLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRow(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setColumn(value);
      break;
    case 3:
      var value = new proto.proto.FileInfo;
      reader.readMessage(value,proto.proto.FileInfo.deserializeBinaryFromReader);
      msg.setFileInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SourceLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SourceLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SourceLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SourceLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRow();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getColumn();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFileInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.FileInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 row = 1;
 * @return {number}
 */
proto.proto.SourceLocation.prototype.getRow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.SourceLocation.prototype.setRow = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 column = 2;
 * @return {number}
 */
proto.proto.SourceLocation.prototype.getColumn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.SourceLocation.prototype.setColumn = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional FileInfo file_info = 3;
 * @return {?proto.proto.FileInfo}
 */
proto.proto.SourceLocation.prototype.getFileInfo = function() {
  return /** @type{?proto.proto.FileInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.FileInfo, 3));
};


/** @param {?proto.proto.FileInfo|undefined} value */
proto.proto.SourceLocation.prototype.setFileInfo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.proto.SourceLocation.prototype.clearFileInfo = function() {
  this.setFileInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.SourceLocation.prototype.hasFileInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SourceRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SourceRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.SourceRange.displayName = 'proto.proto.SourceRange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SourceRange.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SourceRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SourceRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SourceRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: (f = msg.getStart()) && proto.proto.SourceLocation.toObject(includeInstance, f),
    end: (f = msg.getEnd()) && proto.proto.SourceLocation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SourceRange}
 */
proto.proto.SourceRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SourceRange;
  return proto.proto.SourceRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SourceRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SourceRange}
 */
proto.proto.SourceRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.SourceLocation;
      reader.readMessage(value,proto.proto.SourceLocation.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 2:
      var value = new proto.proto.SourceLocation;
      reader.readMessage(value,proto.proto.SourceLocation.deserializeBinaryFromReader);
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SourceRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SourceRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SourceRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SourceRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.SourceLocation.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.SourceLocation.serializeBinaryToWriter
    );
  }
};


/**
 * optional SourceLocation start = 1;
 * @return {?proto.proto.SourceLocation}
 */
proto.proto.SourceRange.prototype.getStart = function() {
  return /** @type{?proto.proto.SourceLocation} */ (
    jspb.Message.getWrapperField(this, proto.proto.SourceLocation, 1));
};


/** @param {?proto.proto.SourceLocation|undefined} value */
proto.proto.SourceRange.prototype.setStart = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.SourceRange.prototype.clearStart = function() {
  this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.SourceRange.prototype.hasStart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SourceLocation end = 2;
 * @return {?proto.proto.SourceLocation}
 */
proto.proto.SourceRange.prototype.getEnd = function() {
  return /** @type{?proto.proto.SourceLocation} */ (
    jspb.Message.getWrapperField(this, proto.proto.SourceLocation, 2));
};


/** @param {?proto.proto.SourceLocation|undefined} value */
proto.proto.SourceRange.prototype.setEnd = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.SourceRange.prototype.clearEnd = function() {
  this.setEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.SourceRange.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.AstNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.AstNode.repeatedFields_, proto.proto.AstNode.oneofGroups_);
};
goog.inherits(proto.proto.AstNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.AstNode.displayName = 'proto.proto.AstNode';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.AstNode.repeatedFields_ = [8,9,18];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.AstNode.oneofGroups_ = [[14,15,16,17]];

/**
 * @enum {number}
 */
proto.proto.AstNode.AccurateFunctionalityCase = {
  ACCURATE_FUNCTIONALITY_NOT_SET: 0,
  SOURCE_TYPE: 14,
  SINK_TYPE: 15,
  DANGER_TYPE: 16,
  PROPAGATE_TYPE: 17
};

/**
 * @return {proto.proto.AstNode.AccurateFunctionalityCase}
 */
proto.proto.AstNode.prototype.getAccurateFunctionalityCase = function() {
  return /** @type {proto.proto.AstNode.AccurateFunctionalityCase} */(jspb.Message.computeOneofCase(this, proto.proto.AstNode.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.AstNode.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.AstNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.AstNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AstNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fullName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    baseType: jspb.Message.getFieldWithDefault(msg, 4, ""),
    module: jspb.Message.getFieldWithDefault(msg, 5, ""),
    value: jspb.Message.getFieldWithDefault(msg, 6, ""),
    definition: jspb.Message.getFieldWithDefault(msg, 7, ""),
    argNodesList: jspb.Message.toObjectList(msg.getArgNodesList(),
    proto.proto.AstNode.toObject, includeInstance),
    argumentsList: jspb.Message.getRepeatedField(msg, 9),
    source: jspb.Message.getFieldWithDefault(msg, 10, ""),
    range: (f = msg.getRange()) && proto.proto.SourceRange.toObject(includeInstance, f),
    id: jspb.Message.getFieldWithDefault(msg, 12, 0),
    functionality: jspb.Message.getFieldWithDefault(msg, 13, 0),
    sourceType: jspb.Message.getFieldWithDefault(msg, 14, 0),
    sinkType: jspb.Message.getFieldWithDefault(msg, 15, 0),
    dangerType: jspb.Message.getFieldWithDefault(msg, 16, 0),
    propagateType: jspb.Message.getFieldWithDefault(msg, 17, 0),
    childNodesList: jspb.Message.toObjectList(msg.getChildNodesList(),
    proto.proto.AstNode.toObject, includeInstance),
    instantiatable: jspb.Message.getFieldWithDefault(msg, 19, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.AstNode}
 */
proto.proto.AstNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.AstNode;
  return proto.proto.AstNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.AstNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.AstNode}
 */
proto.proto.AstNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.AstNode.NodeType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setModule(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefinition(value);
      break;
    case 8:
      var value = new proto.proto.AstNode;
      reader.readMessage(value,proto.proto.AstNode.deserializeBinaryFromReader);
      msg.addArgNodes(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addArguments(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 11:
      var value = new proto.proto.SourceRange;
      reader.readMessage(value,proto.proto.SourceRange.deserializeBinaryFromReader);
      msg.setRange(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 13:
      var value = /** @type {!proto.proto.Functionality} */ (reader.readEnum());
      msg.setFunctionality(value);
      break;
    case 14:
      var value = /** @type {!proto.proto.SourceType} */ (reader.readEnum());
      msg.setSourceType(value);
      break;
    case 15:
      var value = /** @type {!proto.proto.SinkType} */ (reader.readEnum());
      msg.setSinkType(value);
      break;
    case 16:
      var value = /** @type {!proto.proto.DangerType} */ (reader.readEnum());
      msg.setDangerType(value);
      break;
    case 17:
      var value = /** @type {!proto.proto.PropagateType} */ (reader.readEnum());
      msg.setPropagateType(value);
      break;
    case 18:
      var value = new proto.proto.AstNode;
      reader.readMessage(value,proto.proto.AstNode.deserializeBinaryFromReader);
      msg.addChildNodes(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInstantiatable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.AstNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.AstNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.AstNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AstNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFullName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBaseType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getModule();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDefinition();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getArgNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.proto.AstNode.serializeBinaryToWriter
    );
  }
  f = message.getArgumentsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getRange();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.proto.SourceRange.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getFunctionality();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = /** @type {!proto.proto.SourceType} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeEnum(
      14,
      f
    );
  }
  f = /** @type {!proto.proto.SinkType} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeEnum(
      15,
      f
    );
  }
  f = /** @type {!proto.proto.DangerType} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeEnum(
      16,
      f
    );
  }
  f = /** @type {!proto.proto.PropagateType} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeEnum(
      17,
      f
    );
  }
  f = message.getChildNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      proto.proto.AstNode.serializeBinaryToWriter
    );
  }
  f = message.getInstantiatable();
  if (f) {
    writer.writeBool(
      19,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.AstNode.NodeType = {
  UNKNOWN: 0,
  FUNCTION_DECL: 1,
  VARIABLE_DECL: 2,
  CLASS_DECL: 3,
  FUNCTION_DECL_REF_EXPR: 11,
  VARIABLE_DECL_REF_EXPR: 12,
  CLASS_DECL_REF_EXPR: 13,
  PY_FUNCTION_DEF: 101,
  JS_ASSIGNMENT_EXPRESSION: 201,
  RB_REGULAR_NODE: 301,
  RB_VARIABLE_NODE: 302,
  JAVA_IDENTITY_STMT: 401,
  PHP_EXPR_VARIABLE: 501
};

/**
 * optional NodeType type = 1;
 * @return {!proto.proto.AstNode.NodeType}
 */
proto.proto.AstNode.prototype.getType = function() {
  return /** @type {!proto.proto.AstNode.NodeType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.proto.AstNode.NodeType} value */
proto.proto.AstNode.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.proto.AstNode.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.AstNode.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string full_name = 3;
 * @return {string}
 */
proto.proto.AstNode.prototype.getFullName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.AstNode.prototype.setFullName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string base_type = 4;
 * @return {string}
 */
proto.proto.AstNode.prototype.getBaseType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.AstNode.prototype.setBaseType = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string module = 5;
 * @return {string}
 */
proto.proto.AstNode.prototype.getModule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.proto.AstNode.prototype.setModule = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string value = 6;
 * @return {string}
 */
proto.proto.AstNode.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.proto.AstNode.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string definition = 7;
 * @return {string}
 */
proto.proto.AstNode.prototype.getDefinition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.proto.AstNode.prototype.setDefinition = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated AstNode arg_nodes = 8;
 * @return {!Array<!proto.proto.AstNode>}
 */
proto.proto.AstNode.prototype.getArgNodesList = function() {
  return /** @type{!Array<!proto.proto.AstNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.AstNode, 8));
};


/** @param {!Array<!proto.proto.AstNode>} value */
proto.proto.AstNode.prototype.setArgNodesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.proto.AstNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.AstNode}
 */
proto.proto.AstNode.prototype.addArgNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.proto.AstNode, opt_index);
};


proto.proto.AstNode.prototype.clearArgNodesList = function() {
  this.setArgNodesList([]);
};


/**
 * repeated string arguments = 9;
 * @return {!Array<string>}
 */
proto.proto.AstNode.prototype.getArgumentsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/** @param {!Array<string>} value */
proto.proto.AstNode.prototype.setArgumentsList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.AstNode.prototype.addArguments = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.proto.AstNode.prototype.clearArgumentsList = function() {
  this.setArgumentsList([]);
};


/**
 * optional string source = 10;
 * @return {string}
 */
proto.proto.AstNode.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.proto.AstNode.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional SourceRange range = 11;
 * @return {?proto.proto.SourceRange}
 */
proto.proto.AstNode.prototype.getRange = function() {
  return /** @type{?proto.proto.SourceRange} */ (
    jspb.Message.getWrapperField(this, proto.proto.SourceRange, 11));
};


/** @param {?proto.proto.SourceRange|undefined} value */
proto.proto.AstNode.prototype.setRange = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.proto.AstNode.prototype.clearRange = function() {
  this.setRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.AstNode.prototype.hasRange = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int32 id = 12;
 * @return {number}
 */
proto.proto.AstNode.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.proto.AstNode.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional Functionality functionality = 13;
 * @return {!proto.proto.Functionality}
 */
proto.proto.AstNode.prototype.getFunctionality = function() {
  return /** @type {!proto.proto.Functionality} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {!proto.proto.Functionality} value */
proto.proto.AstNode.prototype.setFunctionality = function(value) {
  jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional SourceType source_type = 14;
 * @return {!proto.proto.SourceType}
 */
proto.proto.AstNode.prototype.getSourceType = function() {
  return /** @type {!proto.proto.SourceType} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {!proto.proto.SourceType} value */
proto.proto.AstNode.prototype.setSourceType = function(value) {
  jspb.Message.setOneofField(this, 14, proto.proto.AstNode.oneofGroups_[0], value);
};


proto.proto.AstNode.prototype.clearSourceType = function() {
  jspb.Message.setOneofField(this, 14, proto.proto.AstNode.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.AstNode.prototype.hasSourceType = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional SinkType sink_type = 15;
 * @return {!proto.proto.SinkType}
 */
proto.proto.AstNode.prototype.getSinkType = function() {
  return /** @type {!proto.proto.SinkType} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {!proto.proto.SinkType} value */
proto.proto.AstNode.prototype.setSinkType = function(value) {
  jspb.Message.setOneofField(this, 15, proto.proto.AstNode.oneofGroups_[0], value);
};


proto.proto.AstNode.prototype.clearSinkType = function() {
  jspb.Message.setOneofField(this, 15, proto.proto.AstNode.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.AstNode.prototype.hasSinkType = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional DangerType danger_type = 16;
 * @return {!proto.proto.DangerType}
 */
proto.proto.AstNode.prototype.getDangerType = function() {
  return /** @type {!proto.proto.DangerType} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {!proto.proto.DangerType} value */
proto.proto.AstNode.prototype.setDangerType = function(value) {
  jspb.Message.setOneofField(this, 16, proto.proto.AstNode.oneofGroups_[0], value);
};


proto.proto.AstNode.prototype.clearDangerType = function() {
  jspb.Message.setOneofField(this, 16, proto.proto.AstNode.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.AstNode.prototype.hasDangerType = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional PropagateType propagate_type = 17;
 * @return {!proto.proto.PropagateType}
 */
proto.proto.AstNode.prototype.getPropagateType = function() {
  return /** @type {!proto.proto.PropagateType} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {!proto.proto.PropagateType} value */
proto.proto.AstNode.prototype.setPropagateType = function(value) {
  jspb.Message.setOneofField(this, 17, proto.proto.AstNode.oneofGroups_[0], value);
};


proto.proto.AstNode.prototype.clearPropagateType = function() {
  jspb.Message.setOneofField(this, 17, proto.proto.AstNode.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.AstNode.prototype.hasPropagateType = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * repeated AstNode child_nodes = 18;
 * @return {!Array<!proto.proto.AstNode>}
 */
proto.proto.AstNode.prototype.getChildNodesList = function() {
  return /** @type{!Array<!proto.proto.AstNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.AstNode, 18));
};


/** @param {!Array<!proto.proto.AstNode>} value */
proto.proto.AstNode.prototype.setChildNodesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.proto.AstNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.AstNode}
 */
proto.proto.AstNode.prototype.addChildNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.proto.AstNode, opt_index);
};


proto.proto.AstNode.prototype.clearChildNodesList = function() {
  this.setChildNodesList([]);
};


/**
 * optional bool instantiatable = 19;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.AstNode.prototype.getInstantiatable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 19, false));
};


/** @param {boolean} value */
proto.proto.AstNode.prototype.setInstantiatable = function(value) {
  jspb.Message.setProto3BooleanField(this, 19, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.AstLookupConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.AstLookupConfig.repeatedFields_, null);
};
goog.inherits(proto.proto.AstLookupConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.AstLookupConfig.displayName = 'proto.proto.AstLookupConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.AstLookupConfig.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.AstLookupConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.AstLookupConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.AstLookupConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AstLookupConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    apisList: jspb.Message.toObjectList(msg.getApisList(),
    proto.proto.AstNode.toObject, includeInstance),
    saveFeature: jspb.Message.getFieldWithDefault(msg, 2, false),
    smtFormula: jspb.Message.getFieldWithDefault(msg, 3, ""),
    smtSatisfied: jspb.Message.getFieldWithDefault(msg, 4, false),
    funcOnly: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.AstLookupConfig}
 */
proto.proto.AstLookupConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.AstLookupConfig;
  return proto.proto.AstLookupConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.AstLookupConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.AstLookupConfig}
 */
proto.proto.AstLookupConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.AstNode;
      reader.readMessage(value,proto.proto.AstNode.deserializeBinaryFromReader);
      msg.addApis(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSaveFeature(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSmtFormula(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSmtSatisfied(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFuncOnly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.AstLookupConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.AstLookupConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.AstLookupConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AstLookupConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApisList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.AstNode.serializeBinaryToWriter
    );
  }
  f = message.getSaveFeature();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSmtFormula();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSmtSatisfied();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getFuncOnly();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * repeated AstNode apis = 1;
 * @return {!Array<!proto.proto.AstNode>}
 */
proto.proto.AstLookupConfig.prototype.getApisList = function() {
  return /** @type{!Array<!proto.proto.AstNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.AstNode, 1));
};


/** @param {!Array<!proto.proto.AstNode>} value */
proto.proto.AstLookupConfig.prototype.setApisList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.AstNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.AstNode}
 */
proto.proto.AstLookupConfig.prototype.addApis = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.AstNode, opt_index);
};


proto.proto.AstLookupConfig.prototype.clearApisList = function() {
  this.setApisList([]);
};


/**
 * optional bool save_feature = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.AstLookupConfig.prototype.getSaveFeature = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.proto.AstLookupConfig.prototype.setSaveFeature = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string smt_formula = 3;
 * @return {string}
 */
proto.proto.AstLookupConfig.prototype.getSmtFormula = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.AstLookupConfig.prototype.setSmtFormula = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool smt_satisfied = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.AstLookupConfig.prototype.getSmtSatisfied = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.proto.AstLookupConfig.prototype.setSmtSatisfied = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool func_only = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.AstLookupConfig.prototype.getFuncOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.proto.AstLookupConfig.prototype.setFuncOnly = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PkgAstResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.PkgAstResult.repeatedFields_, null);
};
goog.inherits(proto.proto.PkgAstResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.PkgAstResult.displayName = 'proto.proto.PkgAstResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.PkgAstResult.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PkgAstResult.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PkgAstResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PkgAstResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PkgAstResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkgName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pkgVersion: jspb.Message.getFieldWithDefault(msg, 2, ""),
    language: jspb.Message.getFieldWithDefault(msg, 3, 0),
    inputPath: jspb.Message.getFieldWithDefault(msg, 4, ""),
    config: (f = msg.getConfig()) && proto.proto.AstLookupConfig.toObject(includeInstance, f),
    apiResultsList: jspb.Message.toObjectList(msg.getApiResultsList(),
    proto.proto.AstNode.toObject, includeInstance),
    rootNodesList: jspb.Message.toObjectList(msg.getRootNodesList(),
    proto.proto.AstNode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PkgAstResult}
 */
proto.proto.PkgAstResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PkgAstResult;
  return proto.proto.PkgAstResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PkgAstResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PkgAstResult}
 */
proto.proto.PkgAstResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPkgName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPkgVersion(value);
      break;
    case 3:
      var value = /** @type {!proto.proto.Language} */ (reader.readEnum());
      msg.setLanguage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputPath(value);
      break;
    case 5:
      var value = new proto.proto.AstLookupConfig;
      reader.readMessage(value,proto.proto.AstLookupConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 6:
      var value = new proto.proto.AstNode;
      reader.readMessage(value,proto.proto.AstNode.deserializeBinaryFromReader);
      msg.addApiResults(value);
      break;
    case 7:
      var value = new proto.proto.AstNode;
      reader.readMessage(value,proto.proto.AstNode.deserializeBinaryFromReader);
      msg.addRootNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PkgAstResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PkgAstResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PkgAstResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PkgAstResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkgName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPkgVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLanguage();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getInputPath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.AstLookupConfig.serializeBinaryToWriter
    );
  }
  f = message.getApiResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.proto.AstNode.serializeBinaryToWriter
    );
  }
  f = message.getRootNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.proto.AstNode.serializeBinaryToWriter
    );
  }
};


/**
 * optional string pkg_name = 1;
 * @return {string}
 */
proto.proto.PkgAstResult.prototype.getPkgName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.PkgAstResult.prototype.setPkgName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string pkg_version = 2;
 * @return {string}
 */
proto.proto.PkgAstResult.prototype.getPkgVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.PkgAstResult.prototype.setPkgVersion = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Language language = 3;
 * @return {!proto.proto.Language}
 */
proto.proto.PkgAstResult.prototype.getLanguage = function() {
  return /** @type {!proto.proto.Language} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.proto.Language} value */
proto.proto.PkgAstResult.prototype.setLanguage = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string input_path = 4;
 * @return {string}
 */
proto.proto.PkgAstResult.prototype.getInputPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.PkgAstResult.prototype.setInputPath = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional AstLookupConfig config = 5;
 * @return {?proto.proto.AstLookupConfig}
 */
proto.proto.PkgAstResult.prototype.getConfig = function() {
  return /** @type{?proto.proto.AstLookupConfig} */ (
    jspb.Message.getWrapperField(this, proto.proto.AstLookupConfig, 5));
};


/** @param {?proto.proto.AstLookupConfig|undefined} value */
proto.proto.PkgAstResult.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.proto.PkgAstResult.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.PkgAstResult.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated AstNode api_results = 6;
 * @return {!Array<!proto.proto.AstNode>}
 */
proto.proto.PkgAstResult.prototype.getApiResultsList = function() {
  return /** @type{!Array<!proto.proto.AstNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.AstNode, 6));
};


/** @param {!Array<!proto.proto.AstNode>} value */
proto.proto.PkgAstResult.prototype.setApiResultsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.proto.AstNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.AstNode}
 */
proto.proto.PkgAstResult.prototype.addApiResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.proto.AstNode, opt_index);
};


proto.proto.PkgAstResult.prototype.clearApiResultsList = function() {
  this.setApiResultsList([]);
};


/**
 * repeated AstNode root_nodes = 7;
 * @return {!Array<!proto.proto.AstNode>}
 */
proto.proto.PkgAstResult.prototype.getRootNodesList = function() {
  return /** @type{!Array<!proto.proto.AstNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.AstNode, 7));
};


/** @param {!Array<!proto.proto.AstNode>} value */
proto.proto.PkgAstResult.prototype.setRootNodesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.proto.AstNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.AstNode}
 */
proto.proto.PkgAstResult.prototype.addRootNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.proto.AstNode, opt_index);
};


proto.proto.PkgAstResult.prototype.clearRootNodesList = function() {
  this.setRootNodesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PkgAstResults = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.PkgAstResults.repeatedFields_, null);
};
goog.inherits(proto.proto.PkgAstResults, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.PkgAstResults.displayName = 'proto.proto.PkgAstResults';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.PkgAstResults.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PkgAstResults.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PkgAstResults.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PkgAstResults} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PkgAstResults.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkgsList: jspb.Message.toObjectList(msg.getPkgsList(),
    proto.proto.PkgAstResult.toObject, includeInstance),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PkgAstResults}
 */
proto.proto.PkgAstResults.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PkgAstResults;
  return proto.proto.PkgAstResults.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PkgAstResults} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PkgAstResults}
 */
proto.proto.PkgAstResults.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.PkgAstResult;
      reader.readMessage(value,proto.proto.PkgAstResult.deserializeBinaryFromReader);
      msg.addPkgs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PkgAstResults.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PkgAstResults.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PkgAstResults} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PkgAstResults.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.PkgAstResult.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * repeated PkgAstResult pkgs = 1;
 * @return {!Array<!proto.proto.PkgAstResult>}
 */
proto.proto.PkgAstResults.prototype.getPkgsList = function() {
  return /** @type{!Array<!proto.proto.PkgAstResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.PkgAstResult, 1));
};


/** @param {!Array<!proto.proto.PkgAstResult>} value */
proto.proto.PkgAstResults.prototype.setPkgsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.PkgAstResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.PkgAstResult}
 */
proto.proto.PkgAstResults.prototype.addPkgs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.PkgAstResult, opt_index);
};


proto.proto.PkgAstResults.prototype.clearPkgsList = function() {
  this.setPkgsList([]);
};


/**
 * optional uint64 timestamp = 2;
 * @return {number}
 */
proto.proto.PkgAstResults.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.PkgAstResults.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.proto.Language = {
  UNKNOWN: 0,
  PYTHON: 1,
  JAVASCRIPT: 2,
  RUBY: 3,
  JAVA: 4,
  PHP: 5,
  CSHARP: 6,
  CPP: 7,
  GO: 8
};

/**
 * @enum {number}
 */
proto.proto.Functionality = {
  UNCLASSIFIED: 0,
  SOURCE: 1,
  SINK: 2,
  DANGER: 3,
  PROPAGATE: 4
};

/**
 * @enum {number}
 */
proto.proto.SourceType = {
  SOURCE_UNCLASSIFIED: 0,
  SOURCE_ACCOUNT: 1,
  SOURCE_BLUETOOTH: 2,
  SOURCE_BROWSER: 3,
  SOURCE_CALENDAR: 4,
  SOURCE_CONTACT: 5,
  SOURCE_DATABASE: 6,
  SOURCE_FILE: 7,
  SOURCE_NETWORK: 8,
  SOURCE_NFC: 9,
  SOURCE_SETTINGS: 10,
  SOURCE_SYNC: 11,
  SOURCE_UNIQUE_IDENTIFIER: 12,
  SOURCE_ENVIRONMENT: 51,
  SOURCE_USER_INPUT: 52,
  SOURCE_OBFUSCATION: 53
};

/**
 * @enum {number}
 */
proto.proto.SinkType = {
  SINK_UNCLASSIFIED: 0,
  SINK_ACCOUNT: 1,
  SINK_AUDIO: 2,
  SINK_BROWSER: 3,
  SINK_CALENDAR: 4,
  SINK_CONTACT: 5,
  SINK_FILE: 6,
  SINK_LOG: 7,
  SINK_NETWORK: 8,
  SINK_NFC: 9,
  SINK_PHONE_CONNECTION: 10,
  SINK_PHONE_STATE: 11,
  SINK_SMS_MMS: 12,
  SINK_SYNC: 13,
  SINK_SYSTEM: 14,
  SINK_VOIP: 15,
  SINK_CODE_GENERATION: 51,
  SINK_PROCESS_OPERATION: 52,
  SINK_DATABASE: 53
};

/**
 * @enum {number}
 */
proto.proto.DangerType = {
  DANGER_UNCLASSIFIED_DANGER: 0
};

/**
 * @enum {number}
 */
proto.proto.PropagateType = {
  PROPAGATE_UNCLASSIFIED: 0,
  PROPAGATE_ASSIGN: 1,
  PROPAGATE_CALL: 2,
  PROPAGATE_SYSCALL: 3,
  PROPAGATE_LIBCALL: 4
};

goog.object.extend(exports, proto.proto);
