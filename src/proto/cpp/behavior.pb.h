// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: behavior.proto

#ifndef PROTOBUF_INCLUDED_behavior_2eproto
#define PROTOBUF_INCLUDED_behavior_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "info.pb.h"
#include "module.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_behavior_2eproto 

namespace protobuf_behavior_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_behavior_2eproto
namespace proto {
class AnalysisResult;
class AnalysisResultDefaultTypeInternal;
extern AnalysisResultDefaultTypeInternal _AnalysisResult_default_instance_;
class ConcolicAnalysis;
class ConcolicAnalysisDefaultTypeInternal;
extern ConcolicAnalysisDefaultTypeInternal _ConcolicAnalysis_default_instance_;
class DynamicAnalysis;
class DynamicAnalysisDefaultTypeInternal;
extern DynamicAnalysisDefaultTypeInternal _DynamicAnalysis_default_instance_;
class FileActivity;
class FileActivityDefaultTypeInternal;
extern FileActivityDefaultTypeInternal _FileActivity_default_instance_;
class NetworkActivity;
class NetworkActivityDefaultTypeInternal;
extern NetworkActivityDefaultTypeInternal _NetworkActivity_default_instance_;
class ProcessActivity;
class ProcessActivityDefaultTypeInternal;
extern ProcessActivityDefaultTypeInternal _ProcessActivity_default_instance_;
class SensitivenActivity;
class SensitivenActivityDefaultTypeInternal;
extern SensitivenActivityDefaultTypeInternal _SensitivenActivity_default_instance_;
class StaticAnalysis;
class StaticAnalysisDefaultTypeInternal;
extern StaticAnalysisDefaultTypeInternal _StaticAnalysis_default_instance_;
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::AnalysisResult* Arena::CreateMaybeMessage<::proto::AnalysisResult>(Arena*);
template<> ::proto::ConcolicAnalysis* Arena::CreateMaybeMessage<::proto::ConcolicAnalysis>(Arena*);
template<> ::proto::DynamicAnalysis* Arena::CreateMaybeMessage<::proto::DynamicAnalysis>(Arena*);
template<> ::proto::FileActivity* Arena::CreateMaybeMessage<::proto::FileActivity>(Arena*);
template<> ::proto::NetworkActivity* Arena::CreateMaybeMessage<::proto::NetworkActivity>(Arena*);
template<> ::proto::ProcessActivity* Arena::CreateMaybeMessage<::proto::ProcessActivity>(Arena*);
template<> ::proto::SensitivenActivity* Arena::CreateMaybeMessage<::proto::SensitivenActivity>(Arena*);
template<> ::proto::StaticAnalysis* Arena::CreateMaybeMessage<::proto::StaticAnalysis>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {

enum ExecutionType {
  INSTALL = 0,
  MAIN = 1,
  EXERCISE = 2,
  TEST = 3,
  ExecutionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ExecutionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ExecutionType_IsValid(int value);
const ExecutionType ExecutionType_MIN = INSTALL;
const ExecutionType ExecutionType_MAX = TEST;
const int ExecutionType_ARRAYSIZE = ExecutionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExecutionType_descriptor();
inline const ::std::string& ExecutionType_Name(ExecutionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExecutionType_descriptor(), value);
}
inline bool ExecutionType_Parse(
    const ::std::string& name, ExecutionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExecutionType>(
    ExecutionType_descriptor(), name, value);
}
enum AnalysisType {
  API_USAGE = 0,
  REACHABILITY = 1,
  TAINT_TRACKING = 2,
  SYMBOLIC = 3,
  AnalysisType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AnalysisType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AnalysisType_IsValid(int value);
const AnalysisType AnalysisType_MIN = API_USAGE;
const AnalysisType AnalysisType_MAX = SYMBOLIC;
const int AnalysisType_ARRAYSIZE = AnalysisType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AnalysisType_descriptor();
inline const ::std::string& AnalysisType_Name(AnalysisType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AnalysisType_descriptor(), value);
}
inline bool AnalysisType_Parse(
    const ::std::string& name, AnalysisType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AnalysisType>(
    AnalysisType_descriptor(), name, value);
}
// ===================================================================

class NetworkActivity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.NetworkActivity) */ {
 public:
  NetworkActivity();
  virtual ~NetworkActivity();

  NetworkActivity(const NetworkActivity& from);

  inline NetworkActivity& operator=(const NetworkActivity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkActivity(NetworkActivity&& from) noexcept
    : NetworkActivity() {
    *this = ::std::move(from);
  }

  inline NetworkActivity& operator=(NetworkActivity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkActivity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkActivity* internal_default_instance() {
    return reinterpret_cast<const NetworkActivity*>(
               &_NetworkActivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NetworkActivity* other);
  friend void swap(NetworkActivity& a, NetworkActivity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkActivity* New() const final {
    return CreateMaybeMessage<NetworkActivity>(NULL);
  }

  NetworkActivity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetworkActivity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NetworkActivity& from);
  void MergeFrom(const NetworkActivity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkActivity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string domain = 1;
  void clear_domain();
  static const int kDomainFieldNumber = 1;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string url = 2;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // string ip = 3;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string protocol = 5;
  void clear_protocol();
  static const int kProtocolFieldNumber = 5;
  const ::std::string& protocol() const;
  void set_protocol(const ::std::string& value);
  #if LANG_CXX11
  void set_protocol(::std::string&& value);
  #endif
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  ::std::string* mutable_protocol();
  ::std::string* release_protocol();
  void set_allocated_protocol(::std::string* protocol);

  // string send_content = 6;
  void clear_send_content();
  static const int kSendContentFieldNumber = 6;
  const ::std::string& send_content() const;
  void set_send_content(const ::std::string& value);
  #if LANG_CXX11
  void set_send_content(::std::string&& value);
  #endif
  void set_send_content(const char* value);
  void set_send_content(const char* value, size_t size);
  ::std::string* mutable_send_content();
  ::std::string* release_send_content();
  void set_allocated_send_content(::std::string* send_content);

  // string receive_content = 8;
  void clear_receive_content();
  static const int kReceiveContentFieldNumber = 8;
  const ::std::string& receive_content() const;
  void set_receive_content(const ::std::string& value);
  #if LANG_CXX11
  void set_receive_content(::std::string&& value);
  #endif
  void set_receive_content(const char* value);
  void set_receive_content(const char* value, size_t size);
  ::std::string* mutable_receive_content();
  ::std::string* release_receive_content();
  void set_allocated_receive_content(::std::string* receive_content);

  // int32 port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // int32 send_content_size = 7;
  void clear_send_content_size();
  static const int kSendContentSizeFieldNumber = 7;
  ::google::protobuf::int32 send_content_size() const;
  void set_send_content_size(::google::protobuf::int32 value);

  // int32 receive_content_size = 9;
  void clear_receive_content_size();
  static const int kReceiveContentSizeFieldNumber = 9;
  ::google::protobuf::int32 receive_content_size() const;
  void set_receive_content_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.NetworkActivity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr protocol_;
  ::google::protobuf::internal::ArenaStringPtr send_content_;
  ::google::protobuf::internal::ArenaStringPtr receive_content_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 send_content_size_;
  ::google::protobuf::int32 receive_content_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_behavior_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileActivity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.FileActivity) */ {
 public:
  FileActivity();
  virtual ~FileActivity();

  FileActivity(const FileActivity& from);

  inline FileActivity& operator=(const FileActivity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileActivity(FileActivity&& from) noexcept
    : FileActivity() {
    *this = ::std::move(from);
  }

  inline FileActivity& operator=(FileActivity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileActivity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileActivity* internal_default_instance() {
    return reinterpret_cast<const FileActivity*>(
               &_FileActivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FileActivity* other);
  friend void swap(FileActivity& a, FileActivity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileActivity* New() const final {
    return CreateMaybeMessage<FileActivity>(NULL);
  }

  FileActivity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileActivity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileActivity& from);
  void MergeFrom(const FileActivity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileActivity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filename = 1;
  void clear_filename();
  static const int kFilenameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // string filepath = 2;
  void clear_filepath();
  static const int kFilepathFieldNumber = 2;
  const ::std::string& filepath() const;
  void set_filepath(const ::std::string& value);
  #if LANG_CXX11
  void set_filepath(::std::string&& value);
  #endif
  void set_filepath(const char* value);
  void set_filepath(const char* value, size_t size);
  ::std::string* mutable_filepath();
  ::std::string* release_filepath();
  void set_allocated_filepath(::std::string* filepath);

  // string mode = 3;
  void clear_mode();
  static const int kModeFieldNumber = 3;
  const ::std::string& mode() const;
  void set_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_mode(::std::string&& value);
  #endif
  void set_mode(const char* value);
  void set_mode(const char* value, size_t size);
  ::std::string* mutable_mode();
  ::std::string* release_mode();
  void set_allocated_mode(::std::string* mode);

  // string permission = 4;
  void clear_permission();
  static const int kPermissionFieldNumber = 4;
  const ::std::string& permission() const;
  void set_permission(const ::std::string& value);
  #if LANG_CXX11
  void set_permission(::std::string&& value);
  #endif
  void set_permission(const char* value);
  void set_permission(const char* value, size_t size);
  ::std::string* mutable_permission();
  ::std::string* release_permission();
  void set_allocated_permission(::std::string* permission);

  // string read_content = 5;
  void clear_read_content();
  static const int kReadContentFieldNumber = 5;
  const ::std::string& read_content() const;
  void set_read_content(const ::std::string& value);
  #if LANG_CXX11
  void set_read_content(::std::string&& value);
  #endif
  void set_read_content(const char* value);
  void set_read_content(const char* value, size_t size);
  ::std::string* mutable_read_content();
  ::std::string* release_read_content();
  void set_allocated_read_content(::std::string* read_content);

  // string read_content_size = 6;
  void clear_read_content_size();
  static const int kReadContentSizeFieldNumber = 6;
  const ::std::string& read_content_size() const;
  void set_read_content_size(const ::std::string& value);
  #if LANG_CXX11
  void set_read_content_size(::std::string&& value);
  #endif
  void set_read_content_size(const char* value);
  void set_read_content_size(const char* value, size_t size);
  ::std::string* mutable_read_content_size();
  ::std::string* release_read_content_size();
  void set_allocated_read_content_size(::std::string* read_content_size);

  // string add_content = 7;
  void clear_add_content();
  static const int kAddContentFieldNumber = 7;
  const ::std::string& add_content() const;
  void set_add_content(const ::std::string& value);
  #if LANG_CXX11
  void set_add_content(::std::string&& value);
  #endif
  void set_add_content(const char* value);
  void set_add_content(const char* value, size_t size);
  ::std::string* mutable_add_content();
  ::std::string* release_add_content();
  void set_allocated_add_content(::std::string* add_content);

  // string remove_content = 9;
  void clear_remove_content();
  static const int kRemoveContentFieldNumber = 9;
  const ::std::string& remove_content() const;
  void set_remove_content(const ::std::string& value);
  #if LANG_CXX11
  void set_remove_content(::std::string&& value);
  #endif
  void set_remove_content(const char* value);
  void set_remove_content(const char* value, size_t size);
  ::std::string* mutable_remove_content();
  ::std::string* release_remove_content();
  void set_allocated_remove_content(::std::string* remove_content);

  // string modify_content = 11;
  void clear_modify_content();
  static const int kModifyContentFieldNumber = 11;
  const ::std::string& modify_content() const;
  void set_modify_content(const ::std::string& value);
  #if LANG_CXX11
  void set_modify_content(::std::string&& value);
  #endif
  void set_modify_content(const char* value);
  void set_modify_content(const char* value, size_t size);
  ::std::string* mutable_modify_content();
  ::std::string* release_modify_content();
  void set_allocated_modify_content(::std::string* modify_content);

  // int32 add_content_size = 8;
  void clear_add_content_size();
  static const int kAddContentSizeFieldNumber = 8;
  ::google::protobuf::int32 add_content_size() const;
  void set_add_content_size(::google::protobuf::int32 value);

  // int32 remove_content_size = 10;
  void clear_remove_content_size();
  static const int kRemoveContentSizeFieldNumber = 10;
  ::google::protobuf::int32 remove_content_size() const;
  void set_remove_content_size(::google::protobuf::int32 value);

  // int32 modify_content_size = 12;
  void clear_modify_content_size();
  static const int kModifyContentSizeFieldNumber = 12;
  ::google::protobuf::int32 modify_content_size() const;
  void set_modify_content_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.FileActivity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr filepath_;
  ::google::protobuf::internal::ArenaStringPtr mode_;
  ::google::protobuf::internal::ArenaStringPtr permission_;
  ::google::protobuf::internal::ArenaStringPtr read_content_;
  ::google::protobuf::internal::ArenaStringPtr read_content_size_;
  ::google::protobuf::internal::ArenaStringPtr add_content_;
  ::google::protobuf::internal::ArenaStringPtr remove_content_;
  ::google::protobuf::internal::ArenaStringPtr modify_content_;
  ::google::protobuf::int32 add_content_size_;
  ::google::protobuf::int32 remove_content_size_;
  ::google::protobuf::int32 modify_content_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_behavior_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SensitivenActivity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SensitivenActivity) */ {
 public:
  SensitivenActivity();
  virtual ~SensitivenActivity();

  SensitivenActivity(const SensitivenActivity& from);

  inline SensitivenActivity& operator=(const SensitivenActivity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensitivenActivity(SensitivenActivity&& from) noexcept
    : SensitivenActivity() {
    *this = ::std::move(from);
  }

  inline SensitivenActivity& operator=(SensitivenActivity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensitivenActivity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensitivenActivity* internal_default_instance() {
    return reinterpret_cast<const SensitivenActivity*>(
               &_SensitivenActivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SensitivenActivity* other);
  friend void swap(SensitivenActivity& a, SensitivenActivity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensitivenActivity* New() const final {
    return CreateMaybeMessage<SensitivenActivity>(NULL);
  }

  SensitivenActivity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensitivenActivity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensitivenActivity& from);
  void MergeFrom(const SensitivenActivity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensitivenActivity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pid = 1;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  const ::std::string& pid() const;
  void set_pid(const ::std::string& value);
  #if LANG_CXX11
  void set_pid(::std::string&& value);
  #endif
  void set_pid(const char* value);
  void set_pid(const char* value, size_t size);
  ::std::string* mutable_pid();
  ::std::string* release_pid();
  void set_allocated_pid(::std::string* pid);

  // string cmdline = 2;
  void clear_cmdline();
  static const int kCmdlineFieldNumber = 2;
  const ::std::string& cmdline() const;
  void set_cmdline(const ::std::string& value);
  #if LANG_CXX11
  void set_cmdline(::std::string&& value);
  #endif
  void set_cmdline(const char* value);
  void set_cmdline(const char* value, size_t size);
  ::std::string* mutable_cmdline();
  ::std::string* release_cmdline();
  void set_allocated_cmdline(::std::string* cmdline);

  // string exe = 3;
  void clear_exe();
  static const int kExeFieldNumber = 3;
  const ::std::string& exe() const;
  void set_exe(const ::std::string& value);
  #if LANG_CXX11
  void set_exe(::std::string&& value);
  #endif
  void set_exe(const char* value);
  void set_exe(const char* value, size_t size);
  ::std::string* mutable_exe();
  ::std::string* release_exe();
  void set_allocated_exe(::std::string* exe);

  // string cwd = 4;
  void clear_cwd();
  static const int kCwdFieldNumber = 4;
  const ::std::string& cwd() const;
  void set_cwd(const ::std::string& value);
  #if LANG_CXX11
  void set_cwd(::std::string&& value);
  #endif
  void set_cwd(const char* value);
  void set_cwd(const char* value, size_t size);
  ::std::string* mutable_cwd();
  ::std::string* release_cwd();
  void set_allocated_cwd(::std::string* cwd);

  // string root = 5;
  void clear_root();
  static const int kRootFieldNumber = 5;
  const ::std::string& root() const;
  void set_root(const ::std::string& value);
  #if LANG_CXX11
  void set_root(::std::string&& value);
  #endif
  void set_root(const char* value);
  void set_root(const char* value, size_t size);
  ::std::string* mutable_root();
  ::std::string* release_root();
  void set_allocated_root(::std::string* root);

  // string ppid = 6;
  void clear_ppid();
  static const int kPpidFieldNumber = 6;
  const ::std::string& ppid() const;
  void set_ppid(const ::std::string& value);
  #if LANG_CXX11
  void set_ppid(::std::string&& value);
  #endif
  void set_ppid(const char* value);
  void set_ppid(const char* value, size_t size);
  ::std::string* mutable_ppid();
  ::std::string* release_ppid();
  void set_allocated_ppid(::std::string* ppid);

  // string user = 7;
  void clear_user();
  static const int kUserFieldNumber = 7;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // string syscall = 8;
  void clear_syscall();
  static const int kSyscallFieldNumber = 8;
  const ::std::string& syscall() const;
  void set_syscall(const ::std::string& value);
  #if LANG_CXX11
  void set_syscall(::std::string&& value);
  #endif
  void set_syscall(const char* value);
  void set_syscall(const char* value, size_t size);
  ::std::string* mutable_syscall();
  ::std::string* release_syscall();
  void set_allocated_syscall(::std::string* syscall);

  // @@protoc_insertion_point(class_scope:proto.SensitivenActivity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pid_;
  ::google::protobuf::internal::ArenaStringPtr cmdline_;
  ::google::protobuf::internal::ArenaStringPtr exe_;
  ::google::protobuf::internal::ArenaStringPtr cwd_;
  ::google::protobuf::internal::ArenaStringPtr root_;
  ::google::protobuf::internal::ArenaStringPtr ppid_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr syscall_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_behavior_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcessActivity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ProcessActivity) */ {
 public:
  ProcessActivity();
  virtual ~ProcessActivity();

  ProcessActivity(const ProcessActivity& from);

  inline ProcessActivity& operator=(const ProcessActivity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcessActivity(ProcessActivity&& from) noexcept
    : ProcessActivity() {
    *this = ::std::move(from);
  }

  inline ProcessActivity& operator=(ProcessActivity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessActivity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessActivity* internal_default_instance() {
    return reinterpret_cast<const ProcessActivity*>(
               &_ProcessActivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ProcessActivity* other);
  friend void swap(ProcessActivity& a, ProcessActivity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcessActivity* New() const final {
    return CreateMaybeMessage<ProcessActivity>(NULL);
  }

  ProcessActivity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcessActivity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcessActivity& from);
  void MergeFrom(const ProcessActivity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessActivity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.NetworkActivity network_activities = 10;
  int network_activities_size() const;
  void clear_network_activities();
  static const int kNetworkActivitiesFieldNumber = 10;
  ::proto::NetworkActivity* mutable_network_activities(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::NetworkActivity >*
      mutable_network_activities();
  const ::proto::NetworkActivity& network_activities(int index) const;
  ::proto::NetworkActivity* add_network_activities();
  const ::google::protobuf::RepeatedPtrField< ::proto::NetworkActivity >&
      network_activities() const;

  // repeated .proto.FileActivity file_activities = 11;
  int file_activities_size() const;
  void clear_file_activities();
  static const int kFileActivitiesFieldNumber = 11;
  ::proto::FileActivity* mutable_file_activities(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::FileActivity >*
      mutable_file_activities();
  const ::proto::FileActivity& file_activities(int index) const;
  ::proto::FileActivity* add_file_activities();
  const ::google::protobuf::RepeatedPtrField< ::proto::FileActivity >&
      file_activities() const;

  // repeated .proto.ProcessActivity child_process_activities = 12;
  int child_process_activities_size() const;
  void clear_child_process_activities();
  static const int kChildProcessActivitiesFieldNumber = 12;
  ::proto::ProcessActivity* mutable_child_process_activities(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::ProcessActivity >*
      mutable_child_process_activities();
  const ::proto::ProcessActivity& child_process_activities(int index) const;
  ::proto::ProcessActivity* add_child_process_activities();
  const ::google::protobuf::RepeatedPtrField< ::proto::ProcessActivity >&
      child_process_activities() const;

  // repeated .proto.SensitivenActivity sensitive_activities = 13;
  int sensitive_activities_size() const;
  void clear_sensitive_activities();
  static const int kSensitiveActivitiesFieldNumber = 13;
  ::proto::SensitivenActivity* mutable_sensitive_activities(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::SensitivenActivity >*
      mutable_sensitive_activities();
  const ::proto::SensitivenActivity& sensitive_activities(int index) const;
  ::proto::SensitivenActivity* add_sensitive_activities();
  const ::google::protobuf::RepeatedPtrField< ::proto::SensitivenActivity >&
      sensitive_activities() const;

  // string pid = 1;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  const ::std::string& pid() const;
  void set_pid(const ::std::string& value);
  #if LANG_CXX11
  void set_pid(::std::string&& value);
  #endif
  void set_pid(const char* value);
  void set_pid(const char* value, size_t size);
  ::std::string* mutable_pid();
  ::std::string* release_pid();
  void set_allocated_pid(::std::string* pid);

  // string cmdline = 2;
  void clear_cmdline();
  static const int kCmdlineFieldNumber = 2;
  const ::std::string& cmdline() const;
  void set_cmdline(const ::std::string& value);
  #if LANG_CXX11
  void set_cmdline(::std::string&& value);
  #endif
  void set_cmdline(const char* value);
  void set_cmdline(const char* value, size_t size);
  ::std::string* mutable_cmdline();
  ::std::string* release_cmdline();
  void set_allocated_cmdline(::std::string* cmdline);

  // string exe = 3;
  void clear_exe();
  static const int kExeFieldNumber = 3;
  const ::std::string& exe() const;
  void set_exe(const ::std::string& value);
  #if LANG_CXX11
  void set_exe(::std::string&& value);
  #endif
  void set_exe(const char* value);
  void set_exe(const char* value, size_t size);
  ::std::string* mutable_exe();
  ::std::string* release_exe();
  void set_allocated_exe(::std::string* exe);

  // string cwd = 4;
  void clear_cwd();
  static const int kCwdFieldNumber = 4;
  const ::std::string& cwd() const;
  void set_cwd(const ::std::string& value);
  #if LANG_CXX11
  void set_cwd(::std::string&& value);
  #endif
  void set_cwd(const char* value);
  void set_cwd(const char* value, size_t size);
  ::std::string* mutable_cwd();
  ::std::string* release_cwd();
  void set_allocated_cwd(::std::string* cwd);

  // string root = 5;
  void clear_root();
  static const int kRootFieldNumber = 5;
  const ::std::string& root() const;
  void set_root(const ::std::string& value);
  #if LANG_CXX11
  void set_root(::std::string&& value);
  #endif
  void set_root(const char* value);
  void set_root(const char* value, size_t size);
  ::std::string* mutable_root();
  ::std::string* release_root();
  void set_allocated_root(::std::string* root);

  // string ppid = 6;
  void clear_ppid();
  static const int kPpidFieldNumber = 6;
  const ::std::string& ppid() const;
  void set_ppid(const ::std::string& value);
  #if LANG_CXX11
  void set_ppid(::std::string&& value);
  #endif
  void set_ppid(const char* value);
  void set_ppid(const char* value, size_t size);
  ::std::string* mutable_ppid();
  ::std::string* release_ppid();
  void set_allocated_ppid(::std::string* ppid);

  // string user = 7;
  void clear_user();
  static const int kUserFieldNumber = 7;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // string permission = 8;
  void clear_permission();
  static const int kPermissionFieldNumber = 8;
  const ::std::string& permission() const;
  void set_permission(const ::std::string& value);
  #if LANG_CXX11
  void set_permission(::std::string&& value);
  #endif
  void set_permission(const char* value);
  void set_permission(const char* value, size_t size);
  ::std::string* mutable_permission();
  ::std::string* release_permission();
  void set_allocated_permission(::std::string* permission);

  // bool main_process = 9;
  void clear_main_process();
  static const int kMainProcessFieldNumber = 9;
  bool main_process() const;
  void set_main_process(bool value);

  // @@protoc_insertion_point(class_scope:proto.ProcessActivity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::NetworkActivity > network_activities_;
  ::google::protobuf::RepeatedPtrField< ::proto::FileActivity > file_activities_;
  ::google::protobuf::RepeatedPtrField< ::proto::ProcessActivity > child_process_activities_;
  ::google::protobuf::RepeatedPtrField< ::proto::SensitivenActivity > sensitive_activities_;
  ::google::protobuf::internal::ArenaStringPtr pid_;
  ::google::protobuf::internal::ArenaStringPtr cmdline_;
  ::google::protobuf::internal::ArenaStringPtr exe_;
  ::google::protobuf::internal::ArenaStringPtr cwd_;
  ::google::protobuf::internal::ArenaStringPtr root_;
  ::google::protobuf::internal::ArenaStringPtr ppid_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr permission_;
  bool main_process_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_behavior_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DynamicAnalysis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DynamicAnalysis) */ {
 public:
  DynamicAnalysis();
  virtual ~DynamicAnalysis();

  DynamicAnalysis(const DynamicAnalysis& from);

  inline DynamicAnalysis& operator=(const DynamicAnalysis& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DynamicAnalysis(DynamicAnalysis&& from) noexcept
    : DynamicAnalysis() {
    *this = ::std::move(from);
  }

  inline DynamicAnalysis& operator=(DynamicAnalysis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DynamicAnalysis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DynamicAnalysis* internal_default_instance() {
    return reinterpret_cast<const DynamicAnalysis*>(
               &_DynamicAnalysis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DynamicAnalysis* other);
  friend void swap(DynamicAnalysis& a, DynamicAnalysis& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DynamicAnalysis* New() const final {
    return CreateMaybeMessage<DynamicAnalysis>(NULL);
  }

  DynamicAnalysis* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DynamicAnalysis>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DynamicAnalysis& from);
  void MergeFrom(const DynamicAnalysis& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicAnalysis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string exe_user = 3;
  void clear_exe_user();
  static const int kExeUserFieldNumber = 3;
  const ::std::string& exe_user() const;
  void set_exe_user(const ::std::string& value);
  #if LANG_CXX11
  void set_exe_user(::std::string&& value);
  #endif
  void set_exe_user(const char* value);
  void set_exe_user(const char* value, size_t size);
  ::std::string* mutable_exe_user();
  ::std::string* release_exe_user();
  void set_allocated_exe_user(::std::string* exe_user);

  // string timestamp = 4;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp(::std::string&& value);
  #endif
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // string end_timestamp = 5;
  void clear_end_timestamp();
  static const int kEndTimestampFieldNumber = 5;
  const ::std::string& end_timestamp() const;
  void set_end_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_end_timestamp(::std::string&& value);
  #endif
  void set_end_timestamp(const char* value);
  void set_end_timestamp(const char* value, size_t size);
  ::std::string* mutable_end_timestamp();
  ::std::string* release_end_timestamp();
  void set_allocated_end_timestamp(::std::string* end_timestamp);

  // .proto.ProcessActivity process_activity = 6;
  bool has_process_activity() const;
  void clear_process_activity();
  static const int kProcessActivityFieldNumber = 6;
  private:
  const ::proto::ProcessActivity& _internal_process_activity() const;
  public:
  const ::proto::ProcessActivity& process_activity() const;
  ::proto::ProcessActivity* release_process_activity();
  ::proto::ProcessActivity* mutable_process_activity();
  void set_allocated_process_activity(::proto::ProcessActivity* process_activity);

  // .proto.AnalysisType analysis_type = 1;
  void clear_analysis_type();
  static const int kAnalysisTypeFieldNumber = 1;
  ::proto::AnalysisType analysis_type() const;
  void set_analysis_type(::proto::AnalysisType value);

  // .proto.ExecutionType exe_type = 2;
  void clear_exe_type();
  static const int kExeTypeFieldNumber = 2;
  ::proto::ExecutionType exe_type() const;
  void set_exe_type(::proto::ExecutionType value);

  // @@protoc_insertion_point(class_scope:proto.DynamicAnalysis)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr exe_user_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  ::google::protobuf::internal::ArenaStringPtr end_timestamp_;
  ::proto::ProcessActivity* process_activity_;
  int analysis_type_;
  int exe_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_behavior_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StaticAnalysis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.StaticAnalysis) */ {
 public:
  StaticAnalysis();
  virtual ~StaticAnalysis();

  StaticAnalysis(const StaticAnalysis& from);

  inline StaticAnalysis& operator=(const StaticAnalysis& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StaticAnalysis(StaticAnalysis&& from) noexcept
    : StaticAnalysis() {
    *this = ::std::move(from);
  }

  inline StaticAnalysis& operator=(StaticAnalysis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StaticAnalysis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StaticAnalysis* internal_default_instance() {
    return reinterpret_cast<const StaticAnalysis*>(
               &_StaticAnalysis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(StaticAnalysis* other);
  friend void swap(StaticAnalysis& a, StaticAnalysis& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StaticAnalysis* New() const final {
    return CreateMaybeMessage<StaticAnalysis>(NULL);
  }

  StaticAnalysis* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StaticAnalysis>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StaticAnalysis& from);
  void MergeFrom(const StaticAnalysis& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaticAnalysis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp(::std::string&& value);
  #endif
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // .proto.ModuleStatic code_activity = 3;
  bool has_code_activity() const;
  void clear_code_activity();
  static const int kCodeActivityFieldNumber = 3;
  private:
  const ::proto::ModuleStatic& _internal_code_activity() const;
  public:
  const ::proto::ModuleStatic& code_activity() const;
  ::proto::ModuleStatic* release_code_activity();
  ::proto::ModuleStatic* mutable_code_activity();
  void set_allocated_code_activity(::proto::ModuleStatic* code_activity);

  // .proto.AnalysisType analysis_type = 1;
  void clear_analysis_type();
  static const int kAnalysisTypeFieldNumber = 1;
  ::proto::AnalysisType analysis_type() const;
  void set_analysis_type(::proto::AnalysisType value);

  // @@protoc_insertion_point(class_scope:proto.StaticAnalysis)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  ::proto::ModuleStatic* code_activity_;
  int analysis_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_behavior_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConcolicAnalysis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ConcolicAnalysis) */ {
 public:
  ConcolicAnalysis();
  virtual ~ConcolicAnalysis();

  ConcolicAnalysis(const ConcolicAnalysis& from);

  inline ConcolicAnalysis& operator=(const ConcolicAnalysis& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConcolicAnalysis(ConcolicAnalysis&& from) noexcept
    : ConcolicAnalysis() {
    *this = ::std::move(from);
  }

  inline ConcolicAnalysis& operator=(ConcolicAnalysis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcolicAnalysis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConcolicAnalysis* internal_default_instance() {
    return reinterpret_cast<const ConcolicAnalysis*>(
               &_ConcolicAnalysis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ConcolicAnalysis* other);
  friend void swap(ConcolicAnalysis& a, ConcolicAnalysis& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConcolicAnalysis* New() const final {
    return CreateMaybeMessage<ConcolicAnalysis>(NULL);
  }

  ConcolicAnalysis* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConcolicAnalysis>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConcolicAnalysis& from);
  void MergeFrom(const ConcolicAnalysis& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConcolicAnalysis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string exe_user = 3;
  void clear_exe_user();
  static const int kExeUserFieldNumber = 3;
  const ::std::string& exe_user() const;
  void set_exe_user(const ::std::string& value);
  #if LANG_CXX11
  void set_exe_user(::std::string&& value);
  #endif
  void set_exe_user(const char* value);
  void set_exe_user(const char* value, size_t size);
  ::std::string* mutable_exe_user();
  ::std::string* release_exe_user();
  void set_allocated_exe_user(::std::string* exe_user);

  // string timestamp = 4;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp(::std::string&& value);
  #endif
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // string end_timestamp = 5;
  void clear_end_timestamp();
  static const int kEndTimestampFieldNumber = 5;
  const ::std::string& end_timestamp() const;
  void set_end_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_end_timestamp(::std::string&& value);
  #endif
  void set_end_timestamp(const char* value);
  void set_end_timestamp(const char* value, size_t size);
  ::std::string* mutable_end_timestamp();
  ::std::string* release_end_timestamp();
  void set_allocated_end_timestamp(::std::string* end_timestamp);

  // .proto.ProcessActivity process_activity = 6;
  bool has_process_activity() const;
  void clear_process_activity();
  static const int kProcessActivityFieldNumber = 6;
  private:
  const ::proto::ProcessActivity& _internal_process_activity() const;
  public:
  const ::proto::ProcessActivity& process_activity() const;
  ::proto::ProcessActivity* release_process_activity();
  ::proto::ProcessActivity* mutable_process_activity();
  void set_allocated_process_activity(::proto::ProcessActivity* process_activity);

  // .proto.AnalysisType analysis_type = 1;
  void clear_analysis_type();
  static const int kAnalysisTypeFieldNumber = 1;
  ::proto::AnalysisType analysis_type() const;
  void set_analysis_type(::proto::AnalysisType value);

  // .proto.ExecutionType exe_type = 2;
  void clear_exe_type();
  static const int kExeTypeFieldNumber = 2;
  ::proto::ExecutionType exe_type() const;
  void set_exe_type(::proto::ExecutionType value);

  // @@protoc_insertion_point(class_scope:proto.ConcolicAnalysis)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr exe_user_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  ::google::protobuf::internal::ArenaStringPtr end_timestamp_;
  ::proto::ProcessActivity* process_activity_;
  int analysis_type_;
  int exe_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_behavior_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnalysisResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.AnalysisResult) */ {
 public:
  AnalysisResult();
  virtual ~AnalysisResult();

  AnalysisResult(const AnalysisResult& from);

  inline AnalysisResult& operator=(const AnalysisResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnalysisResult(AnalysisResult&& from) noexcept
    : AnalysisResult() {
    *this = ::std::move(from);
  }

  inline AnalysisResult& operator=(AnalysisResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalysisResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalysisResult* internal_default_instance() {
    return reinterpret_cast<const AnalysisResult*>(
               &_AnalysisResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(AnalysisResult* other);
  friend void swap(AnalysisResult& a, AnalysisResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnalysisResult* New() const final {
    return CreateMaybeMessage<AnalysisResult>(NULL);
  }

  AnalysisResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnalysisResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnalysisResult& from);
  void MergeFrom(const AnalysisResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalysisResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.DynamicAnalysis dynamic_results = 2;
  int dynamic_results_size() const;
  void clear_dynamic_results();
  static const int kDynamicResultsFieldNumber = 2;
  ::proto::DynamicAnalysis* mutable_dynamic_results(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::DynamicAnalysis >*
      mutable_dynamic_results();
  const ::proto::DynamicAnalysis& dynamic_results(int index) const;
  ::proto::DynamicAnalysis* add_dynamic_results();
  const ::google::protobuf::RepeatedPtrField< ::proto::DynamicAnalysis >&
      dynamic_results() const;

  // repeated .proto.StaticAnalysis static_results = 3;
  int static_results_size() const;
  void clear_static_results();
  static const int kStaticResultsFieldNumber = 3;
  ::proto::StaticAnalysis* mutable_static_results(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::StaticAnalysis >*
      mutable_static_results();
  const ::proto::StaticAnalysis& static_results(int index) const;
  ::proto::StaticAnalysis* add_static_results();
  const ::google::protobuf::RepeatedPtrField< ::proto::StaticAnalysis >&
      static_results() const;

  // repeated .proto.ConcolicAnalysis concolic_results = 4;
  int concolic_results_size() const;
  void clear_concolic_results();
  static const int kConcolicResultsFieldNumber = 4;
  ::proto::ConcolicAnalysis* mutable_concolic_results(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::ConcolicAnalysis >*
      mutable_concolic_results();
  const ::proto::ConcolicAnalysis& concolic_results(int index) const;
  ::proto::ConcolicAnalysis* add_concolic_results();
  const ::google::protobuf::RepeatedPtrField< ::proto::ConcolicAnalysis >&
      concolic_results() const;

  // .proto.PackageInfo package_info = 1;
  bool has_package_info() const;
  void clear_package_info();
  static const int kPackageInfoFieldNumber = 1;
  private:
  const ::proto::PackageInfo& _internal_package_info() const;
  public:
  const ::proto::PackageInfo& package_info() const;
  ::proto::PackageInfo* release_package_info();
  ::proto::PackageInfo* mutable_package_info();
  void set_allocated_package_info(::proto::PackageInfo* package_info);

  // @@protoc_insertion_point(class_scope:proto.AnalysisResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::DynamicAnalysis > dynamic_results_;
  ::google::protobuf::RepeatedPtrField< ::proto::StaticAnalysis > static_results_;
  ::google::protobuf::RepeatedPtrField< ::proto::ConcolicAnalysis > concolic_results_;
  ::proto::PackageInfo* package_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_behavior_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkActivity

// string domain = 1;
inline void NetworkActivity::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkActivity::domain() const {
  // @@protoc_insertion_point(field_get:proto.NetworkActivity.domain)
  return domain_.GetNoArena();
}
inline void NetworkActivity::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.NetworkActivity.domain)
}
#if LANG_CXX11
inline void NetworkActivity::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.NetworkActivity.domain)
}
#endif
inline void NetworkActivity::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.NetworkActivity.domain)
}
inline void NetworkActivity::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.NetworkActivity.domain)
}
inline ::std::string* NetworkActivity::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:proto.NetworkActivity.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkActivity::release_domain() {
  // @@protoc_insertion_point(field_release:proto.NetworkActivity.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkActivity::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:proto.NetworkActivity.domain)
}

// string url = 2;
inline void NetworkActivity::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkActivity::url() const {
  // @@protoc_insertion_point(field_get:proto.NetworkActivity.url)
  return url_.GetNoArena();
}
inline void NetworkActivity::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.NetworkActivity.url)
}
#if LANG_CXX11
inline void NetworkActivity::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.NetworkActivity.url)
}
#endif
inline void NetworkActivity::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.NetworkActivity.url)
}
inline void NetworkActivity::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.NetworkActivity.url)
}
inline ::std::string* NetworkActivity::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.NetworkActivity.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkActivity::release_url() {
  // @@protoc_insertion_point(field_release:proto.NetworkActivity.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkActivity::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.NetworkActivity.url)
}

// string ip = 3;
inline void NetworkActivity::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkActivity::ip() const {
  // @@protoc_insertion_point(field_get:proto.NetworkActivity.ip)
  return ip_.GetNoArena();
}
inline void NetworkActivity::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.NetworkActivity.ip)
}
#if LANG_CXX11
inline void NetworkActivity::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.NetworkActivity.ip)
}
#endif
inline void NetworkActivity::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.NetworkActivity.ip)
}
inline void NetworkActivity::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.NetworkActivity.ip)
}
inline ::std::string* NetworkActivity::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:proto.NetworkActivity.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkActivity::release_ip() {
  // @@protoc_insertion_point(field_release:proto.NetworkActivity.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkActivity::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:proto.NetworkActivity.ip)
}

// int32 port = 4;
inline void NetworkActivity::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 NetworkActivity::port() const {
  // @@protoc_insertion_point(field_get:proto.NetworkActivity.port)
  return port_;
}
inline void NetworkActivity::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:proto.NetworkActivity.port)
}

// string protocol = 5;
inline void NetworkActivity::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkActivity::protocol() const {
  // @@protoc_insertion_point(field_get:proto.NetworkActivity.protocol)
  return protocol_.GetNoArena();
}
inline void NetworkActivity::set_protocol(const ::std::string& value) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.NetworkActivity.protocol)
}
#if LANG_CXX11
inline void NetworkActivity::set_protocol(::std::string&& value) {
  
  protocol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.NetworkActivity.protocol)
}
#endif
inline void NetworkActivity::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.NetworkActivity.protocol)
}
inline void NetworkActivity::set_protocol(const char* value, size_t size) {
  
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.NetworkActivity.protocol)
}
inline ::std::string* NetworkActivity::mutable_protocol() {
  
  // @@protoc_insertion_point(field_mutable:proto.NetworkActivity.protocol)
  return protocol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkActivity::release_protocol() {
  // @@protoc_insertion_point(field_release:proto.NetworkActivity.protocol)
  
  return protocol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkActivity::set_allocated_protocol(::std::string* protocol) {
  if (protocol != NULL) {
    
  } else {
    
  }
  protocol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:proto.NetworkActivity.protocol)
}

// string send_content = 6;
inline void NetworkActivity::clear_send_content() {
  send_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkActivity::send_content() const {
  // @@protoc_insertion_point(field_get:proto.NetworkActivity.send_content)
  return send_content_.GetNoArena();
}
inline void NetworkActivity::set_send_content(const ::std::string& value) {
  
  send_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.NetworkActivity.send_content)
}
#if LANG_CXX11
inline void NetworkActivity::set_send_content(::std::string&& value) {
  
  send_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.NetworkActivity.send_content)
}
#endif
inline void NetworkActivity::set_send_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  send_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.NetworkActivity.send_content)
}
inline void NetworkActivity::set_send_content(const char* value, size_t size) {
  
  send_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.NetworkActivity.send_content)
}
inline ::std::string* NetworkActivity::mutable_send_content() {
  
  // @@protoc_insertion_point(field_mutable:proto.NetworkActivity.send_content)
  return send_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkActivity::release_send_content() {
  // @@protoc_insertion_point(field_release:proto.NetworkActivity.send_content)
  
  return send_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkActivity::set_allocated_send_content(::std::string* send_content) {
  if (send_content != NULL) {
    
  } else {
    
  }
  send_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), send_content);
  // @@protoc_insertion_point(field_set_allocated:proto.NetworkActivity.send_content)
}

// int32 send_content_size = 7;
inline void NetworkActivity::clear_send_content_size() {
  send_content_size_ = 0;
}
inline ::google::protobuf::int32 NetworkActivity::send_content_size() const {
  // @@protoc_insertion_point(field_get:proto.NetworkActivity.send_content_size)
  return send_content_size_;
}
inline void NetworkActivity::set_send_content_size(::google::protobuf::int32 value) {
  
  send_content_size_ = value;
  // @@protoc_insertion_point(field_set:proto.NetworkActivity.send_content_size)
}

// string receive_content = 8;
inline void NetworkActivity::clear_receive_content() {
  receive_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkActivity::receive_content() const {
  // @@protoc_insertion_point(field_get:proto.NetworkActivity.receive_content)
  return receive_content_.GetNoArena();
}
inline void NetworkActivity::set_receive_content(const ::std::string& value) {
  
  receive_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.NetworkActivity.receive_content)
}
#if LANG_CXX11
inline void NetworkActivity::set_receive_content(::std::string&& value) {
  
  receive_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.NetworkActivity.receive_content)
}
#endif
inline void NetworkActivity::set_receive_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  receive_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.NetworkActivity.receive_content)
}
inline void NetworkActivity::set_receive_content(const char* value, size_t size) {
  
  receive_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.NetworkActivity.receive_content)
}
inline ::std::string* NetworkActivity::mutable_receive_content() {
  
  // @@protoc_insertion_point(field_mutable:proto.NetworkActivity.receive_content)
  return receive_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkActivity::release_receive_content() {
  // @@protoc_insertion_point(field_release:proto.NetworkActivity.receive_content)
  
  return receive_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkActivity::set_allocated_receive_content(::std::string* receive_content) {
  if (receive_content != NULL) {
    
  } else {
    
  }
  receive_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receive_content);
  // @@protoc_insertion_point(field_set_allocated:proto.NetworkActivity.receive_content)
}

// int32 receive_content_size = 9;
inline void NetworkActivity::clear_receive_content_size() {
  receive_content_size_ = 0;
}
inline ::google::protobuf::int32 NetworkActivity::receive_content_size() const {
  // @@protoc_insertion_point(field_get:proto.NetworkActivity.receive_content_size)
  return receive_content_size_;
}
inline void NetworkActivity::set_receive_content_size(::google::protobuf::int32 value) {
  
  receive_content_size_ = value;
  // @@protoc_insertion_point(field_set:proto.NetworkActivity.receive_content_size)
}

// -------------------------------------------------------------------

// FileActivity

// string filename = 1;
inline void FileActivity::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileActivity::filename() const {
  // @@protoc_insertion_point(field_get:proto.FileActivity.filename)
  return filename_.GetNoArena();
}
inline void FileActivity::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.FileActivity.filename)
}
#if LANG_CXX11
inline void FileActivity::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.FileActivity.filename)
}
#endif
inline void FileActivity::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.FileActivity.filename)
}
inline void FileActivity::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.FileActivity.filename)
}
inline ::std::string* FileActivity::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:proto.FileActivity.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileActivity::release_filename() {
  // @@protoc_insertion_point(field_release:proto.FileActivity.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileActivity::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.FileActivity.filename)
}

// string filepath = 2;
inline void FileActivity::clear_filepath() {
  filepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileActivity::filepath() const {
  // @@protoc_insertion_point(field_get:proto.FileActivity.filepath)
  return filepath_.GetNoArena();
}
inline void FileActivity::set_filepath(const ::std::string& value) {
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.FileActivity.filepath)
}
#if LANG_CXX11
inline void FileActivity::set_filepath(::std::string&& value) {
  
  filepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.FileActivity.filepath)
}
#endif
inline void FileActivity::set_filepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.FileActivity.filepath)
}
inline void FileActivity::set_filepath(const char* value, size_t size) {
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.FileActivity.filepath)
}
inline ::std::string* FileActivity::mutable_filepath() {
  
  // @@protoc_insertion_point(field_mutable:proto.FileActivity.filepath)
  return filepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileActivity::release_filepath() {
  // @@protoc_insertion_point(field_release:proto.FileActivity.filepath)
  
  return filepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileActivity::set_allocated_filepath(::std::string* filepath) {
  if (filepath != NULL) {
    
  } else {
    
  }
  filepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filepath);
  // @@protoc_insertion_point(field_set_allocated:proto.FileActivity.filepath)
}

// string mode = 3;
inline void FileActivity::clear_mode() {
  mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileActivity::mode() const {
  // @@protoc_insertion_point(field_get:proto.FileActivity.mode)
  return mode_.GetNoArena();
}
inline void FileActivity::set_mode(const ::std::string& value) {
  
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.FileActivity.mode)
}
#if LANG_CXX11
inline void FileActivity::set_mode(::std::string&& value) {
  
  mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.FileActivity.mode)
}
#endif
inline void FileActivity::set_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.FileActivity.mode)
}
inline void FileActivity::set_mode(const char* value, size_t size) {
  
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.FileActivity.mode)
}
inline ::std::string* FileActivity::mutable_mode() {
  
  // @@protoc_insertion_point(field_mutable:proto.FileActivity.mode)
  return mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileActivity::release_mode() {
  // @@protoc_insertion_point(field_release:proto.FileActivity.mode)
  
  return mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileActivity::set_allocated_mode(::std::string* mode) {
  if (mode != NULL) {
    
  } else {
    
  }
  mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mode);
  // @@protoc_insertion_point(field_set_allocated:proto.FileActivity.mode)
}

// string permission = 4;
inline void FileActivity::clear_permission() {
  permission_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileActivity::permission() const {
  // @@protoc_insertion_point(field_get:proto.FileActivity.permission)
  return permission_.GetNoArena();
}
inline void FileActivity::set_permission(const ::std::string& value) {
  
  permission_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.FileActivity.permission)
}
#if LANG_CXX11
inline void FileActivity::set_permission(::std::string&& value) {
  
  permission_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.FileActivity.permission)
}
#endif
inline void FileActivity::set_permission(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  permission_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.FileActivity.permission)
}
inline void FileActivity::set_permission(const char* value, size_t size) {
  
  permission_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.FileActivity.permission)
}
inline ::std::string* FileActivity::mutable_permission() {
  
  // @@protoc_insertion_point(field_mutable:proto.FileActivity.permission)
  return permission_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileActivity::release_permission() {
  // @@protoc_insertion_point(field_release:proto.FileActivity.permission)
  
  return permission_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileActivity::set_allocated_permission(::std::string* permission) {
  if (permission != NULL) {
    
  } else {
    
  }
  permission_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), permission);
  // @@protoc_insertion_point(field_set_allocated:proto.FileActivity.permission)
}

// string read_content = 5;
inline void FileActivity::clear_read_content() {
  read_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileActivity::read_content() const {
  // @@protoc_insertion_point(field_get:proto.FileActivity.read_content)
  return read_content_.GetNoArena();
}
inline void FileActivity::set_read_content(const ::std::string& value) {
  
  read_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.FileActivity.read_content)
}
#if LANG_CXX11
inline void FileActivity::set_read_content(::std::string&& value) {
  
  read_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.FileActivity.read_content)
}
#endif
inline void FileActivity::set_read_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  read_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.FileActivity.read_content)
}
inline void FileActivity::set_read_content(const char* value, size_t size) {
  
  read_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.FileActivity.read_content)
}
inline ::std::string* FileActivity::mutable_read_content() {
  
  // @@protoc_insertion_point(field_mutable:proto.FileActivity.read_content)
  return read_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileActivity::release_read_content() {
  // @@protoc_insertion_point(field_release:proto.FileActivity.read_content)
  
  return read_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileActivity::set_allocated_read_content(::std::string* read_content) {
  if (read_content != NULL) {
    
  } else {
    
  }
  read_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), read_content);
  // @@protoc_insertion_point(field_set_allocated:proto.FileActivity.read_content)
}

// string read_content_size = 6;
inline void FileActivity::clear_read_content_size() {
  read_content_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileActivity::read_content_size() const {
  // @@protoc_insertion_point(field_get:proto.FileActivity.read_content_size)
  return read_content_size_.GetNoArena();
}
inline void FileActivity::set_read_content_size(const ::std::string& value) {
  
  read_content_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.FileActivity.read_content_size)
}
#if LANG_CXX11
inline void FileActivity::set_read_content_size(::std::string&& value) {
  
  read_content_size_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.FileActivity.read_content_size)
}
#endif
inline void FileActivity::set_read_content_size(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  read_content_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.FileActivity.read_content_size)
}
inline void FileActivity::set_read_content_size(const char* value, size_t size) {
  
  read_content_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.FileActivity.read_content_size)
}
inline ::std::string* FileActivity::mutable_read_content_size() {
  
  // @@protoc_insertion_point(field_mutable:proto.FileActivity.read_content_size)
  return read_content_size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileActivity::release_read_content_size() {
  // @@protoc_insertion_point(field_release:proto.FileActivity.read_content_size)
  
  return read_content_size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileActivity::set_allocated_read_content_size(::std::string* read_content_size) {
  if (read_content_size != NULL) {
    
  } else {
    
  }
  read_content_size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), read_content_size);
  // @@protoc_insertion_point(field_set_allocated:proto.FileActivity.read_content_size)
}

// string add_content = 7;
inline void FileActivity::clear_add_content() {
  add_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileActivity::add_content() const {
  // @@protoc_insertion_point(field_get:proto.FileActivity.add_content)
  return add_content_.GetNoArena();
}
inline void FileActivity::set_add_content(const ::std::string& value) {
  
  add_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.FileActivity.add_content)
}
#if LANG_CXX11
inline void FileActivity::set_add_content(::std::string&& value) {
  
  add_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.FileActivity.add_content)
}
#endif
inline void FileActivity::set_add_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  add_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.FileActivity.add_content)
}
inline void FileActivity::set_add_content(const char* value, size_t size) {
  
  add_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.FileActivity.add_content)
}
inline ::std::string* FileActivity::mutable_add_content() {
  
  // @@protoc_insertion_point(field_mutable:proto.FileActivity.add_content)
  return add_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileActivity::release_add_content() {
  // @@protoc_insertion_point(field_release:proto.FileActivity.add_content)
  
  return add_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileActivity::set_allocated_add_content(::std::string* add_content) {
  if (add_content != NULL) {
    
  } else {
    
  }
  add_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), add_content);
  // @@protoc_insertion_point(field_set_allocated:proto.FileActivity.add_content)
}

// int32 add_content_size = 8;
inline void FileActivity::clear_add_content_size() {
  add_content_size_ = 0;
}
inline ::google::protobuf::int32 FileActivity::add_content_size() const {
  // @@protoc_insertion_point(field_get:proto.FileActivity.add_content_size)
  return add_content_size_;
}
inline void FileActivity::set_add_content_size(::google::protobuf::int32 value) {
  
  add_content_size_ = value;
  // @@protoc_insertion_point(field_set:proto.FileActivity.add_content_size)
}

// string remove_content = 9;
inline void FileActivity::clear_remove_content() {
  remove_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileActivity::remove_content() const {
  // @@protoc_insertion_point(field_get:proto.FileActivity.remove_content)
  return remove_content_.GetNoArena();
}
inline void FileActivity::set_remove_content(const ::std::string& value) {
  
  remove_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.FileActivity.remove_content)
}
#if LANG_CXX11
inline void FileActivity::set_remove_content(::std::string&& value) {
  
  remove_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.FileActivity.remove_content)
}
#endif
inline void FileActivity::set_remove_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remove_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.FileActivity.remove_content)
}
inline void FileActivity::set_remove_content(const char* value, size_t size) {
  
  remove_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.FileActivity.remove_content)
}
inline ::std::string* FileActivity::mutable_remove_content() {
  
  // @@protoc_insertion_point(field_mutable:proto.FileActivity.remove_content)
  return remove_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileActivity::release_remove_content() {
  // @@protoc_insertion_point(field_release:proto.FileActivity.remove_content)
  
  return remove_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileActivity::set_allocated_remove_content(::std::string* remove_content) {
  if (remove_content != NULL) {
    
  } else {
    
  }
  remove_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remove_content);
  // @@protoc_insertion_point(field_set_allocated:proto.FileActivity.remove_content)
}

// int32 remove_content_size = 10;
inline void FileActivity::clear_remove_content_size() {
  remove_content_size_ = 0;
}
inline ::google::protobuf::int32 FileActivity::remove_content_size() const {
  // @@protoc_insertion_point(field_get:proto.FileActivity.remove_content_size)
  return remove_content_size_;
}
inline void FileActivity::set_remove_content_size(::google::protobuf::int32 value) {
  
  remove_content_size_ = value;
  // @@protoc_insertion_point(field_set:proto.FileActivity.remove_content_size)
}

// string modify_content = 11;
inline void FileActivity::clear_modify_content() {
  modify_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileActivity::modify_content() const {
  // @@protoc_insertion_point(field_get:proto.FileActivity.modify_content)
  return modify_content_.GetNoArena();
}
inline void FileActivity::set_modify_content(const ::std::string& value) {
  
  modify_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.FileActivity.modify_content)
}
#if LANG_CXX11
inline void FileActivity::set_modify_content(::std::string&& value) {
  
  modify_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.FileActivity.modify_content)
}
#endif
inline void FileActivity::set_modify_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  modify_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.FileActivity.modify_content)
}
inline void FileActivity::set_modify_content(const char* value, size_t size) {
  
  modify_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.FileActivity.modify_content)
}
inline ::std::string* FileActivity::mutable_modify_content() {
  
  // @@protoc_insertion_point(field_mutable:proto.FileActivity.modify_content)
  return modify_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileActivity::release_modify_content() {
  // @@protoc_insertion_point(field_release:proto.FileActivity.modify_content)
  
  return modify_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileActivity::set_allocated_modify_content(::std::string* modify_content) {
  if (modify_content != NULL) {
    
  } else {
    
  }
  modify_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modify_content);
  // @@protoc_insertion_point(field_set_allocated:proto.FileActivity.modify_content)
}

// int32 modify_content_size = 12;
inline void FileActivity::clear_modify_content_size() {
  modify_content_size_ = 0;
}
inline ::google::protobuf::int32 FileActivity::modify_content_size() const {
  // @@protoc_insertion_point(field_get:proto.FileActivity.modify_content_size)
  return modify_content_size_;
}
inline void FileActivity::set_modify_content_size(::google::protobuf::int32 value) {
  
  modify_content_size_ = value;
  // @@protoc_insertion_point(field_set:proto.FileActivity.modify_content_size)
}

// -------------------------------------------------------------------

// SensitivenActivity

// string pid = 1;
inline void SensitivenActivity::clear_pid() {
  pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensitivenActivity::pid() const {
  // @@protoc_insertion_point(field_get:proto.SensitivenActivity.pid)
  return pid_.GetNoArena();
}
inline void SensitivenActivity::set_pid(const ::std::string& value) {
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SensitivenActivity.pid)
}
#if LANG_CXX11
inline void SensitivenActivity::set_pid(::std::string&& value) {
  
  pid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SensitivenActivity.pid)
}
#endif
inline void SensitivenActivity::set_pid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SensitivenActivity.pid)
}
inline void SensitivenActivity::set_pid(const char* value, size_t size) {
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SensitivenActivity.pid)
}
inline ::std::string* SensitivenActivity::mutable_pid() {
  
  // @@protoc_insertion_point(field_mutable:proto.SensitivenActivity.pid)
  return pid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensitivenActivity::release_pid() {
  // @@protoc_insertion_point(field_release:proto.SensitivenActivity.pid)
  
  return pid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensitivenActivity::set_allocated_pid(::std::string* pid) {
  if (pid != NULL) {
    
  } else {
    
  }
  pid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pid);
  // @@protoc_insertion_point(field_set_allocated:proto.SensitivenActivity.pid)
}

// string cmdline = 2;
inline void SensitivenActivity::clear_cmdline() {
  cmdline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensitivenActivity::cmdline() const {
  // @@protoc_insertion_point(field_get:proto.SensitivenActivity.cmdline)
  return cmdline_.GetNoArena();
}
inline void SensitivenActivity::set_cmdline(const ::std::string& value) {
  
  cmdline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SensitivenActivity.cmdline)
}
#if LANG_CXX11
inline void SensitivenActivity::set_cmdline(::std::string&& value) {
  
  cmdline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SensitivenActivity.cmdline)
}
#endif
inline void SensitivenActivity::set_cmdline(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cmdline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SensitivenActivity.cmdline)
}
inline void SensitivenActivity::set_cmdline(const char* value, size_t size) {
  
  cmdline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SensitivenActivity.cmdline)
}
inline ::std::string* SensitivenActivity::mutable_cmdline() {
  
  // @@protoc_insertion_point(field_mutable:proto.SensitivenActivity.cmdline)
  return cmdline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensitivenActivity::release_cmdline() {
  // @@protoc_insertion_point(field_release:proto.SensitivenActivity.cmdline)
  
  return cmdline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensitivenActivity::set_allocated_cmdline(::std::string* cmdline) {
  if (cmdline != NULL) {
    
  } else {
    
  }
  cmdline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmdline);
  // @@protoc_insertion_point(field_set_allocated:proto.SensitivenActivity.cmdline)
}

// string exe = 3;
inline void SensitivenActivity::clear_exe() {
  exe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensitivenActivity::exe() const {
  // @@protoc_insertion_point(field_get:proto.SensitivenActivity.exe)
  return exe_.GetNoArena();
}
inline void SensitivenActivity::set_exe(const ::std::string& value) {
  
  exe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SensitivenActivity.exe)
}
#if LANG_CXX11
inline void SensitivenActivity::set_exe(::std::string&& value) {
  
  exe_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SensitivenActivity.exe)
}
#endif
inline void SensitivenActivity::set_exe(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SensitivenActivity.exe)
}
inline void SensitivenActivity::set_exe(const char* value, size_t size) {
  
  exe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SensitivenActivity.exe)
}
inline ::std::string* SensitivenActivity::mutable_exe() {
  
  // @@protoc_insertion_point(field_mutable:proto.SensitivenActivity.exe)
  return exe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensitivenActivity::release_exe() {
  // @@protoc_insertion_point(field_release:proto.SensitivenActivity.exe)
  
  return exe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensitivenActivity::set_allocated_exe(::std::string* exe) {
  if (exe != NULL) {
    
  } else {
    
  }
  exe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exe);
  // @@protoc_insertion_point(field_set_allocated:proto.SensitivenActivity.exe)
}

// string cwd = 4;
inline void SensitivenActivity::clear_cwd() {
  cwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensitivenActivity::cwd() const {
  // @@protoc_insertion_point(field_get:proto.SensitivenActivity.cwd)
  return cwd_.GetNoArena();
}
inline void SensitivenActivity::set_cwd(const ::std::string& value) {
  
  cwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SensitivenActivity.cwd)
}
#if LANG_CXX11
inline void SensitivenActivity::set_cwd(::std::string&& value) {
  
  cwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SensitivenActivity.cwd)
}
#endif
inline void SensitivenActivity::set_cwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SensitivenActivity.cwd)
}
inline void SensitivenActivity::set_cwd(const char* value, size_t size) {
  
  cwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SensitivenActivity.cwd)
}
inline ::std::string* SensitivenActivity::mutable_cwd() {
  
  // @@protoc_insertion_point(field_mutable:proto.SensitivenActivity.cwd)
  return cwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensitivenActivity::release_cwd() {
  // @@protoc_insertion_point(field_release:proto.SensitivenActivity.cwd)
  
  return cwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensitivenActivity::set_allocated_cwd(::std::string* cwd) {
  if (cwd != NULL) {
    
  } else {
    
  }
  cwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cwd);
  // @@protoc_insertion_point(field_set_allocated:proto.SensitivenActivity.cwd)
}

// string root = 5;
inline void SensitivenActivity::clear_root() {
  root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensitivenActivity::root() const {
  // @@protoc_insertion_point(field_get:proto.SensitivenActivity.root)
  return root_.GetNoArena();
}
inline void SensitivenActivity::set_root(const ::std::string& value) {
  
  root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SensitivenActivity.root)
}
#if LANG_CXX11
inline void SensitivenActivity::set_root(::std::string&& value) {
  
  root_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SensitivenActivity.root)
}
#endif
inline void SensitivenActivity::set_root(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SensitivenActivity.root)
}
inline void SensitivenActivity::set_root(const char* value, size_t size) {
  
  root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SensitivenActivity.root)
}
inline ::std::string* SensitivenActivity::mutable_root() {
  
  // @@protoc_insertion_point(field_mutable:proto.SensitivenActivity.root)
  return root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensitivenActivity::release_root() {
  // @@protoc_insertion_point(field_release:proto.SensitivenActivity.root)
  
  return root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensitivenActivity::set_allocated_root(::std::string* root) {
  if (root != NULL) {
    
  } else {
    
  }
  root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root);
  // @@protoc_insertion_point(field_set_allocated:proto.SensitivenActivity.root)
}

// string ppid = 6;
inline void SensitivenActivity::clear_ppid() {
  ppid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensitivenActivity::ppid() const {
  // @@protoc_insertion_point(field_get:proto.SensitivenActivity.ppid)
  return ppid_.GetNoArena();
}
inline void SensitivenActivity::set_ppid(const ::std::string& value) {
  
  ppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SensitivenActivity.ppid)
}
#if LANG_CXX11
inline void SensitivenActivity::set_ppid(::std::string&& value) {
  
  ppid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SensitivenActivity.ppid)
}
#endif
inline void SensitivenActivity::set_ppid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SensitivenActivity.ppid)
}
inline void SensitivenActivity::set_ppid(const char* value, size_t size) {
  
  ppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SensitivenActivity.ppid)
}
inline ::std::string* SensitivenActivity::mutable_ppid() {
  
  // @@protoc_insertion_point(field_mutable:proto.SensitivenActivity.ppid)
  return ppid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensitivenActivity::release_ppid() {
  // @@protoc_insertion_point(field_release:proto.SensitivenActivity.ppid)
  
  return ppid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensitivenActivity::set_allocated_ppid(::std::string* ppid) {
  if (ppid != NULL) {
    
  } else {
    
  }
  ppid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ppid);
  // @@protoc_insertion_point(field_set_allocated:proto.SensitivenActivity.ppid)
}

// string user = 7;
inline void SensitivenActivity::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensitivenActivity::user() const {
  // @@protoc_insertion_point(field_get:proto.SensitivenActivity.user)
  return user_.GetNoArena();
}
inline void SensitivenActivity::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SensitivenActivity.user)
}
#if LANG_CXX11
inline void SensitivenActivity::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SensitivenActivity.user)
}
#endif
inline void SensitivenActivity::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SensitivenActivity.user)
}
inline void SensitivenActivity::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SensitivenActivity.user)
}
inline ::std::string* SensitivenActivity::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:proto.SensitivenActivity.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensitivenActivity::release_user() {
  // @@protoc_insertion_point(field_release:proto.SensitivenActivity.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensitivenActivity::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:proto.SensitivenActivity.user)
}

// string syscall = 8;
inline void SensitivenActivity::clear_syscall() {
  syscall_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensitivenActivity::syscall() const {
  // @@protoc_insertion_point(field_get:proto.SensitivenActivity.syscall)
  return syscall_.GetNoArena();
}
inline void SensitivenActivity::set_syscall(const ::std::string& value) {
  
  syscall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SensitivenActivity.syscall)
}
#if LANG_CXX11
inline void SensitivenActivity::set_syscall(::std::string&& value) {
  
  syscall_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SensitivenActivity.syscall)
}
#endif
inline void SensitivenActivity::set_syscall(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  syscall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SensitivenActivity.syscall)
}
inline void SensitivenActivity::set_syscall(const char* value, size_t size) {
  
  syscall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SensitivenActivity.syscall)
}
inline ::std::string* SensitivenActivity::mutable_syscall() {
  
  // @@protoc_insertion_point(field_mutable:proto.SensitivenActivity.syscall)
  return syscall_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensitivenActivity::release_syscall() {
  // @@protoc_insertion_point(field_release:proto.SensitivenActivity.syscall)
  
  return syscall_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensitivenActivity::set_allocated_syscall(::std::string* syscall) {
  if (syscall != NULL) {
    
  } else {
    
  }
  syscall_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), syscall);
  // @@protoc_insertion_point(field_set_allocated:proto.SensitivenActivity.syscall)
}

// -------------------------------------------------------------------

// ProcessActivity

// string pid = 1;
inline void ProcessActivity::clear_pid() {
  pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessActivity::pid() const {
  // @@protoc_insertion_point(field_get:proto.ProcessActivity.pid)
  return pid_.GetNoArena();
}
inline void ProcessActivity::set_pid(const ::std::string& value) {
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ProcessActivity.pid)
}
#if LANG_CXX11
inline void ProcessActivity::set_pid(::std::string&& value) {
  
  pid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ProcessActivity.pid)
}
#endif
inline void ProcessActivity::set_pid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ProcessActivity.pid)
}
inline void ProcessActivity::set_pid(const char* value, size_t size) {
  
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ProcessActivity.pid)
}
inline ::std::string* ProcessActivity::mutable_pid() {
  
  // @@protoc_insertion_point(field_mutable:proto.ProcessActivity.pid)
  return pid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessActivity::release_pid() {
  // @@protoc_insertion_point(field_release:proto.ProcessActivity.pid)
  
  return pid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessActivity::set_allocated_pid(::std::string* pid) {
  if (pid != NULL) {
    
  } else {
    
  }
  pid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pid);
  // @@protoc_insertion_point(field_set_allocated:proto.ProcessActivity.pid)
}

// string cmdline = 2;
inline void ProcessActivity::clear_cmdline() {
  cmdline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessActivity::cmdline() const {
  // @@protoc_insertion_point(field_get:proto.ProcessActivity.cmdline)
  return cmdline_.GetNoArena();
}
inline void ProcessActivity::set_cmdline(const ::std::string& value) {
  
  cmdline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ProcessActivity.cmdline)
}
#if LANG_CXX11
inline void ProcessActivity::set_cmdline(::std::string&& value) {
  
  cmdline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ProcessActivity.cmdline)
}
#endif
inline void ProcessActivity::set_cmdline(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cmdline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ProcessActivity.cmdline)
}
inline void ProcessActivity::set_cmdline(const char* value, size_t size) {
  
  cmdline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ProcessActivity.cmdline)
}
inline ::std::string* ProcessActivity::mutable_cmdline() {
  
  // @@protoc_insertion_point(field_mutable:proto.ProcessActivity.cmdline)
  return cmdline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessActivity::release_cmdline() {
  // @@protoc_insertion_point(field_release:proto.ProcessActivity.cmdline)
  
  return cmdline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessActivity::set_allocated_cmdline(::std::string* cmdline) {
  if (cmdline != NULL) {
    
  } else {
    
  }
  cmdline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmdline);
  // @@protoc_insertion_point(field_set_allocated:proto.ProcessActivity.cmdline)
}

// string exe = 3;
inline void ProcessActivity::clear_exe() {
  exe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessActivity::exe() const {
  // @@protoc_insertion_point(field_get:proto.ProcessActivity.exe)
  return exe_.GetNoArena();
}
inline void ProcessActivity::set_exe(const ::std::string& value) {
  
  exe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ProcessActivity.exe)
}
#if LANG_CXX11
inline void ProcessActivity::set_exe(::std::string&& value) {
  
  exe_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ProcessActivity.exe)
}
#endif
inline void ProcessActivity::set_exe(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ProcessActivity.exe)
}
inline void ProcessActivity::set_exe(const char* value, size_t size) {
  
  exe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ProcessActivity.exe)
}
inline ::std::string* ProcessActivity::mutable_exe() {
  
  // @@protoc_insertion_point(field_mutable:proto.ProcessActivity.exe)
  return exe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessActivity::release_exe() {
  // @@protoc_insertion_point(field_release:proto.ProcessActivity.exe)
  
  return exe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessActivity::set_allocated_exe(::std::string* exe) {
  if (exe != NULL) {
    
  } else {
    
  }
  exe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exe);
  // @@protoc_insertion_point(field_set_allocated:proto.ProcessActivity.exe)
}

// string cwd = 4;
inline void ProcessActivity::clear_cwd() {
  cwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessActivity::cwd() const {
  // @@protoc_insertion_point(field_get:proto.ProcessActivity.cwd)
  return cwd_.GetNoArena();
}
inline void ProcessActivity::set_cwd(const ::std::string& value) {
  
  cwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ProcessActivity.cwd)
}
#if LANG_CXX11
inline void ProcessActivity::set_cwd(::std::string&& value) {
  
  cwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ProcessActivity.cwd)
}
#endif
inline void ProcessActivity::set_cwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ProcessActivity.cwd)
}
inline void ProcessActivity::set_cwd(const char* value, size_t size) {
  
  cwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ProcessActivity.cwd)
}
inline ::std::string* ProcessActivity::mutable_cwd() {
  
  // @@protoc_insertion_point(field_mutable:proto.ProcessActivity.cwd)
  return cwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessActivity::release_cwd() {
  // @@protoc_insertion_point(field_release:proto.ProcessActivity.cwd)
  
  return cwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessActivity::set_allocated_cwd(::std::string* cwd) {
  if (cwd != NULL) {
    
  } else {
    
  }
  cwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cwd);
  // @@protoc_insertion_point(field_set_allocated:proto.ProcessActivity.cwd)
}

// string root = 5;
inline void ProcessActivity::clear_root() {
  root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessActivity::root() const {
  // @@protoc_insertion_point(field_get:proto.ProcessActivity.root)
  return root_.GetNoArena();
}
inline void ProcessActivity::set_root(const ::std::string& value) {
  
  root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ProcessActivity.root)
}
#if LANG_CXX11
inline void ProcessActivity::set_root(::std::string&& value) {
  
  root_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ProcessActivity.root)
}
#endif
inline void ProcessActivity::set_root(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ProcessActivity.root)
}
inline void ProcessActivity::set_root(const char* value, size_t size) {
  
  root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ProcessActivity.root)
}
inline ::std::string* ProcessActivity::mutable_root() {
  
  // @@protoc_insertion_point(field_mutable:proto.ProcessActivity.root)
  return root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessActivity::release_root() {
  // @@protoc_insertion_point(field_release:proto.ProcessActivity.root)
  
  return root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessActivity::set_allocated_root(::std::string* root) {
  if (root != NULL) {
    
  } else {
    
  }
  root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root);
  // @@protoc_insertion_point(field_set_allocated:proto.ProcessActivity.root)
}

// string ppid = 6;
inline void ProcessActivity::clear_ppid() {
  ppid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessActivity::ppid() const {
  // @@protoc_insertion_point(field_get:proto.ProcessActivity.ppid)
  return ppid_.GetNoArena();
}
inline void ProcessActivity::set_ppid(const ::std::string& value) {
  
  ppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ProcessActivity.ppid)
}
#if LANG_CXX11
inline void ProcessActivity::set_ppid(::std::string&& value) {
  
  ppid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ProcessActivity.ppid)
}
#endif
inline void ProcessActivity::set_ppid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ProcessActivity.ppid)
}
inline void ProcessActivity::set_ppid(const char* value, size_t size) {
  
  ppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ProcessActivity.ppid)
}
inline ::std::string* ProcessActivity::mutable_ppid() {
  
  // @@protoc_insertion_point(field_mutable:proto.ProcessActivity.ppid)
  return ppid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessActivity::release_ppid() {
  // @@protoc_insertion_point(field_release:proto.ProcessActivity.ppid)
  
  return ppid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessActivity::set_allocated_ppid(::std::string* ppid) {
  if (ppid != NULL) {
    
  } else {
    
  }
  ppid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ppid);
  // @@protoc_insertion_point(field_set_allocated:proto.ProcessActivity.ppid)
}

// string user = 7;
inline void ProcessActivity::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessActivity::user() const {
  // @@protoc_insertion_point(field_get:proto.ProcessActivity.user)
  return user_.GetNoArena();
}
inline void ProcessActivity::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ProcessActivity.user)
}
#if LANG_CXX11
inline void ProcessActivity::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ProcessActivity.user)
}
#endif
inline void ProcessActivity::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ProcessActivity.user)
}
inline void ProcessActivity::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ProcessActivity.user)
}
inline ::std::string* ProcessActivity::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:proto.ProcessActivity.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessActivity::release_user() {
  // @@protoc_insertion_point(field_release:proto.ProcessActivity.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessActivity::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:proto.ProcessActivity.user)
}

// string permission = 8;
inline void ProcessActivity::clear_permission() {
  permission_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProcessActivity::permission() const {
  // @@protoc_insertion_point(field_get:proto.ProcessActivity.permission)
  return permission_.GetNoArena();
}
inline void ProcessActivity::set_permission(const ::std::string& value) {
  
  permission_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ProcessActivity.permission)
}
#if LANG_CXX11
inline void ProcessActivity::set_permission(::std::string&& value) {
  
  permission_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ProcessActivity.permission)
}
#endif
inline void ProcessActivity::set_permission(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  permission_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ProcessActivity.permission)
}
inline void ProcessActivity::set_permission(const char* value, size_t size) {
  
  permission_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ProcessActivity.permission)
}
inline ::std::string* ProcessActivity::mutable_permission() {
  
  // @@protoc_insertion_point(field_mutable:proto.ProcessActivity.permission)
  return permission_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcessActivity::release_permission() {
  // @@protoc_insertion_point(field_release:proto.ProcessActivity.permission)
  
  return permission_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessActivity::set_allocated_permission(::std::string* permission) {
  if (permission != NULL) {
    
  } else {
    
  }
  permission_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), permission);
  // @@protoc_insertion_point(field_set_allocated:proto.ProcessActivity.permission)
}

// bool main_process = 9;
inline void ProcessActivity::clear_main_process() {
  main_process_ = false;
}
inline bool ProcessActivity::main_process() const {
  // @@protoc_insertion_point(field_get:proto.ProcessActivity.main_process)
  return main_process_;
}
inline void ProcessActivity::set_main_process(bool value) {
  
  main_process_ = value;
  // @@protoc_insertion_point(field_set:proto.ProcessActivity.main_process)
}

// repeated .proto.NetworkActivity network_activities = 10;
inline int ProcessActivity::network_activities_size() const {
  return network_activities_.size();
}
inline void ProcessActivity::clear_network_activities() {
  network_activities_.Clear();
}
inline ::proto::NetworkActivity* ProcessActivity::mutable_network_activities(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ProcessActivity.network_activities)
  return network_activities_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::NetworkActivity >*
ProcessActivity::mutable_network_activities() {
  // @@protoc_insertion_point(field_mutable_list:proto.ProcessActivity.network_activities)
  return &network_activities_;
}
inline const ::proto::NetworkActivity& ProcessActivity::network_activities(int index) const {
  // @@protoc_insertion_point(field_get:proto.ProcessActivity.network_activities)
  return network_activities_.Get(index);
}
inline ::proto::NetworkActivity* ProcessActivity::add_network_activities() {
  // @@protoc_insertion_point(field_add:proto.ProcessActivity.network_activities)
  return network_activities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::NetworkActivity >&
ProcessActivity::network_activities() const {
  // @@protoc_insertion_point(field_list:proto.ProcessActivity.network_activities)
  return network_activities_;
}

// repeated .proto.FileActivity file_activities = 11;
inline int ProcessActivity::file_activities_size() const {
  return file_activities_.size();
}
inline void ProcessActivity::clear_file_activities() {
  file_activities_.Clear();
}
inline ::proto::FileActivity* ProcessActivity::mutable_file_activities(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ProcessActivity.file_activities)
  return file_activities_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::FileActivity >*
ProcessActivity::mutable_file_activities() {
  // @@protoc_insertion_point(field_mutable_list:proto.ProcessActivity.file_activities)
  return &file_activities_;
}
inline const ::proto::FileActivity& ProcessActivity::file_activities(int index) const {
  // @@protoc_insertion_point(field_get:proto.ProcessActivity.file_activities)
  return file_activities_.Get(index);
}
inline ::proto::FileActivity* ProcessActivity::add_file_activities() {
  // @@protoc_insertion_point(field_add:proto.ProcessActivity.file_activities)
  return file_activities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::FileActivity >&
ProcessActivity::file_activities() const {
  // @@protoc_insertion_point(field_list:proto.ProcessActivity.file_activities)
  return file_activities_;
}

// repeated .proto.ProcessActivity child_process_activities = 12;
inline int ProcessActivity::child_process_activities_size() const {
  return child_process_activities_.size();
}
inline void ProcessActivity::clear_child_process_activities() {
  child_process_activities_.Clear();
}
inline ::proto::ProcessActivity* ProcessActivity::mutable_child_process_activities(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ProcessActivity.child_process_activities)
  return child_process_activities_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ProcessActivity >*
ProcessActivity::mutable_child_process_activities() {
  // @@protoc_insertion_point(field_mutable_list:proto.ProcessActivity.child_process_activities)
  return &child_process_activities_;
}
inline const ::proto::ProcessActivity& ProcessActivity::child_process_activities(int index) const {
  // @@protoc_insertion_point(field_get:proto.ProcessActivity.child_process_activities)
  return child_process_activities_.Get(index);
}
inline ::proto::ProcessActivity* ProcessActivity::add_child_process_activities() {
  // @@protoc_insertion_point(field_add:proto.ProcessActivity.child_process_activities)
  return child_process_activities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ProcessActivity >&
ProcessActivity::child_process_activities() const {
  // @@protoc_insertion_point(field_list:proto.ProcessActivity.child_process_activities)
  return child_process_activities_;
}

// repeated .proto.SensitivenActivity sensitive_activities = 13;
inline int ProcessActivity::sensitive_activities_size() const {
  return sensitive_activities_.size();
}
inline void ProcessActivity::clear_sensitive_activities() {
  sensitive_activities_.Clear();
}
inline ::proto::SensitivenActivity* ProcessActivity::mutable_sensitive_activities(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ProcessActivity.sensitive_activities)
  return sensitive_activities_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::SensitivenActivity >*
ProcessActivity::mutable_sensitive_activities() {
  // @@protoc_insertion_point(field_mutable_list:proto.ProcessActivity.sensitive_activities)
  return &sensitive_activities_;
}
inline const ::proto::SensitivenActivity& ProcessActivity::sensitive_activities(int index) const {
  // @@protoc_insertion_point(field_get:proto.ProcessActivity.sensitive_activities)
  return sensitive_activities_.Get(index);
}
inline ::proto::SensitivenActivity* ProcessActivity::add_sensitive_activities() {
  // @@protoc_insertion_point(field_add:proto.ProcessActivity.sensitive_activities)
  return sensitive_activities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::SensitivenActivity >&
ProcessActivity::sensitive_activities() const {
  // @@protoc_insertion_point(field_list:proto.ProcessActivity.sensitive_activities)
  return sensitive_activities_;
}

// -------------------------------------------------------------------

// DynamicAnalysis

// .proto.AnalysisType analysis_type = 1;
inline void DynamicAnalysis::clear_analysis_type() {
  analysis_type_ = 0;
}
inline ::proto::AnalysisType DynamicAnalysis::analysis_type() const {
  // @@protoc_insertion_point(field_get:proto.DynamicAnalysis.analysis_type)
  return static_cast< ::proto::AnalysisType >(analysis_type_);
}
inline void DynamicAnalysis::set_analysis_type(::proto::AnalysisType value) {
  
  analysis_type_ = value;
  // @@protoc_insertion_point(field_set:proto.DynamicAnalysis.analysis_type)
}

// .proto.ExecutionType exe_type = 2;
inline void DynamicAnalysis::clear_exe_type() {
  exe_type_ = 0;
}
inline ::proto::ExecutionType DynamicAnalysis::exe_type() const {
  // @@protoc_insertion_point(field_get:proto.DynamicAnalysis.exe_type)
  return static_cast< ::proto::ExecutionType >(exe_type_);
}
inline void DynamicAnalysis::set_exe_type(::proto::ExecutionType value) {
  
  exe_type_ = value;
  // @@protoc_insertion_point(field_set:proto.DynamicAnalysis.exe_type)
}

// string exe_user = 3;
inline void DynamicAnalysis::clear_exe_user() {
  exe_user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DynamicAnalysis::exe_user() const {
  // @@protoc_insertion_point(field_get:proto.DynamicAnalysis.exe_user)
  return exe_user_.GetNoArena();
}
inline void DynamicAnalysis::set_exe_user(const ::std::string& value) {
  
  exe_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.DynamicAnalysis.exe_user)
}
#if LANG_CXX11
inline void DynamicAnalysis::set_exe_user(::std::string&& value) {
  
  exe_user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.DynamicAnalysis.exe_user)
}
#endif
inline void DynamicAnalysis::set_exe_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exe_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.DynamicAnalysis.exe_user)
}
inline void DynamicAnalysis::set_exe_user(const char* value, size_t size) {
  
  exe_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.DynamicAnalysis.exe_user)
}
inline ::std::string* DynamicAnalysis::mutable_exe_user() {
  
  // @@protoc_insertion_point(field_mutable:proto.DynamicAnalysis.exe_user)
  return exe_user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DynamicAnalysis::release_exe_user() {
  // @@protoc_insertion_point(field_release:proto.DynamicAnalysis.exe_user)
  
  return exe_user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DynamicAnalysis::set_allocated_exe_user(::std::string* exe_user) {
  if (exe_user != NULL) {
    
  } else {
    
  }
  exe_user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exe_user);
  // @@protoc_insertion_point(field_set_allocated:proto.DynamicAnalysis.exe_user)
}

// string timestamp = 4;
inline void DynamicAnalysis::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DynamicAnalysis::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.DynamicAnalysis.timestamp)
  return timestamp_.GetNoArena();
}
inline void DynamicAnalysis::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.DynamicAnalysis.timestamp)
}
#if LANG_CXX11
inline void DynamicAnalysis::set_timestamp(::std::string&& value) {
  
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.DynamicAnalysis.timestamp)
}
#endif
inline void DynamicAnalysis::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.DynamicAnalysis.timestamp)
}
inline void DynamicAnalysis::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.DynamicAnalysis.timestamp)
}
inline ::std::string* DynamicAnalysis::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:proto.DynamicAnalysis.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DynamicAnalysis::release_timestamp() {
  // @@protoc_insertion_point(field_release:proto.DynamicAnalysis.timestamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DynamicAnalysis::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:proto.DynamicAnalysis.timestamp)
}

// string end_timestamp = 5;
inline void DynamicAnalysis::clear_end_timestamp() {
  end_timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DynamicAnalysis::end_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.DynamicAnalysis.end_timestamp)
  return end_timestamp_.GetNoArena();
}
inline void DynamicAnalysis::set_end_timestamp(const ::std::string& value) {
  
  end_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.DynamicAnalysis.end_timestamp)
}
#if LANG_CXX11
inline void DynamicAnalysis::set_end_timestamp(::std::string&& value) {
  
  end_timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.DynamicAnalysis.end_timestamp)
}
#endif
inline void DynamicAnalysis::set_end_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.DynamicAnalysis.end_timestamp)
}
inline void DynamicAnalysis::set_end_timestamp(const char* value, size_t size) {
  
  end_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.DynamicAnalysis.end_timestamp)
}
inline ::std::string* DynamicAnalysis::mutable_end_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:proto.DynamicAnalysis.end_timestamp)
  return end_timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DynamicAnalysis::release_end_timestamp() {
  // @@protoc_insertion_point(field_release:proto.DynamicAnalysis.end_timestamp)
  
  return end_timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DynamicAnalysis::set_allocated_end_timestamp(::std::string* end_timestamp) {
  if (end_timestamp != NULL) {
    
  } else {
    
  }
  end_timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_timestamp);
  // @@protoc_insertion_point(field_set_allocated:proto.DynamicAnalysis.end_timestamp)
}

// .proto.ProcessActivity process_activity = 6;
inline bool DynamicAnalysis::has_process_activity() const {
  return this != internal_default_instance() && process_activity_ != NULL;
}
inline void DynamicAnalysis::clear_process_activity() {
  if (GetArenaNoVirtual() == NULL && process_activity_ != NULL) {
    delete process_activity_;
  }
  process_activity_ = NULL;
}
inline const ::proto::ProcessActivity& DynamicAnalysis::_internal_process_activity() const {
  return *process_activity_;
}
inline const ::proto::ProcessActivity& DynamicAnalysis::process_activity() const {
  const ::proto::ProcessActivity* p = process_activity_;
  // @@protoc_insertion_point(field_get:proto.DynamicAnalysis.process_activity)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ProcessActivity*>(
      &::proto::_ProcessActivity_default_instance_);
}
inline ::proto::ProcessActivity* DynamicAnalysis::release_process_activity() {
  // @@protoc_insertion_point(field_release:proto.DynamicAnalysis.process_activity)
  
  ::proto::ProcessActivity* temp = process_activity_;
  process_activity_ = NULL;
  return temp;
}
inline ::proto::ProcessActivity* DynamicAnalysis::mutable_process_activity() {
  
  if (process_activity_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::ProcessActivity>(GetArenaNoVirtual());
    process_activity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.DynamicAnalysis.process_activity)
  return process_activity_;
}
inline void DynamicAnalysis::set_allocated_process_activity(::proto::ProcessActivity* process_activity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete process_activity_;
  }
  if (process_activity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      process_activity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, process_activity, submessage_arena);
    }
    
  } else {
    
  }
  process_activity_ = process_activity;
  // @@protoc_insertion_point(field_set_allocated:proto.DynamicAnalysis.process_activity)
}

// -------------------------------------------------------------------

// StaticAnalysis

// .proto.AnalysisType analysis_type = 1;
inline void StaticAnalysis::clear_analysis_type() {
  analysis_type_ = 0;
}
inline ::proto::AnalysisType StaticAnalysis::analysis_type() const {
  // @@protoc_insertion_point(field_get:proto.StaticAnalysis.analysis_type)
  return static_cast< ::proto::AnalysisType >(analysis_type_);
}
inline void StaticAnalysis::set_analysis_type(::proto::AnalysisType value) {
  
  analysis_type_ = value;
  // @@protoc_insertion_point(field_set:proto.StaticAnalysis.analysis_type)
}

// string timestamp = 2;
inline void StaticAnalysis::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StaticAnalysis::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.StaticAnalysis.timestamp)
  return timestamp_.GetNoArena();
}
inline void StaticAnalysis::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.StaticAnalysis.timestamp)
}
#if LANG_CXX11
inline void StaticAnalysis::set_timestamp(::std::string&& value) {
  
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.StaticAnalysis.timestamp)
}
#endif
inline void StaticAnalysis::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.StaticAnalysis.timestamp)
}
inline void StaticAnalysis::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.StaticAnalysis.timestamp)
}
inline ::std::string* StaticAnalysis::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:proto.StaticAnalysis.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StaticAnalysis::release_timestamp() {
  // @@protoc_insertion_point(field_release:proto.StaticAnalysis.timestamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StaticAnalysis::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:proto.StaticAnalysis.timestamp)
}

// .proto.ModuleStatic code_activity = 3;
inline bool StaticAnalysis::has_code_activity() const {
  return this != internal_default_instance() && code_activity_ != NULL;
}
inline const ::proto::ModuleStatic& StaticAnalysis::_internal_code_activity() const {
  return *code_activity_;
}
inline const ::proto::ModuleStatic& StaticAnalysis::code_activity() const {
  const ::proto::ModuleStatic* p = code_activity_;
  // @@protoc_insertion_point(field_get:proto.StaticAnalysis.code_activity)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ModuleStatic*>(
      &::proto::_ModuleStatic_default_instance_);
}
inline ::proto::ModuleStatic* StaticAnalysis::release_code_activity() {
  // @@protoc_insertion_point(field_release:proto.StaticAnalysis.code_activity)
  
  ::proto::ModuleStatic* temp = code_activity_;
  code_activity_ = NULL;
  return temp;
}
inline ::proto::ModuleStatic* StaticAnalysis::mutable_code_activity() {
  
  if (code_activity_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::ModuleStatic>(GetArenaNoVirtual());
    code_activity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.StaticAnalysis.code_activity)
  return code_activity_;
}
inline void StaticAnalysis::set_allocated_code_activity(::proto::ModuleStatic* code_activity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(code_activity_);
  }
  if (code_activity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      code_activity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, code_activity, submessage_arena);
    }
    
  } else {
    
  }
  code_activity_ = code_activity;
  // @@protoc_insertion_point(field_set_allocated:proto.StaticAnalysis.code_activity)
}

// -------------------------------------------------------------------

// ConcolicAnalysis

// .proto.AnalysisType analysis_type = 1;
inline void ConcolicAnalysis::clear_analysis_type() {
  analysis_type_ = 0;
}
inline ::proto::AnalysisType ConcolicAnalysis::analysis_type() const {
  // @@protoc_insertion_point(field_get:proto.ConcolicAnalysis.analysis_type)
  return static_cast< ::proto::AnalysisType >(analysis_type_);
}
inline void ConcolicAnalysis::set_analysis_type(::proto::AnalysisType value) {
  
  analysis_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ConcolicAnalysis.analysis_type)
}

// .proto.ExecutionType exe_type = 2;
inline void ConcolicAnalysis::clear_exe_type() {
  exe_type_ = 0;
}
inline ::proto::ExecutionType ConcolicAnalysis::exe_type() const {
  // @@protoc_insertion_point(field_get:proto.ConcolicAnalysis.exe_type)
  return static_cast< ::proto::ExecutionType >(exe_type_);
}
inline void ConcolicAnalysis::set_exe_type(::proto::ExecutionType value) {
  
  exe_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ConcolicAnalysis.exe_type)
}

// string exe_user = 3;
inline void ConcolicAnalysis::clear_exe_user() {
  exe_user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConcolicAnalysis::exe_user() const {
  // @@protoc_insertion_point(field_get:proto.ConcolicAnalysis.exe_user)
  return exe_user_.GetNoArena();
}
inline void ConcolicAnalysis::set_exe_user(const ::std::string& value) {
  
  exe_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ConcolicAnalysis.exe_user)
}
#if LANG_CXX11
inline void ConcolicAnalysis::set_exe_user(::std::string&& value) {
  
  exe_user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ConcolicAnalysis.exe_user)
}
#endif
inline void ConcolicAnalysis::set_exe_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exe_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ConcolicAnalysis.exe_user)
}
inline void ConcolicAnalysis::set_exe_user(const char* value, size_t size) {
  
  exe_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ConcolicAnalysis.exe_user)
}
inline ::std::string* ConcolicAnalysis::mutable_exe_user() {
  
  // @@protoc_insertion_point(field_mutable:proto.ConcolicAnalysis.exe_user)
  return exe_user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConcolicAnalysis::release_exe_user() {
  // @@protoc_insertion_point(field_release:proto.ConcolicAnalysis.exe_user)
  
  return exe_user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConcolicAnalysis::set_allocated_exe_user(::std::string* exe_user) {
  if (exe_user != NULL) {
    
  } else {
    
  }
  exe_user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exe_user);
  // @@protoc_insertion_point(field_set_allocated:proto.ConcolicAnalysis.exe_user)
}

// string timestamp = 4;
inline void ConcolicAnalysis::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConcolicAnalysis::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.ConcolicAnalysis.timestamp)
  return timestamp_.GetNoArena();
}
inline void ConcolicAnalysis::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ConcolicAnalysis.timestamp)
}
#if LANG_CXX11
inline void ConcolicAnalysis::set_timestamp(::std::string&& value) {
  
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ConcolicAnalysis.timestamp)
}
#endif
inline void ConcolicAnalysis::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ConcolicAnalysis.timestamp)
}
inline void ConcolicAnalysis::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ConcolicAnalysis.timestamp)
}
inline ::std::string* ConcolicAnalysis::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:proto.ConcolicAnalysis.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConcolicAnalysis::release_timestamp() {
  // @@protoc_insertion_point(field_release:proto.ConcolicAnalysis.timestamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConcolicAnalysis::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:proto.ConcolicAnalysis.timestamp)
}

// string end_timestamp = 5;
inline void ConcolicAnalysis::clear_end_timestamp() {
  end_timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConcolicAnalysis::end_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.ConcolicAnalysis.end_timestamp)
  return end_timestamp_.GetNoArena();
}
inline void ConcolicAnalysis::set_end_timestamp(const ::std::string& value) {
  
  end_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ConcolicAnalysis.end_timestamp)
}
#if LANG_CXX11
inline void ConcolicAnalysis::set_end_timestamp(::std::string&& value) {
  
  end_timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ConcolicAnalysis.end_timestamp)
}
#endif
inline void ConcolicAnalysis::set_end_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ConcolicAnalysis.end_timestamp)
}
inline void ConcolicAnalysis::set_end_timestamp(const char* value, size_t size) {
  
  end_timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ConcolicAnalysis.end_timestamp)
}
inline ::std::string* ConcolicAnalysis::mutable_end_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:proto.ConcolicAnalysis.end_timestamp)
  return end_timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConcolicAnalysis::release_end_timestamp() {
  // @@protoc_insertion_point(field_release:proto.ConcolicAnalysis.end_timestamp)
  
  return end_timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConcolicAnalysis::set_allocated_end_timestamp(::std::string* end_timestamp) {
  if (end_timestamp != NULL) {
    
  } else {
    
  }
  end_timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_timestamp);
  // @@protoc_insertion_point(field_set_allocated:proto.ConcolicAnalysis.end_timestamp)
}

// .proto.ProcessActivity process_activity = 6;
inline bool ConcolicAnalysis::has_process_activity() const {
  return this != internal_default_instance() && process_activity_ != NULL;
}
inline void ConcolicAnalysis::clear_process_activity() {
  if (GetArenaNoVirtual() == NULL && process_activity_ != NULL) {
    delete process_activity_;
  }
  process_activity_ = NULL;
}
inline const ::proto::ProcessActivity& ConcolicAnalysis::_internal_process_activity() const {
  return *process_activity_;
}
inline const ::proto::ProcessActivity& ConcolicAnalysis::process_activity() const {
  const ::proto::ProcessActivity* p = process_activity_;
  // @@protoc_insertion_point(field_get:proto.ConcolicAnalysis.process_activity)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ProcessActivity*>(
      &::proto::_ProcessActivity_default_instance_);
}
inline ::proto::ProcessActivity* ConcolicAnalysis::release_process_activity() {
  // @@protoc_insertion_point(field_release:proto.ConcolicAnalysis.process_activity)
  
  ::proto::ProcessActivity* temp = process_activity_;
  process_activity_ = NULL;
  return temp;
}
inline ::proto::ProcessActivity* ConcolicAnalysis::mutable_process_activity() {
  
  if (process_activity_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::ProcessActivity>(GetArenaNoVirtual());
    process_activity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.ConcolicAnalysis.process_activity)
  return process_activity_;
}
inline void ConcolicAnalysis::set_allocated_process_activity(::proto::ProcessActivity* process_activity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete process_activity_;
  }
  if (process_activity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      process_activity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, process_activity, submessage_arena);
    }
    
  } else {
    
  }
  process_activity_ = process_activity;
  // @@protoc_insertion_point(field_set_allocated:proto.ConcolicAnalysis.process_activity)
}

// -------------------------------------------------------------------

// AnalysisResult

// .proto.PackageInfo package_info = 1;
inline bool AnalysisResult::has_package_info() const {
  return this != internal_default_instance() && package_info_ != NULL;
}
inline const ::proto::PackageInfo& AnalysisResult::_internal_package_info() const {
  return *package_info_;
}
inline const ::proto::PackageInfo& AnalysisResult::package_info() const {
  const ::proto::PackageInfo* p = package_info_;
  // @@protoc_insertion_point(field_get:proto.AnalysisResult.package_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::PackageInfo*>(
      &::proto::_PackageInfo_default_instance_);
}
inline ::proto::PackageInfo* AnalysisResult::release_package_info() {
  // @@protoc_insertion_point(field_release:proto.AnalysisResult.package_info)
  
  ::proto::PackageInfo* temp = package_info_;
  package_info_ = NULL;
  return temp;
}
inline ::proto::PackageInfo* AnalysisResult::mutable_package_info() {
  
  if (package_info_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::PackageInfo>(GetArenaNoVirtual());
    package_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.AnalysisResult.package_info)
  return package_info_;
}
inline void AnalysisResult::set_allocated_package_info(::proto::PackageInfo* package_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(package_info_);
  }
  if (package_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      package_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, package_info, submessage_arena);
    }
    
  } else {
    
  }
  package_info_ = package_info;
  // @@protoc_insertion_point(field_set_allocated:proto.AnalysisResult.package_info)
}

// repeated .proto.DynamicAnalysis dynamic_results = 2;
inline int AnalysisResult::dynamic_results_size() const {
  return dynamic_results_.size();
}
inline void AnalysisResult::clear_dynamic_results() {
  dynamic_results_.Clear();
}
inline ::proto::DynamicAnalysis* AnalysisResult::mutable_dynamic_results(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AnalysisResult.dynamic_results)
  return dynamic_results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::DynamicAnalysis >*
AnalysisResult::mutable_dynamic_results() {
  // @@protoc_insertion_point(field_mutable_list:proto.AnalysisResult.dynamic_results)
  return &dynamic_results_;
}
inline const ::proto::DynamicAnalysis& AnalysisResult::dynamic_results(int index) const {
  // @@protoc_insertion_point(field_get:proto.AnalysisResult.dynamic_results)
  return dynamic_results_.Get(index);
}
inline ::proto::DynamicAnalysis* AnalysisResult::add_dynamic_results() {
  // @@protoc_insertion_point(field_add:proto.AnalysisResult.dynamic_results)
  return dynamic_results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::DynamicAnalysis >&
AnalysisResult::dynamic_results() const {
  // @@protoc_insertion_point(field_list:proto.AnalysisResult.dynamic_results)
  return dynamic_results_;
}

// repeated .proto.StaticAnalysis static_results = 3;
inline int AnalysisResult::static_results_size() const {
  return static_results_.size();
}
inline void AnalysisResult::clear_static_results() {
  static_results_.Clear();
}
inline ::proto::StaticAnalysis* AnalysisResult::mutable_static_results(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AnalysisResult.static_results)
  return static_results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::StaticAnalysis >*
AnalysisResult::mutable_static_results() {
  // @@protoc_insertion_point(field_mutable_list:proto.AnalysisResult.static_results)
  return &static_results_;
}
inline const ::proto::StaticAnalysis& AnalysisResult::static_results(int index) const {
  // @@protoc_insertion_point(field_get:proto.AnalysisResult.static_results)
  return static_results_.Get(index);
}
inline ::proto::StaticAnalysis* AnalysisResult::add_static_results() {
  // @@protoc_insertion_point(field_add:proto.AnalysisResult.static_results)
  return static_results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::StaticAnalysis >&
AnalysisResult::static_results() const {
  // @@protoc_insertion_point(field_list:proto.AnalysisResult.static_results)
  return static_results_;
}

// repeated .proto.ConcolicAnalysis concolic_results = 4;
inline int AnalysisResult::concolic_results_size() const {
  return concolic_results_.size();
}
inline void AnalysisResult::clear_concolic_results() {
  concolic_results_.Clear();
}
inline ::proto::ConcolicAnalysis* AnalysisResult::mutable_concolic_results(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AnalysisResult.concolic_results)
  return concolic_results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ConcolicAnalysis >*
AnalysisResult::mutable_concolic_results() {
  // @@protoc_insertion_point(field_mutable_list:proto.AnalysisResult.concolic_results)
  return &concolic_results_;
}
inline const ::proto::ConcolicAnalysis& AnalysisResult::concolic_results(int index) const {
  // @@protoc_insertion_point(field_get:proto.AnalysisResult.concolic_results)
  return concolic_results_.Get(index);
}
inline ::proto::ConcolicAnalysis* AnalysisResult::add_concolic_results() {
  // @@protoc_insertion_point(field_add:proto.AnalysisResult.concolic_results)
  return concolic_results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ConcolicAnalysis >&
AnalysisResult::concolic_results() const {
  // @@protoc_insertion_point(field_list:proto.AnalysisResult.concolic_results)
  return concolic_results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::ExecutionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ExecutionType>() {
  return ::proto::ExecutionType_descriptor();
}
template <> struct is_proto_enum< ::proto::AnalysisType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::AnalysisType>() {
  return ::proto::AnalysisType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_behavior_2eproto
