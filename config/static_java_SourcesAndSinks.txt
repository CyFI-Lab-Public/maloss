<java.nio.channels.AsynchronousChannelGroup: java.nio.channels.AsynchronousChannelGroup withCachedThreadPool(java.util.concurrent.ExecutorService,int)> -> _SINK_
<java.nio.channels.AsynchronousChannelGroup: java.nio.channels.AsynchronousChannelGroup withFixedThreadPool(int,java.util.concurrent.ThreadFactory)> -> _SINK_
<java.nio.channels.AsynchronousChannelGroup: java.nio.channels.AsynchronousChannelGroup withThreadPool(java.util.concurrent.ExecutorService)> -> _SINK_
<java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel open(java.nio.file.Path,java.nio.file.OpenOption...)> -> _SINK_
<java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel open(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute...)> -> _SINK_
<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future read(java.nio.ByteBuffer,long)> -> _BOTH_
<java.nio.channels.AsynchronousFileChannel: void read(java.nio.ByteBuffer,long,A,java.nio.channels.CompletionHandler)> -> _BOTH_
<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future write(java.nio.ByteBuffer,long)> -> _SINK_
<java.nio.channels.AsynchronousFileChannel: void write(java.nio.ByteBuffer,long,A,java.nio.channels.CompletionHandler)> -> _SINK_
<java.nio.channels.AsynchronousServerSocketChannel: java.nio.channels.AsynchronousServerSocketChannel open()> -> _SINK_
<java.nio.channels.AsynchronousServerSocketChannel: java.nio.channels.AsynchronousServerSocketChannel open(java.nio.channels.AsynchronousChannelGroup)> -> _SINK_
<java.nio.channels.AsynchronousServerSocketChannel: java.util.concurrent.Future accept()> -> _SINK_
<java.nio.channels.AsynchronousServerSocketChannel: void accept(A,java.nio.channels.CompletionHandler)> -> _SINK_
<java.nio.channels.AsynchronousSocketChannel: java.util.concurrent.Future read(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.AsynchronousSocketChannel: void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,A,java.nio.channels.CompletionHandler)> -> _SINK_
<java.nio.channels.AsynchronousSocketChannel: void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,A,java.nio.channels.CompletionHandler)> -> _SINK_
<java.nio.channels.AsynchronousSocketChannel: void read(java.nio.ByteBuffer,A,java.nio.channels.CompletionHandler)> -> _SINK_
<java.nio.channels.AsynchronousSocketChannel: java.nio.channels.AsynchronousSocketChannel open()> -> _SINK_
<java.nio.channels.AsynchronousSocketChannel: java.nio.channels.AsynchronousSocketChannel open(java.nio.channels.AsynchronousChannelGroup)> -> _SINK_
<java.nio.channels.AsynchronousSocketChannel: java.util.concurrent.Future write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.AsynchronousSocketChannel: void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,A,java.nio.channels.CompletionHandler)> -> _SINK_
<java.nio.channels.AsynchronousSocketChannel: void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,A,java.nio.channels.CompletionHandler)> -> _SINK_
<java.nio.channels.AsynchronousSocketChannel: void write(java.nio.ByteBuffer,A,java.nio.channels.CompletionHandler)> -> _SINK_
<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()> -> _SINK_
<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open(java.net.ProtocolFamily)> -> _SINK_
<java.nio.channels.DatagramChannel: int read(java.nio.ByteBuffer)> -> _BOTH_
<java.nio.channels.DatagramChannel: long read(java.nio.ByteBuffer[])> -> _BOTH_
<java.nio.channels.DatagramChannel: long read(java.nio.ByteBuffer[],int,int)> -> _BOTH_
<java.nio.channels.DatagramChannel: java.net.SocketAddress receive(java.nio.ByteBuffer)> -> _BOTH_
<java.nio.channels.DatagramChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[])> -> _SINK_
<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[],int,int)> -> _SINK_
<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel.MapMode,long,long)> -> _SINK_
<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer)> -> _SOURCE_
<java.nio.channels.FileChannel: long read(java.nio.ByteBuffer[])> -> _SOURCE_
<java.nio.channels.FileChannel: long read(java.nio.ByteBuffer[],int,int)> -> _SOURCE_
<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer,long)> -> _SOURCE_
<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.FileChannel: long write(java.nio.ByteBuffer[])> -> _SINK_
<java.nio.channels.FileChannel: long write(java.nio.ByteBuffer[],int,int)> -> _SINK_
<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer,long)> -> _SINK_
<java.nio.channels.FileChannel: long transferTo(long,long,java.nio.channels.WritableByteChannel)> -> _BOTH_
<java.nio.channels.FileChannel: long transferFrom(java.nio.channels.ReadableByteChannel,long,long)> -> _BOTH_
<java.nio.channels.Pipe: java.nio.channels.Pipe.SinkChannel sink()> -> _SINK_
<java.nio.channels.Pipe: java.nio.channels.Pipe.SourceChannel source()> -> _SOURCE_
<java.nio.file.Files: long copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption...)> -> _SINK_
<java.nio.file.Files: long copy(java.nio.file.Path,java.io.OutputStream)> -> _SINK_
<java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption...)> -> _SINK_
<java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,byte[],java.nio.file.OpenOption...)> -> _SINK_
<java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,java.lang.Iterable,java.nio.charset.Charset,java.nio.file.OpenOption...)> -> _SINK_
<java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,java.lang.Iterable,java.nio.file.OpenOption...)> -> _SINK_
<java.nio.file.Files: java.nio.file.Path readSymbolicLink(java.nio.file.Path)> -> _SOURCE_
<java.nio.file.Files: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption...)> -> _SOURCE_
<java.nio.file.Files: java.util.Map readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption...)> -> _SOURCE_
<java.nio.file.Files: java.util.List readAllLines(java.nio.file.Path)> -> _SOURCE_
<java.nio.file.Files: java.util.List readAllLines(java.nio.file.Path,java.nio.charset.Charset)> -> _SOURCE_
<java.nio.file.Files: byte[] readAllBytes(java.nio.file.Path)> -> _SOURCE_
<java.nio.file.Files: java.nio.file.Path move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption...)> -> _SINK_
<java.nio.file.Files: void delete(java.nio.file.Path)> -> _SINK_
<java.nio.file.Files: boolean deleteIfExists(java.nio.file.Path)> -> _SINK_
<javax.crypto.CipherInputStream: int read()> -> _BOTH_
<javax.crypto.CipherInputStream: int read(byte[])> -> _BOTH_
<javax.crypto.CipherInputStream: int read(byte[],int,int)> -> _BOTH_
<javax.crypto.CipherOutputStream: void write(byte[])> -> _SINK_
<javax.crypto.CipherOutputStream: void write(byte[],int,int)> -> _SINK_
<javax.crypto.CipherOutputStream: void write(int)> -> _SINK_
<javax.crypto.CipherOutputStream: void flush()> -> _SINK_
<java.sql.PreparedStatement: boolean execute()> -> _SINK_
<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()> -> _SINK_
<java.sql.PreparedStatement: int executeUpdate()> -> _SINK_
<java.sql.PreparedStatement: long executeLargeUpdate()> -> _SINK_
<java.sql.PreparedStatement: void addBatch()> -> _SINK_
<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)> -> _SINK_
<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int)> -> _SINK_
<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int[])> -> _SINK_
<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int)> -> _SINK_
<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,int,int,int)> -> _SINK_
<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String,java.lang.String[])> -> _SINK_
<java.sql.Connection: java.sql.CallableStatement prepareCall(java.lang.String)> -> _SINK_
<java.sql.Connection: java.sql.CallableStatement prepareCall(java.lang.String,int,int)> -> _SINK_
<java.sql.Connection: java.sql.CallableStatement prepareCall(java.lang.String,int,int,int)> -> _SINK_
<javax.xml.xpath.XPath: java.lang.String evaluate(java.lang.String,java.lang.Object)> -> _SOURCE_
<javax.xml.xpath.XPath: java.lang.Object evaluate(java.lang.String,java.lang.Object,javax.xml.namespace.QName)> -> _SOURCE_
<javax.xml.xpath.XPath: java.lang.String evaluate(java.lang.String,org.xml.sax.InputSource)> -> _SOURCE_
<javax.xml.xpath.XPath: java.lang.Object evaluate(java.lang.String,org.xml.sax.InputSource,javax.xml.namespace.QName)> -> _SOURCE_
<javax.xml.xpath.XPathExpression: java.lang.String evaluate(java.lang.Object)> -> _SOURCE_
<javax.xml.xpath.XPathExpression: java.lang.Object evaluate(java.lang.Object,javax.xml.namespace.QName)> -> _SOURCE_
<javax.xml.xpath.XPathExpression: java.lang.String evaluate(org.xml.sax.InputSource)> -> _SOURCE_
<javax.xml.xpath.XPathExpression: java.lang.Object evaluate(org.xml.sax.InputSource,javax.xml.namespace.QName)> -> _SOURCE_
<javax.xml.xpath.XPath: javax.xml.xpath.XPathExpression compile(java.lang.String)> -> _SINK_
<java.net.URLConnection: java.io.InputStream getInputStream()> -> _BOTH_
<java.net.URLConnection: void connect()> -> _SINK_
<java.net.URLConnection: java.io.OutputStream getOutputStream()> -> _SINK_
<java.net.URL: java.io.InputStream openStream()> -> _BOTH_
<java.net.URL: java.lang.Object getContent()> -> _BOTH_
<java.net.URL: java.lang.Object getContent(java.lang.Class[])> -> _BOTH_
<java.net.URL: <init>(java.lang.String)> -> _SINK_
<java.net.URL: <init>(java.lang.String,java.lang.String,int,java.lang.String)> -> _SINK_
<java.net.URL: <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)> -> _SINK_
<java.net.URL: <init>(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.net.URL: <init>(java.net.URL,java.lang.String)> -> _SINK_
<java.net.URL: <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)> -> _SINK_
<java.net.Socket: void connect(java.net.SocketAddress)> -> _SINK_
<java.net.Socket: void connect(java.net.SocketAddress,int)> -> _SINK_
<java.net.Authenticator: java.lang.String getRequestingHost()> -> _SOURCE_
<java.net.Authenticator: int getRequestingPort()> -> _SOURCE_
<java.net.DatagramPacket: void setData(byte[])> -> _SINK_
<java.net.DatagramPacket: void setData(byte[],int,int)> -> _SINK_
<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)> -> _SINK_
<java.net.DatagramSocket: void bind(java.net.SocketAddress)> -> _SINK_
<java.net.DatagramSocket: void connect(java.net.InetAddress,int)> -> _SINK_
<java.net.DatagramSocket: void connect(java.net.SocketAddress)> -> _SINK_
<java.net.DatagramSocket: void receive(java.net.DatagramPacket)> -> _SINK_
<java.net.DatagramSocket: void send(java.net.DatagramPacket)> -> _SINK_
<java.net.DatagramSocketImpl: void connect(java.net.InetAddress,int)> -> _SINK_
<java.net.HttpURLConnection: java.lang.String getResponseMessage()> -> _SOURCE_
<java.net.JarURLConnection: java.util.jar.JarEntry getJarEntry()> -> _SOURCE_
<java.net.JarURLConnection: <init>(java.net.URL)> -> _SINK_
<java.net.JarURLConnection: java.util.jar.JarFile getJarFile()> -> _SOURCE_
<java.net.MulticastSocket: void send(java.net.DatagramPacket,byte)> -> _SINK_
<java.net.PasswordAuthentication: char[] getPassword()> -> _SOURCE_
<java.net.PasswordAuthentication: java.lang.String getUserName()> -> _SOURCE_
<java.net.ServerSocket: java.net.Socket accept()> -> _SINK_
<java.net.ServerSocket: void bind(java.net.SocketAddress)> -> _SINK_
<java.net.ServerSocket: void bind(java.net.SocketAddress,int)> -> _SINK_
<java.net.Socket: void bind(java.net.SocketAddress)> -> _SINK_
<java.net.Socket: java.io.InputStream getInputStream()> -> _SOURCE_
<java.net.Socket: java.io.OutputStream getOutputStream()> -> _SINK_
<java.net.Socket: void sendUrgentData(int)> -> _SINK_
<java.net.URL: java.lang.Object getContent()> -> _SOURCE_
<java.net.URL: java.lang.Object getContent(java.lang.Class[])> -> _SOURCE_
<java.net.URL: java.net.URLConnection openConnection()> -> _SINK_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SINK_
<java.net.URL: java.io.InputStream openStream()> -> _SINK_
<java.net.URLConnection: <init>(java.net.URL)> -> _SINK_
<java.net.URLConnection: java.lang.Object getContent()> -> _SOURCE_
<java.net.URLConnection: java.lang.Object getContent(java.lang.Class[])> -> _SOURCE_
<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL)> -> _SINK_
<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)> -> _SINK_
<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)> -> _SINK_
<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.util.Locale: java.lang.String getCountry()> -> _SOURCE_
<java.util.Calendar: java.util.TimeZone getTimeZone()> -> _SOURCE_
<java.security.AccessController: void checkPermission(java.security.Permission)> -> _SOURCE_
<java.security.AccessController: T doPrivileged(java.security.PrivilegedAction)> -> _SINK_
<java.security.AccessController: T doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)> -> _SINK_
<java.security.AccessController: T doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext,java.security.Permission...)> -> _SINK_
<java.security.AccessController: T doPrivileged(java.security.PrivilegedExceptionAction)> -> _SINK_
<java.security.AccessController: T doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)> -> _SINK_
<java.security.AccessController: T doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext,java.security.Permission...)> -> _SINK_
<java.security.DigestInputStream: int read()> -> _BOTH_
<java.security.DigestInputStream: int read(byte[],int,int)> -> _BOTH_
<java.security.DigestOutputStream: void write(byte[],int,int)> -> _SINK_
<java.security.DigestOutputStream: void write(int)> -> _SINK_
<java.security.KeyPair: java.security.PrivateKey getPrivate()> -> _SOURCE_
<java.security.KeyStore: void store(java.io.OutputStream,char[])> -> _SINK_
<java.security.KeyStore: void store(java.security.KeyStore.LoadStoreParameter)> -> _SINK_
<java.security.KeyStore: void setEntry(java.lang.String,java.security.KeyStore.Entry,java.security.KeyStore.ProtectionParameter)> -> _SINK_
<java.security.KeyStore: void setKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[])> -> _SINK_
<java.security.KeyStore: void setKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])> -> _SINK_
<java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)> -> _SINK_
<java.security.KeyStore: void load(java.io.InputStream,char[])> -> _SINK_
<java.security.KeyStore: void load(java.security.KeyStore.LoadStoreParameter)> -> _SINK_
<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])> -> _SOURCE_
<java.security.KeyStore: java.security.KeyStore.Entry getEntry(java.lang.String,java.security.KeyStore.ProtectionParameter)> -> _SOURCE_
<java.security.KeyStore: java.security.cert.Certificate getCertificateChain(java.lang.String)> -> _SOURCE_
<java.security.KeyStore: java.lang.String getCertificateAlias(java.security.cert.Certificate)> -> _SOURCE_
<java.security.KeyStore: java.security.cert.Certificate getCertificate(java.lang.String)> -> _SOURCE_
<java.security.Signer: java.security.PrivateKey getPrivateKey()> -> _SOURCE_
<java.security.Signer: void setKeyPair(java.security.KeyPair)> -> _SINK_
<java.lang.ProcessBuilder: java.lang.Process start()> -> _SINK_
<java.lang.ProcessBuilder: java.util.List startPipeline(java.util.List)> -> _SINK_
<java.lang.ProcessBuilder: java.util.List command()> -> _BOTH_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.lang.String...)> -> _BOTH_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.util.List)> -> _BOTH_
<java.lang.ProcessBuilder: java.io.File directory()> -> _BOTH_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder directory(java.io.File)> -> _BOTH_
<java.lang.ProcessBuilder: java.util.Map environment()> -> _SOURCE_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder inheritIO()> -> _SINK_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder.Redirect redirectInput()> -> _SINK_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectInput(java.io.File)> -> _SINK_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectInput(java.lang.ProcessBuilder.Redirect)> -> _SINK_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder.Redirect redirectOutput()> -> _SINK_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectOutput(java.io.File)> -> _SINK_
<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectOutput(java.lang.ProcessBuilder.Redirect)> -> _SINK_
<java.lang.ProcessBuilder: <init>(java.lang.String...)> -> _SINK_
<java.lang.ProcessBuilder: <init>(java.util.List)> -> _SINK_
<java.lang.Process: long pid()> -> _SOURCE_
<java.lang.System: java.io.Console console()> -> _SINK_
<java.lang.System: java.util.Properties getProperties()> -> _SOURCE_
<java.lang.System: java.util.Map getenv()> -> _SOURCE_
<java.lang.System: java.lang.String getenv(java.lang.String)> -> _SOURCE_
<java.lang.System: java.lang.String getProperty(java.lang.String)> -> _SOURCE_
<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)> -> _SOURCE_
<java.lang.System: void load(java.lang.String)> -> _SINK_
<java.lang.System: void loadLibrary(java.lang.String)> -> _SINK_
<java.lang.System: java.lang.SecurityManager getSecurityManager()> -> _SOURCE_
<java.lang.System: java.nio.channels.Channel inheritedChannel()> -> _BOTH_
<java.lang.System: void setProperties(java.util.Properties)> -> _SINK_
<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)> -> _SINK_
<java.lang.System: void setSecurityManager(java.lang.SecurityManager)> -> _SINK_
<java.lang.System: void setOut(java.io.PrintStream)> -> _SINK_
<java.lang.System: void setIn(java.io.InputStream)> -> _BOTH_
<java.lang.Thread: void start()> -> _SINK_
<java.lang.Thread: void run()> -> _SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String)> -> _SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String[])> -> _SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[])> -> _SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)> -> _SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[])> -> _SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[],java.io.File)> -> _SINK_
<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)> -> _SINK_
<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader,javax.script.Bindings)> -> _SINK_
<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader,javax.script.ScriptContext)> -> _SINK_
<javax.script.ScriptEngine: java.lang.Object eval(java.lang.String)> -> _SINK_
<javax.script.ScriptEngine: java.lang.Object eval(java.lang.String,javax.script.Bindings)> -> _SINK_
<javax.script.ScriptEngine: java.lang.Object eval(java.lang.String,javax.script.ScriptContext)> -> _SINK_
<java.io.OutputStream: void write(byte[])> -> _SINK_
<java.io.OutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.OutputStream: void write(int)> -> _SINK_
<java.io.FileOutputStream: void write(byte[])> -> _SINK_
<java.io.FileOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.FileOutputStream: void write(int)> -> _SINK_
<java.io.Writer: void write(char[])> -> _SINK_
<java.io.Writer: void write(char[],int,int)> -> _SINK_
<java.io.Writer: void write(int)> -> _SINK_
<java.io.Writer: void write(java.lang.String)> -> _SINK_
<java.io.Writer: void write(java.lang.String,int,int)> -> _SINK_
<java.io.Writer: java.io.Writer append(char)> -> _SINK_
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)> -> _SINK_
<java.io.Writer: java.io.Writer append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.InputStream: int read()> -> _SOURCE_
<java.io.InputStream: int read(byte[])> -> _SOURCE_
<java.io.InputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.InputStream: int readNBytes(byte[],int,int)> -> _SOURCE_
<java.io.InputStream: byte[] readAllBytes()> -> _SOURCE_
<java.io.InputStream: long transferTo(java.io.OutputStream)> -> _SINK_
<java.io.BufferedReader: int read()> -> _SOURCE_
<java.io.BufferedReader: int read(char[],int,int)> -> _SOURCE_
<java.io.BufferedReader: java.util.stream.Stream lines()> -> _SOURCE_
<java.io.BufferedReader: java.lang.String readLine()> -> _SOURCE_
<java.io.BufferedWriter: void write(char[],int,int)> -> _SINK_
<java.io.BufferedWriter: void write(int)> -> _SINK_
<java.io.BufferedWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> -> _SINK_
<java.io.CharArrayWriter: java.io.CharArrayWriter append(char)> -> _SINK_
<java.io.CharArrayWriter: java.io.CharArrayWriter append(java.lang.CharSequence)> -> _SINK_
<java.io.CharArrayWriter: java.io.CharArrayWriter append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.Console: java.io.Console format(java.lang.String,java.lang.Object...)> -> _SINK_
<java.io.Console: java.io.Console printf(java.lang.String,java.lang.Object...)> -> _SINK_
<java.io.Console: java.lang.String readLine()> -> _SOURCE_
<java.io.Console: java.lang.String readLine(java.lang.String,java.lang.Object...)> -> _SOURCE_
<java.io.Console: char[] readPassword()> -> _SOURCE_
<java.io.Console: char[] readPassword(java.lang.String,java.lang.Object...)> -> _SOURCE_
<java.io.DataInputStream: void readFully(byte[])> -> _SOURCE_
<java.io.DataInputStream: void readFully(byte[],int,int)> -> _SOURCE_
<java.io.DataInputStream: int readUnsignedShort()> -> _SOURCE_
<java.io.DataInputStream: int readUnsignedByte()> -> _SOURCE_
<java.io.DataInputStream: short readShort()> -> _SOURCE_
<java.io.DataInputStream: long readLong()> -> _SOURCE_
<java.io.DataInputStream: java.lang.String readLine()> -> _SOURCE_
<java.io.DataInputStream: int readInt()> -> _SOURCE_
<java.io.DataInputStream: float readFloat()> -> _SOURCE_
<java.io.DataInputStream: double readDouble()> -> _SOURCE_
<java.io.DataInputStream: char readChar()> -> _SOURCE_
<java.io.DataInputStream: byte readByte()> -> _SOURCE_
<java.io.DataInputStream: boolean readBoolean()> -> _SOURCE_
<java.io.DataInputStream: int read(byte[])> -> _SOURCE_
<java.io.DataInputStream: int read(byte[],int,int)> -> _SOURCE_
<java.io.DataInputStream: java.lang.String readUTF()> -> _SOURCE_
<java.io.DataInputStream: java.lang.String readUTF(java.io.DataInput)> -> _SOURCE_
<java.io.DataOutputStream: void writeBoolean(boolean)> -> _SINK_
<java.io.DataOutputStream: void writeByte(int)> -> _SINK_
<java.io.DataOutputStream: void writeBytes(java.lang.String)> -> _SINK_
<java.io.DataOutputStream: void writeChar(int)> -> _SINK_
<java.io.DataOutputStream: void writeChars(java.lang.String)> -> _SINK_
<java.io.DataOutputStream: void writeFloat(float)> -> _SINK_
<java.io.DataOutputStream: void writeInt(int)> -> _SINK_
<java.io.DataOutputStream: void writeLong(long)> -> _SINK_
<java.io.DataOutputStream: void writeShort(int)> -> _SINK_
<java.io.DataOutputStream: void writeUTF(java.lang.String)> -> _SINK_
<java.io.File: boolean createNewFile()> -> _SINK_
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)> -> _SINK_
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)> -> _SINK_
<java.io.File: boolean delete()> -> _SINK_
<java.io.File: boolean renameTo(java.io.File)> -> _SINK_
<java.io.File: boolean setExecutable(boolean)> -> _SINK_
<java.io.File: boolean setExecutable(boolean,boolean)> -> _SINK_
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()> -> _SOURCE_
<java.io.FileInputStream: java.io.FileDescriptor getFD()> -> _SOURCE_
<java.io.Writer: void flush()> -> _SINK_
<java.io.Reader: int read()> -> _SOURCE_
<java.io.Reader: int read(char[])> -> _SOURCE_
<java.io.Reader: int read(char[],int,int)> -> _SOURCE_
<java.io.Reader: int read(java.nio.CharBuffer)> -> _SOURCE_
<java.io.RandomAccessFile: void readFully(byte[])> -> _SOURCE_
<java.io.RandomAccessFile: void readFully(byte[],int,int)> -> _SOURCE_
<java.io.RandomAccessFile: boolean readBoolean()> -> _SOURCE_
<java.io.RandomAccessFile: char readChar()> -> _SOURCE_
<java.io.RandomAccessFile: double readDouble()> -> _SOURCE_
<java.io.RandomAccessFile: long readLong()> -> _SOURCE_
<java.io.RandomAccessFile: int readInt()> -> _SOURCE_
<java.io.RandomAccessFile: short readShort()> -> _SOURCE_
<java.io.RandomAccessFile: float readFloat()> -> _SOURCE_
<java.io.RandomAccessFile: int readUnsignedByte()> -> _SOURCE_
<java.io.RandomAccessFile: int readUnsignedShort()> -> _SOURCE_
<java.io.RandomAccessFile: java.lang.String readUTF()> -> _SOURCE_
<java.io.ObjectInputStream: java.lang.Object readObject()> -> _SOURCE_
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)> -> _SINK_
<java.io.PipedInputStream: void receive(int)> -> _SOURCE_
<java.io.LineNumberReader: java.lang.String readLine()> -> _SOURCE_
<java.io.LineNumberReader: int read()> -> _SOURCE_
<java.io.LineNumberReader: int read(char[],int,int)> -> _SOURCE_
<java.io.PrintStream: <init>(java.io.File)> -> _SINK_
<java.io.PrintStream: <init>(java.io.File,java.lang.String)> -> _SINK_
<java.io.PrintStream: <init>(java.io.File,java.nio.charset.Charset)> -> _SINK_
<java.io.PrintStream: <init>(java.io.OutputStream)> -> _SINK_
<java.io.PrintStream: <init>(java.io.OutputStream,boolean)> -> _SINK_
<java.io.PrintStream: <init>(java.io.OutputStream,boolean,java.lang.String)> -> _SINK_
<java.io.PrintStream: <init>(java.io.OutputStream,boolean,java.nio.charset.Charset)> -> _SINK_
<java.io.PrintStream: <init>(java.lang.String)> -> _SINK_
<java.io.PrintStream: <init>(java.lang.String,java.lang.String)> -> _SINK_
<java.io.PrintStream: <init>(java.lang.String,java.nio.charset.Charset)> -> _SINK_
<java.io.PrintStream: java.io.PrintStream append(char)> -> _SINK_
<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)> -> _SINK_
<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.PrintStream: void print(boolean)> -> _SINK_
<java.io.PrintStream: void print(char)> -> _SINK_
<java.io.PrintStream: void print(char[])> -> _SINK_
<java.io.PrintStream: void print(double)> -> _SINK_
<java.io.PrintStream: void print(float)> -> _SINK_
<java.io.PrintStream: void print(int)> -> _SINK_
<java.io.PrintStream: void print(long)> -> _SINK_
<java.io.PrintStream: void print(java.lang.Object)> -> _SINK_
<java.io.PrintStream: void print(java.lang.String)> -> _SINK_
<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object...)> -> _SINK_
<java.io.PrintStream: java.io.PrintStream printf(java.util.Locale,java.lang.String,java.lang.Object...)> -> _SINK_
<java.io.PrintStream: void println()> -> _SINK_
<java.io.PrintStream: void println(boolean)> -> _SINK_
<java.io.PrintStream: void println(char)> -> _SINK_
<java.io.PrintStream: void println(char[])> -> _SINK_
<java.io.PrintStream: void println(double)> -> _SINK_
<java.io.PrintStream: void println(float)> -> _SINK_
<java.io.PrintStream: void println(int)> -> _SINK_
<java.io.PrintStream: void println(long)> -> _SINK_
<java.io.PrintStream: void println(java.lang.Object)> -> _SINK_
<java.io.PrintStream: void println(java.lang.String)> -> _SINK_
<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object...)> -> _SINK_
<java.io.PrintStream: java.io.PrintStream format(java.util.Locale,java.lang.String,java.lang.Object...)> -> _SINK_
<java.io.PrintStream: void write(byte[],int,int)> -> _SINK_
<java.io.PrintStream: void write(int)> -> _SINK_
<java.io.PrintWriter: <init>(java.io.File)> -> _SINK_
<java.io.PrintWriter: <init>(java.io.File,java.lang.String)> -> _SINK_
<java.io.PrintWriter: <init>(java.io.File,java.nio.charset.Charset)> -> _SINK_
<java.io.PrintWriter: <init>(java.io.OutputStream)> -> _SINK_
<java.io.PrintWriter: <init>(java.io.OutputStream,boolean)> -> _SINK_
<java.io.PrintWriter: <init>(java.io.OutputStream,boolean,java.nio.charset.Charset)> -> _SINK_
<java.io.PrintWriter: <init>(java.io.Writer)> -> _SINK_
<java.io.PrintWriter: <init>(java.io.Writer,boolean)> -> _SINK_
<java.io.PrintWriter: <init>(java.lang.String)> -> _SINK_
<java.io.PrintWriter: <init>(java.lang.String,java.lang.String)> -> _SINK_
<java.io.PrintWriter: <init>(java.lang.String,java.nio.charset.Charset)> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter append(char)> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.PrintWriter: void print(boolean)> -> _SINK_
<java.io.PrintWriter: void print(char)> -> _SINK_
<java.io.PrintWriter: void print(char[])> -> _SINK_
<java.io.PrintWriter: void print(double)> -> _SINK_
<java.io.PrintWriter: void print(float)> -> _SINK_
<java.io.PrintWriter: void print(int)> -> _SINK_
<java.io.PrintWriter: void print(long)> -> _SINK_
<java.io.PrintWriter: void print(java.lang.Object)> -> _SINK_
<java.io.PrintWriter: void print(java.lang.String)> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object...)> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter printf(java.util.Locale,java.lang.String,java.lang.Object...)> -> _SINK_
<java.io.PrintWriter: void println()> -> _SINK_
<java.io.PrintWriter: void println(boolean)> -> _SINK_
<java.io.PrintWriter: void println(char)> -> _SINK_
<java.io.PrintWriter: void println(char[])> -> _SINK_
<java.io.PrintWriter: void println(double)> -> _SINK_
<java.io.PrintWriter: void println(float)> -> _SINK_
<java.io.PrintWriter: void println(int)> -> _SINK_
<java.io.PrintWriter: void println(long)> -> _SINK_
<java.io.PrintWriter: void println(java.lang.Object)> -> _SINK_
<java.io.PrintWriter: void println(java.lang.String)> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter format(java.lang.String,java.lang.Object...)> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter format(java.util.Locale,java.lang.String,java.lang.Object...)> -> _SINK_
<java.io.PrintWriter: void write(char[])> -> _SINK_
<java.io.PrintWriter: void write(char[],int,int)> -> _SINK_
<java.io.PrintWriter: void write(int)> -> _SINK_
<java.io.PrintWriter: void write(java.lang.String)> -> _SINK_
<java.io.PrintWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.FileWriter: <init>(java.io.File)> -> _SINK_
<java.io.FileWriter: <init>(java.io.FileDescriptor)> -> _SINK_
<java.io.FileWriter: <init>(java.io.File,boolean)> -> _SINK_
<java.io.FileWriter: <init>(java.lang.String)> -> _SINK_
<java.io.FileWriter: <init>(java.lang.String,boolean)> -> _SINK_
<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()> -> _SOURCE_
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)> -> _SOURCE_
<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()> -> _SOURCE_

<android.location.Location: double getLatitude()> -> _SOURCE_
<android.location.Location: double getLongitude()> -> _SOURCE_
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getDeviceId()> android.permission.READ_PHONE_STATE -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()> android.permission.READ_PHONE_STATE -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()> android.permission.READ_PHONE_STATE -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getLine1Number()> android.permission.READ_PHONE_STATE -> _SOURCE_
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)> -> _SINK_
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
% Covered by the EasyTaintWrapper given that the HttpEntity is tainted
%<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)> -> _SOURCE_
%<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity,java.lang.String)> -> _SOURCE_
%<org.apache.http.util.EntityUtils: byte[] toByteArray(org.apache.http.HttpEntity)> -> _SOURCE_
%<org.apache.http.util.EntityUtils: java.lang.String getContentCharSet(org.apache.http.HttpEntity)> -> _SOURCE_
% add Activity.getIntent() as source instead of the next methods to avoid duplicate results.
%<android.content.Intent: java.lang.String getAction()> -> _SOURCE_
%<android.content.Intent: boolean[] getBooleanArrayExtra(java.lang.String)> -> _SOURCE_
%<android.content.Intent: boolean getBooleanExtra(java.lang.String, boolean)> -> _SOURCE_
%<android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)> -> _SOURCE_
%<android.content.Intent: byte[] getByteArrayExtra(java.lang.String)> -> _SOURCE_
%<android.content.Intent: byte getByteExtra(java.lang.String, byte)> -> _SOURCE_
%<android.content.Intent: java.util.Set getCategories()> -> _SOURCE_
%<android.content.Intent: char[] getCharArrayExtra(java.lang.String)> -> _SOURCE_
%<android.content.Intent: char getCharExtra(java.lang.String, char)> -> _SOURCE_
%<android.content.Intent: java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String)> -> _SOURCE_
%<android.content.Intent: java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String)> -> _SOURCE_
%<android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)> -> _SOURCE_
%<android.content.Intent: android.content.ClipData getClipData()> -> _SOURCE_
%<android.content.Intent: android.content.ComponentName getComponent()> -> _SOURCE_
%<android.content.Intent: android.net.Uri getData()> -> _SOURCE_
%<android.content.Intent: java.lang.String getDataString()> -> _SOURCE_
%<android.content.Intent: double[] getDoubleArrayExtra(java.lang.String)> -> _SOURCE_
%<android.content.Intent: double getDoubleExtra(java.lang.String, double)> -> _SOURCE_
%<android.content.Intent: android.os.Bundle getExtras()> -> _SOURCE_
%<android.content.Intent: int getFlags()> -> _SOURCE_
%<android.content.Intent: float[] getFloatArrayExtra(java.lang.String)> -> _SOURCE_
%<android.content.Intent: float getFloatExtra(java.lang.String, float)> -> _SOURCE_
%<android.content.Intent: int[] getIntArrayExtra(java.lang.String)> -> _SOURCE_
%<android.content.Intent: java.util.ArrayList getIntegerArrayListExtra(java.lang.String)> -> _SOURCE_
%<android.content.Intent: android.content.Intent getIntent(java.lang.String)> -> _SOURCE_
%<android.content.Intent: android.content.Intent getIntentOld(java.lang.String)> -> _SOURCE_
%<android.content.Intent: int getIntExtra(java.lang.String, int)> -> _SOURCE_
%<android.content.Intent: long[] getLongArrayExtra(java.lang.String)> -> _SOURCE_
%<android.content.Intent: long getLongExtra(java.lang.String, long)> -> _SOURCE_
%<android.content.Intent: java.lang.String getPackage()> -> _SOURCE_
%<android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)> -> _SOURCE_
%<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)> -> _SOURCE_
%<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)> -> _SOURCE_
%<android.content.Intent: java.lang.String getScheme()> -> _SOURCE_
%<android.content.Intent: android.content.Intent getSelector()> -> _SOURCE_
%<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)> -> _SOURCE_
%<android.content.Intent: short[] getShortArrayExtra(java.lang.String)> -> _SOURCE_
%<android.content.Intent: short getShortExtra(java.lang.String, short)> -> _SOURCE_
%<android.content.Intent: android.graphics.Rect getSourceBounds()> -> _SOURCE_
%<android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)> -> _SOURCE_
%<android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)> -> _SOURCE_
%<android.content.Intent: java.lang.String getStringExtra(java.lang.String)> -> _SOURCE_
%<android.content.Intent: java.lang.String getType()> -> _SOURCE_
%<android.content.Intent: void <init>()> -> _SOURCE_
%<android.content.Intent: void <init>(android.content.Intent)> -> _SOURCE_
%<android.content.Intent: void <init>(java.lang.String)> -> _SOURCE_
%<android.content.Intent: void <init>(java.lang.String,android.net.Uri)> -> _SOURCE_
%<android.content.Intent: void <init>(android.content.Context,java.lang.Class)> -> _SOURCE_
%<android.content.Intent: void <init>(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)> -> _SOURCE_
%bundle sources
% do not consider them as sources, because we have the callback parameters from
% which the apps obtain the bundles as sources anyway
%<android.os.Bundle: java.lang.Object get(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: boolean getBoolean(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)> -> _SOURCE_
%<android.os.Bundle: boolean[] getBooleanArray(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: byte getByte(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)> -> _SOURCE_
%<android.os.Bundle: byte[] getByteArray(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: char getChar(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: char getChar(java.lang.String,char)> -> _SOURCE_
%<android.os.Bundle: char[] getCharArray(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String,java.lang.CharSequence)> -> _SOURCE_
%<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: java.lang.CharSequence[] getCharSequenceArray(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: java.util.ArrayList getCharSequenceArrayList(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: java.lang.ClassLoader getClassLoader()> -> _SOURCE_
%<android.os.Bundle: double getDouble(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: double getDouble(java.lang.String,double)> -> _SOURCE_
%<android.os.Bundle: double[] getDoubleArray(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: float getFloat(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: float getFloat(java.lang.String,float)> -> _SOURCE_
%<android.os.Bundle: float[] getFloatArray(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: int getInt(java.lang.String,int)> -> _SOURCE_
%<android.os.Bundle: int getInt(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: int[] getIntArray(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: long getLong(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: long getLong(java.lang.String,long)> -> _SOURCE_
%<android.os.Bundle: long[] getLongArray(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: short getShort(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: short getShort(java.lang.String,short)> -> _SOURCE_
%<android.os.Bundle: short[] getShortArray(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: java.lang.String getString(java.lang.String)> -> _SOURCE_
%<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String key)> -> _SOURCE_
%bundle sinks
<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)> -> _SINK_
<android.os.Bundle: void putBoolean(java.lang.String,boolean)> -> _SINK_
<android.os.Bundle: void putBooleanArray(java.lang.String,boolean[])> -> _SINK_
<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)> -> _SINK_
<android.os.Bundle: void putByte(java.lang.String,byte)> -> _SINK_
<android.os.Bundle: void putByteArray(java.lang.String,byte[])> -> _SINK_
<android.os.Bundle: void putChar(java.lang.String,char)> -> _SINK_
<android.os.Bundle: void putCharArray(java.lang.String,char[])> -> _SINK_
<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)> -> _SINK_
<android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])> -> _SINK_
<android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.os.Bundle: void putDouble(java.lang.String,double)> -> _SINK_
<android.os.Bundle: void putDoubleArray(java.lang.String,double[])> -> _SINK_
<android.os.Bundle: void putFloat(java.lang.String,float)> -> _SINK_
<android.os.Bundle: void putFloatArray(java.lang.String,float[])> -> _SINK_
<android.os.Bundle: void putInt(java.lang.String,int)> -> _SINK_
<android.os.Bundle: void putIntArray(java.lang.String,int[])> -> _SINK_
<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.os.Bundle: void putLong(java.lang.String,long)> -> _SINK_
<android.os.Bundle: void putLongArray(java.lang.String,long[])> -> _SINK_
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)> -> _SINK_
<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])> -> _SINK_
<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)> -> _SINK_
<android.os.Bundle: void putShort(java.lang.String,short)> -> _SINK_
<android.os.Bundle: void putShortArray(java.lang.String,short[])> -> _SINK_
<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)> -> _SINK_
<android.os.Bundle: void putString(java.lang.String,java.lang.String)> -> _SINK_
<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])> -> _SINK_
<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.os.Bundle: void putAll(android.os.Bundle)> -> _SINK_
<android.media.AudioRecord: int read(short[],int,int)> -> _SOURCE_
<android.media.AudioRecord: int read(byte[],int,int)> -> _SOURCE_
<android.media.AudioRecord: int read(java.nio.ByteBuffer,int)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List getInstalledPackages(int)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,int)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)> -> _SOURCE_
<android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,int)> -> _SOURCE_
<android.util.Log: int d(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int e(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int i(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int v(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<java.io.OutputStreamWriter: java.io.Writer append(java.lang.CharSequence)> -> _SINK_
<android.content.Intent: android.content.Intent setAction(java.lang.String)> -> _SINK_
<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.Class)> -> _SINK_
<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)> -> _SINK_
<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,double[])> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,char)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,int[])> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,float)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,float[])> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean[])> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,short)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,double)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,short[])> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte)> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,char[])> -> _SINK_
%<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence[])> -> _SINK_
<android.content.Context: void sendBroadcast(android.content.Intent)> -> _SINK_
<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)> -> _SINK_
<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> -> _SINK_
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> -> _SINK_
<android.media.MediaRecorder: void setVideoSource(int)> -> _SINK_
<android.media.MediaRecorder: void setPreviewDisplay(android.view.Surface)> -> _SINK_
<android.media.MediaRecorder: void start()> -> _SINK_
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)> -> _SINK_
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)> -> _SINK_
<android.content.IntentFilter: void addAction(java.lang.String)> -> _SINK_
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> android.permission.SEND_SMS -> _SINK_ 
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> android.permission.SEND_SMS -> _SINK_ 
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> android.permission.SEND_SMS -> _SINK_ 
<android.os.Handler: boolean sendMessage(android.os.Message)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)> -> _SINK_
<android.content.SharedPreferences: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()> -> _SOURCE_
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()> -> _SOURCE_
<android.net.wifi.WifiInfo: java.lang.String getSSID()> -> _SOURCE_
<android.telephony.gsm.GsmCellLocation: int getCid()> -> _SOURCE_
<android.telephony.gsm.GsmCellLocation: int getLac()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()> -> _SOURCE_
<android.provider.Browser: android.database.Cursor getAllBookmarks()> -> _SOURCE_
<android.provider.Browser: android.database.Cursor getAllVisitedUrls()> -> _SOURCE_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
% This is handled by the Easy Taint Wrapper given that the URL is used afterwards
%<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)> -> _SINK_
%<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
%<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)> -> _SINK_
%<java.net.URL: void <init>(java.lang.String)> -> _SINK_
%<java.net.URL: void <init>(java.net.URL,java.lang.String)> -> _SINK_
%<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)> -> _SINK_
%<android.content.Context: void startActivity(android.content.Intent)> -> _SINK_
%<android.content.ContextWrapper: void startActivity(android.content.Intent)> -> _SINK_
%<android.content.Context: void startActivity(android.content.Intent,android.os.Bundle)> -> _SINK_
<android.content.Context: void startActivities(android.content.Intent[])> -> _SINK_
<android.content.Context: void startActivities(android.content.Intent[],android.os.Bundle)> -> _SINK_
<android.content.Context: android.content.ComponentName startService(android.content.Intent)> -> _SINK_
<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> -> _SINK_
%<android.app.Activity: android.content.Intent getIntent()> -> _SOURCE_
<android.app.Activity: void setResult(int,android.content.Intent)> -> _SINK_
% Do not enter this method as a source. Our callback parameter handling will take care
% of the parameters of this method anyway. Adding this method taints the whole activity!
% <android.app.Activity: void onActivityResult(int,int,android.content.Intent)> -> _SOURCE_
%<android.app.Activity: void startActivity(android.content.Intent)> -> _SINK_
%<android.app.Activity: void startActivity(android.content.Intent,android.os.Bundle)> -> _SINK_
<android.app.Activity: void startActivities(android.content.Intent[])> -> _SINK_
<android.app.Activity: void startActivities(android.content.Intent[],android.os.Bundle)> -> _SINK_
<android.app.Activity: void startActivityForResult(android.content.Intent,int)> -> _SINK_
<android.app.Activity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)> -> _SINK_
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)> -> _SINK_
<android.app.Activity: void startActivityIfNeeded(android.content.Intent,int,android.os.Bundle)> -> _SINK_
<android.app.Activity: void startActivityIfNeeded(android.content.Intent,int)> -> _SINK_
<android.app.Activity: android.content.ComponentName startService(android.content.Intent)> -> _SINK_
<android.app.Activity: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> -> _SINK_
<android.app.Activity: void sendBroadcast(android.content.Intent)> -> _SINK_
<android.app.Activity: void sendBroadcast(android.content.Intent,java.lang.String)> -> _SINK_
<android.app.Activity: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_
<android.app.Activity: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)> -> _SINK_
<android.app.Activity: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.app.Activity: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> -> _SINK_
<android.app.Activity: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.app.Activity: void sendStickyBroadcast(android.content.Intent)> -> _SINK_
<android.app.Activity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_
<android.app.Activity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.app.Activity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])> -> _SINK_
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SINK_
% <android.app.Activity: android.view.View findViewById(int)> -> _SOURCE_
<android.database.Cursor: java.lang.String getString(int)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
